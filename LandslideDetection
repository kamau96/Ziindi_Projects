{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":11474913,"sourceType":"datasetVersion","datasetId":7191644}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Landslide Detection \nThe goal of this notebook is to build a model capable of classifying satellite imagery to identify the occurrence of landslides.","metadata":{}},{"cell_type":"code","source":"# Libraries used for the project\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os\nimport pandas as pd\nfrom pathlib import Path\nimport seaborn as sns\nfrom sklearn.metrics import precision_score, recall_score, f1_score, confusion_matrix\nfrom sklearn.model_selection import StratifiedKFold\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.models import Sequential","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-01T17:02:48.284681Z","iopub.execute_input":"2025-08-01T17:02:48.285073Z","iopub.status.idle":"2025-08-01T17:03:08.558707Z","shell.execute_reply.started":"2025-08-01T17:02:48.285037Z","shell.execute_reply":"2025-08-01T17:03:08.557976Z"}},"outputs":[{"name":"stderr","text":"2025-08-01 17:02:54.354752: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nE0000 00:00:1754067774.562937      36 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\nE0000 00:00:1754067774.621827      36 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"SEED = 44\nnp.random.seed(SEED)\ntf.random.set_seed(SEED)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-01T17:03:08.560333Z","iopub.execute_input":"2025-08-01T17:03:08.560898Z","iopub.status.idle":"2025-08-01T17:03:08.565882Z","shell.execute_reply.started":"2025-08-01T17:03:08.560875Z","shell.execute_reply":"2025-08-01T17:03:08.565005Z"}},"outputs":[],"execution_count":2},{"cell_type":"markdown","source":"## Data Exploration","metadata":{}},{"cell_type":"code","source":"train_data_path = \"/kaggle/input/slideandseekclasificationlandslidedetectiondataset/train_data/train_data\"\ntrain_csv_path = \"/kaggle/input/slideandseekclasificationlandslidedetectiondataset/Train.csv\"\n\ntest_data_path = \"/kaggle/input/slideandseekclasificationlandslidedetectiondataset/test_data/test_data\"\ntest_csv_path = \"/kaggle/input/slideandseekclasificationlandslidedetectiondataset/Test.csv\"\n\ntrain_csv = pd.read_csv(train_csv_path)\ntest_csv= pd.read_csv(test_csv_path)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-01T17:03:08.566851Z","iopub.execute_input":"2025-08-01T17:03:08.567179Z","iopub.status.idle":"2025-08-01T17:03:08.610863Z","shell.execute_reply.started":"2025-08-01T17:03:08.567157Z","shell.execute_reply":"2025-08-01T17:03:08.609969Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"train_csv.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-01T17:03:08.611891Z","iopub.execute_input":"2025-08-01T17:03:08.612241Z","iopub.status.idle":"2025-08-01T17:03:08.636549Z","shell.execute_reply.started":"2025-08-01T17:03:08.612214Z","shell.execute_reply":"2025-08-01T17:03:08.635525Z"}},"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"          ID  label\n0  ID_HUD1ST      1\n1  ID_KGE2HY      1\n2  ID_VHV9BL      1\n3  ID_ZT0VEJ      0\n4  ID_5NFXVY      0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ID</th>\n      <th>label</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>ID_HUD1ST</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>ID_KGE2HY</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>ID_VHV9BL</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>ID_ZT0VEJ</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>ID_5NFXVY</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":4},{"cell_type":"markdown","source":"Lets quickly view how the different classes are distributed.","metadata":{}},{"cell_type":"code","source":"neg, pos = np.bincount(train_csv['label'])\ntotal = neg + pos\nprint('Examples:\\n    Total: {}\\n    Positive: {} ({:.2f}% of total)\\n'.format(total, pos, 100 * pos / total))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-01T17:03:08.638595Z","iopub.execute_input":"2025-08-01T17:03:08.638902Z","iopub.status.idle":"2025-08-01T17:03:08.646821Z","shell.execute_reply.started":"2025-08-01T17:03:08.638879Z","shell.execute_reply":"2025-08-01T17:03:08.645878Z"}},"outputs":[{"name":"stdout","text":"Examples:\n    Total: 7147\n    Positive: 1255 (17.56% of total)\n\n","output_type":"stream"}],"execution_count":5},{"cell_type":"code","source":"class_dist = train_csv.label.value_counts()\nclass_dist = class_dist.reset_index()\n\nfig, ax = plt.subplots()\nax.bar(class_dist[\"label\"], class_dist[\"count\"])\nax.set_ylabel(\"Frequency\")\nax.set_xticks([0, 1], [\"No Landslide\", \"Landslide\"])\nax.set_title(\"Landslide Distribution\")\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-01T17:03:08.647807Z","iopub.execute_input":"2025-08-01T17:03:08.648152Z","iopub.status.idle":"2025-08-01T17:03:08.935821Z","shell.execute_reply.started":"2025-08-01T17:03:08.648129Z","shell.execute_reply":"2025-08-01T17:03:08.934988Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":6},{"cell_type":"markdown","source":"Before we can proceed, we will need the actual satellite images.","metadata":{}},{"cell_type":"code","source":"def load_images_labels(file_path, df):\n   \n    image_path_generator = Path(file_path).glob(\"*.npy\") \n    X = np.zeros((len(df), *(64, 64, 12)))\n    \n    # If shape[1] == 2, it means there is label\n    if df.shape[1] == 2:\n        image_mapping = dict(zip(df[\"ID\"], df[\"label\"]))\n        y = np.zeros(len(df))\n\n    for index, path in enumerate(image_path_generator):\n        image = np.load(path)\n        image_normalized = (image - image.min(axis=(0, 1))) / (image.max(axis=(0, 1)) - image.min(axis=(0, 1)) + 1e-5)\n        X[index] = image_normalized\n\n        if df.shape[1] == 2:\n            label = image_mapping[path.stem]\n            y[index] = label\n\n    if df.shape[1] == 2:\n        return X, y.reshape(-1, 1)\n\n    return X","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-01T17:03:08.936736Z","iopub.execute_input":"2025-08-01T17:03:08.937087Z","iopub.status.idle":"2025-08-01T17:03:08.944493Z","shell.execute_reply.started":"2025-08-01T17:03:08.937058Z","shell.execute_reply":"2025-08-01T17:03:08.943461Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"X_train, y = load_images_labels(train_data_path, train_csv)\nX_test = load_images_labels(test_data_path, test_csv)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-01T17:03:08.945251Z","iopub.execute_input":"2025-08-01T17:03:08.945499Z","iopub.status.idle":"2025-08-01T17:05:14.594442Z","shell.execute_reply.started":"2025-08-01T17:03:08.945478Z","shell.execute_reply":"2025-08-01T17:05:14.593647Z"}},"outputs":[],"execution_count":8},{"cell_type":"markdown","source":"## Model Building\nI'll build a convnet. I'll ensure to use stratified kfold","metadata":{}},{"cell_type":"code","source":"# --- Helper to build datasets quickly ---\ndef make_ds(X, y=None, batch_size=64, shuffle=False, seed=SEED):\n    ds = tf.data.Dataset.from_tensor_slices((X, y)) if y is not None else tf.data.Dataset.from_tensor_slices(X)\n    if shuffle and y is not None:\n        ds = ds.shuffle(buffer_size=len(X), seed=seed)\n    ds = ds.batch(batch_size).prefetch(tf.data.AUTOTUNE)\n    return ds","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-01T17:05:14.595468Z","iopub.execute_input":"2025-08-01T17:05:14.595803Z","iopub.status.idle":"2025-08-01T17:05:14.602114Z","shell.execute_reply.started":"2025-08-01T17:05:14.595773Z","shell.execute_reply":"2025-08-01T17:05:14.601071Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"# --- Model factory (fresh model each fold) ---\nMETRICS = [\n      keras.metrics.BinaryCrossentropy(name='cross entropy'),  # same as model's loss\n      keras.metrics.MeanSquaredError(name='Brier score'),\n      keras.metrics.TruePositives(name='tp'),\n      keras.metrics.FalsePositives(name='fp'),\n      keras.metrics.TrueNegatives(name='tn'),\n      keras.metrics.FalseNegatives(name='fn'),\n      keras.metrics.Precision(name='precision'),\n      keras.metrics.Recall(name='recall'),\n      keras.metrics.AUC(name='auc'),\n      keras.metrics.AUC(name='prc', curve='PR'), # precision-recall curve\n]\n\ndef build_model(metrics=METRICS, output_bias=None, input_shape=(64, 64, 12)):\n    if output_bias is not None:\n        output_bias = tf.keras.initializers.Constant(output_bias)\n    model = Sequential([\n        layers.Input(shape=input_shape),\n\n        layers.Conv2D(64, 3, padding='same', activation='relu'),\n        layers.BatchNormalization(),\n        layers.MaxPooling2D(),\n\n        layers.Conv2D(128, 3, padding='same', activation='relu'),\n        layers.BatchNormalization(),\n        layers.MaxPooling2D(),\n\n        layers.Conv2D(256, 3, padding='same', activation='relu'),\n        layers.BatchNormalization(),\n        layers.GlobalAveragePooling2D(),  # Better than Flatten for small patches\n\n        layers.Dense(256, activation='relu'),\n        layers.Dropout(0.3),\n\n        layers.Dense(1, activation='sigmoid', bias_initializer=output_bias)  # For binary classification\n    ])\n    \n    model.compile(\n        optimizer=keras.optimizers.Adam(learning_rate=1e-3),\n        loss=keras.losses.BinaryCrossentropy(),  # from_logits=False (sigmoid in model)\n        metrics=metrics\n    )\n    return model","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-01T17:05:14.603105Z","iopub.execute_input":"2025-08-01T17:05:14.603951Z","iopub.status.idle":"2025-08-01T17:05:15.628514Z","shell.execute_reply.started":"2025-08-01T17:05:14.603896Z","shell.execute_reply":"2025-08-01T17:05:15.627514Z"}},"outputs":[{"name":"stderr","text":"I0000 00:00:1754067915.537697      36 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n","output_type":"stream"}],"execution_count":10},{"cell_type":"code","source":"# --- K-Fold training ---\nskf = StratifiedKFold(n_splits=5, shuffle=True, random_state=SEED)\n\nBATCH_SIZE = 64\nEPOCHS = 10\n\noof_preds = np.zeros(len(X_train), dtype=np.float32)\noof_true  = y.astype(int)\n\nfor fold, (tr_idx, va_idx) in enumerate(skf.split(X_train, y), start=1):\n    X_tr, y_tr = X_train[tr_idx], y[tr_idx]\n    X_va, y_va = X_train[va_idx], y[va_idx]\n\n    train_ds = make_ds(X_tr, y_tr, batch_size=BATCH_SIZE, shuffle=True, seed=SEED)\n    val_ds   = make_ds(X_va, y_va, batch_size=BATCH_SIZE, shuffle=False)\n\n    model = build_model()\n\n    es = keras.callbacks.EarlyStopping(\n        monitor='val_prc', mode='max', patience=3, restore_best_weights=True\n    )\n\n    history = model.fit(\n        train_ds,\n        validation_data=val_ds,\n        epochs=EPOCHS,\n        callbacks=[es],\n        verbose=1\n    )\n\n    # OOF predictions as probabilities\n    probs = model.predict(val_ds, verbose=0).ravel()\n    oof_preds[va_idx] = probs","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-01T17:05:15.629566Z","iopub.execute_input":"2025-08-01T17:05:15.629900Z","iopub.status.idle":"2025-08-01T17:10:21.421670Z","shell.execute_reply.started":"2025-08-01T17:05:15.629872Z","shell.execute_reply":"2025-08-01T17:10:21.420745Z"}},"outputs":[{"name":"stdout","text":"Epoch 1/10\n","output_type":"stream"},{"name":"stderr","text":"WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nI0000 00:00:1754067936.942132     100 service.cc:148] XLA service 0x7cb8600061f0 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\nI0000 00:00:1754067936.943030     100 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\nI0000 00:00:1754067937.738481     100 cuda_dnn.cc:529] Loaded cuDNN version 90300\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m 5/90\u001b[0m \u001b[32m━\u001b[0m\u001b[37m━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m2s\u001b[0m 30ms/step - Brier score: 0.4015 - auc: 0.5974 - cross entropy: 1.0674 - fn: 6.2000 - fp: 108.2000 - loss: 1.0674 - prc: 0.2222 - precision: 0.1645 - recall: 0.8590 - tn: 55.8000 - tp: 21.8000","output_type":"stream"},{"name":"stderr","text":"I0000 00:00:1754067942.532162     100 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m90/90\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m29s\u001b[0m 151ms/step - Brier score: 0.1645 - auc: 0.7275 - cross entropy: 0.4900 - fn: 340.5934 - fp: 258.2637 - loss: 0.4900 - prc: 0.3136 - precision: 0.3359 - recall: 0.3387 - tn: 2185.1428 - tp: 158.3517 - val_Brier score: 0.1601 - val_auc: 0.7725 - val_cross entropy: 0.5682 - val_fn: 251.0000 - val_fp: 0.0000e+00 - val_loss: 0.5682 - val_prc: 0.3416 - val_precision: 0.0000e+00 - val_recall: 0.0000e+00 - val_tn: 1179.0000 - val_tp: 0.0000e+00\nEpoch 2/10\n\u001b[1m90/90\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 33ms/step - Brier score: 0.0979 - auc: 0.8804 - cross entropy: 0.3121 - fn: 265.9341 - fp: 133.3407 - loss: 0.3121 - prc: 0.6515 - precision: 0.6455 - recall: 0.4965 - tn: 2282.2527 - tp: 260.8242 - val_Brier score: 0.1749 - val_auc: 0.5000 - val_cross entropy: 1.1181 - val_fn: 251.0000 - val_fp: 0.0000e+00 - val_loss: 1.1181 - val_prc: 0.1755 - val_precision: 0.0000e+00 - val_recall: 0.0000e+00 - val_tn: 1179.0000 - val_tp: 0.0000e+00\nEpoch 3/10\n\u001b[1m90/90\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 32ms/step - Brier score: 0.0750 - auc: 0.9280 - cross entropy: 0.2416 - fn: 208.2418 - fp: 103.5824 - loss: 0.2416 - prc: 0.7635 - precision: 0.7480 - recall: 0.5935 - tn: 2326.4944 - tp: 304.0330 - val_Brier score: 0.1738 - val_auc: 0.5900 - val_cross entropy: 0.9815 - val_fn: 251.0000 - val_fp: 0.0000e+00 - val_loss: 0.9815 - val_prc: 0.2369 - val_precision: 0.0000e+00 - val_recall: 0.0000e+00 - val_tn: 1179.0000 - val_tp: 0.0000e+00\nEpoch 4/10\n\u001b[1m90/90\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 33ms/step - Brier score: 0.0719 - auc: 0.9306 - cross entropy: 0.2364 - fn: 198.1209 - fp: 83.0879 - loss: 0.2364 - prc: 0.7910 - precision: 0.7945 - recall: 0.5989 - tn: 2340.5056 - tp: 320.6374 - val_Brier score: 0.1573 - val_auc: 0.7446 - val_cross entropy: 0.6612 - val_fn: 246.0000 - val_fp: 3.0000 - val_loss: 0.6612 - val_prc: 0.4036 - val_precision: 0.6250 - val_recall: 0.0199 - val_tn: 1176.0000 - val_tp: 5.0000\nEpoch 5/10\n\u001b[1m90/90\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 33ms/step - Brier score: 0.0642 - auc: 0.9475 - cross entropy: 0.2099 - fn: 180.8681 - fp: 79.5604 - loss: 0.2099 - prc: 0.8344 - precision: 0.8286 - recall: 0.6486 - tn: 2339.1868 - tp: 342.7363 - val_Brier score: 0.1388 - val_auc: 0.8715 - val_cross entropy: 0.5225 - val_fn: 233.0000 - val_fp: 3.0000 - val_loss: 0.5225 - val_prc: 0.6297 - val_precision: 0.8571 - val_recall: 0.0717 - val_tn: 1176.0000 - val_tp: 18.0000\nEpoch 6/10\n\u001b[1m90/90\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 32ms/step - Brier score: 0.0568 - auc: 0.9574 - cross entropy: 0.1879 - fn: 162.1648 - fp: 69.0440 - loss: 0.1879 - prc: 0.8587 - precision: 0.8407 - recall: 0.6761 - tn: 2362.3955 - tp: 348.7473 - val_Brier score: 0.0728 - val_auc: 0.9398 - val_cross entropy: 0.2382 - val_fn: 134.0000 - val_fp: 21.0000 - val_loss: 0.2382 - val_prc: 0.8184 - val_precision: 0.8478 - val_recall: 0.4661 - val_tn: 1158.0000 - val_tp: 117.0000\nEpoch 7/10\n\u001b[1m90/90\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 33ms/step - Brier score: 0.0555 - auc: 0.9597 - cross entropy: 0.1811 - fn: 144.5385 - fp: 85.5495 - loss: 0.1811 - prc: 0.8547 - precision: 0.8075 - recall: 0.7159 - tn: 2357.9451 - tp: 354.3187 - val_Brier score: 0.0894 - val_auc: 0.8635 - val_cross entropy: 0.3550 - val_fn: 135.0000 - val_fp: 25.0000 - val_loss: 0.3550 - val_prc: 0.7215 - val_precision: 0.8227 - val_recall: 0.4622 - val_tn: 1154.0000 - val_tp: 116.0000\nEpoch 8/10\n\u001b[1m90/90\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 32ms/step - Brier score: 0.0556 - auc: 0.9621 - cross entropy: 0.1810 - fn: 157.1978 - fp: 89.1648 - loss: 0.1810 - prc: 0.8635 - precision: 0.8072 - recall: 0.7010 - tn: 2333.9341 - tp: 362.0549 - val_Brier score: 0.0771 - val_auc: 0.9073 - val_cross entropy: 0.2968 - val_fn: 117.0000 - val_fp: 23.0000 - val_loss: 0.2968 - val_prc: 0.7826 - val_precision: 0.8535 - val_recall: 0.5339 - val_tn: 1156.0000 - val_tp: 134.0000\nEpoch 9/10\n\u001b[1m90/90\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 33ms/step - Brier score: 0.0501 - auc: 0.9699 - cross entropy: 0.1642 - fn: 136.9121 - fp: 81.1648 - loss: 0.1642 - prc: 0.8927 - precision: 0.8271 - recall: 0.7434 - tn: 2338.3845 - tp: 385.8901 - val_Brier score: 0.2208 - val_auc: 0.8476 - val_cross entropy: 0.7374 - val_fn: 36.0000 - val_fp: 384.0000 - val_loss: 0.7374 - val_prc: 0.5245 - val_precision: 0.3589 - val_recall: 0.8566 - val_tn: 795.0000 - val_tp: 215.0000\nEpoch 1/10\n\u001b[1m90/90\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 112ms/step - Brier score: 0.1600 - auc: 0.7966 - cross entropy: 0.5199 - fn: 419.5934 - fp: 497.6923 - loss: 0.3893 - prc: 0.4304 - precision: 0.3994 - recall: 0.4811 - tn: 3116.0439 - tp: 339.0220 - val_Brier score: 0.1467 - val_auc: 0.5997 - val_cross entropy: 0.4742 - val_fn: 251.0000 - val_fp: 0.0000e+00 - val_loss: 0.4742 - val_prc: 0.2251 - val_precision: 0.0000e+00 - val_recall: 0.0000e+00 - val_tn: 1179.0000 - val_tp: 0.0000e+00\nEpoch 2/10\n\u001b[1m90/90\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 33ms/step - Brier score: 0.0884 - auc: 0.8956 - cross entropy: 0.2835 - fn: 261.2088 - fp: 97.8352 - loss: 0.2835 - prc: 0.6681 - precision: 0.7132 - recall: 0.4815 - tn: 2335.0989 - tp: 248.2088 - val_Brier score: 0.1622 - val_auc: 0.6948 - val_cross entropy: 0.6125 - val_fn: 251.0000 - val_fp: 0.0000e+00 - val_loss: 0.6125 - val_prc: 0.3096 - val_precision: 0.0000e+00 - val_recall: 0.0000e+00 - val_tn: 1179.0000 - val_tp: 0.0000e+00\nEpoch 3/10\n\u001b[1m90/90\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 33ms/step - Brier score: 0.0815 - auc: 0.9158 - cross entropy: 0.2611 - fn: 242.6044 - fp: 97.6154 - loss: 0.2611 - prc: 0.7138 - precision: 0.7198 - recall: 0.5011 - tn: 2332.3076 - tp: 269.8242 - val_Brier score: 0.1318 - val_auc: 0.8179 - val_cross entropy: 0.4083 - val_fn: 238.0000 - val_fp: 22.0000 - val_loss: 0.4083 - val_prc: 0.4261 - val_precision: 0.3714 - val_recall: 0.0518 - val_tn: 1157.0000 - val_tp: 13.0000\nEpoch 4/10\n\u001b[1m90/90\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 33ms/step - Brier score: 0.0742 - auc: 0.9275 - cross entropy: 0.2394 - fn: 214.9670 - fp: 81.4286 - loss: 0.2394 - prc: 0.7619 - precision: 0.7668 - recall: 0.5665 - tn: 2357.1208 - tp: 288.8352 - val_Brier score: 0.1611 - val_auc: 0.8653 - val_cross entropy: 0.6778 - val_fn: 249.0000 - val_fp: 0.0000e+00 - val_loss: 0.6778 - val_prc: 0.6681 - val_precision: 1.0000 - val_recall: 0.0080 - val_tn: 1179.0000 - val_tp: 2.0000\nEpoch 5/10\n\u001b[1m90/90\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 33ms/step - Brier score: 0.0678 - auc: 0.9375 - cross entropy: 0.2238 - fn: 197.8791 - fp: 83.7802 - loss: 0.2238 - prc: 0.8067 - precision: 0.7818 - recall: 0.6119 - tn: 2349.7473 - tp: 310.9451 - val_Brier score: 0.1661 - val_auc: 0.7924 - val_cross entropy: 0.7839 - val_fn: 251.0000 - val_fp: 0.0000e+00 - val_loss: 0.7839 - val_prc: 0.5465 - val_precision: 0.0000e+00 - val_recall: 0.0000e+00 - val_tn: 1179.0000 - val_tp: 0.0000e+00\nEpoch 6/10\n\u001b[1m90/90\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 33ms/step - Brier score: 0.0593 - auc: 0.9514 - cross entropy: 0.1986 - fn: 176.6813 - fp: 63.0769 - loss: 0.1986 - prc: 0.8438 - precision: 0.8400 - recall: 0.6490 - tn: 2367.6375 - tp: 334.9561 - val_Brier score: 0.0970 - val_auc: 0.9123 - val_cross entropy: 0.3412 - val_fn: 171.0000 - val_fp: 11.0000 - val_loss: 0.3412 - val_prc: 0.7488 - val_precision: 0.8791 - val_recall: 0.3187 - val_tn: 1168.0000 - val_tp: 80.0000\nEpoch 7/10\n\u001b[1m90/90\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 33ms/step - Brier score: 0.0557 - auc: 0.9634 - cross entropy: 0.1822 - fn: 160.3297 - fp: 67.9011 - loss: 0.1822 - prc: 0.8606 - precision: 0.8437 - recall: 0.6733 - tn: 2356.7473 - tp: 357.3736 - val_Brier score: 0.0927 - val_auc: 0.8851 - val_cross entropy: 0.3099 - val_fn: 141.0000 - val_fp: 41.0000 - val_loss: 0.3099 - val_prc: 0.6810 - val_precision: 0.7285 - val_recall: 0.4382 - val_tn: 1138.0000 - val_tp: 110.0000\nEpoch 8/10\n\u001b[1m90/90\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 32ms/step - Brier score: 0.0557 - auc: 0.9597 - cross entropy: 0.1844 - fn: 143.3407 - fp: 73.3187 - loss: 0.1844 - prc: 0.8558 - precision: 0.8252 - recall: 0.7014 - tn: 2357.8352 - tp: 367.8571 - val_Brier score: 0.0765 - val_auc: 0.9158 - val_cross entropy: 0.2715 - val_fn: 87.0000 - val_fp: 57.0000 - val_loss: 0.2715 - val_prc: 0.7748 - val_precision: 0.7421 - val_recall: 0.6534 - val_tn: 1122.0000 - val_tp: 164.0000\nEpoch 9/10\n\u001b[1m90/90\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 31ms/step - Brier score: 0.0491 - auc: 0.9712 - cross entropy: 0.1605 - fn: 140.3626 - fp: 62.9560 - loss: 0.1605 - prc: 0.8956 - precision: 0.8644 - recall: 0.7187 - tn: 2368.0110 - tp: 371.0220 - val_Brier score: 0.0844 - val_auc: 0.9093 - val_cross entropy: 0.2917 - val_fn: 155.0000 - val_fp: 9.0000 - val_loss: 0.2917 - val_prc: 0.7686 - val_precision: 0.9143 - val_recall: 0.3825 - val_tn: 1170.0000 - val_tp: 96.0000\nEpoch 10/10\n\u001b[1m90/90\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 33ms/step - Brier score: 0.0488 - auc: 0.9719 - cross entropy: 0.1579 - fn: 131.6923 - fp: 69.8022 - loss: 0.1579 - prc: 0.8978 - precision: 0.8457 - recall: 0.7439 - tn: 2355.6484 - tp: 385.2088 - val_Brier score: 0.0839 - val_auc: 0.9291 - val_cross entropy: 0.2841 - val_fn: 65.0000 - val_fp: 98.0000 - val_loss: 0.2841 - val_prc: 0.7824 - val_precision: 0.6549 - val_recall: 0.7410 - val_tn: 1081.0000 - val_tp: 186.0000\nEpoch 1/10\n\u001b[1m90/90\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 124ms/step - Brier score: 0.1144 - auc: 0.8390 - cross entropy: 0.3638 - fn: 441.0989 - fp: 279.8791 - loss: 0.4407 - prc: 0.5705 - precision: 0.5267 - recall: 0.4462 - tn: 3335.0879 - tp: 316.3077 - val_Brier score: 0.1523 - val_auc: 0.7940 - val_cross entropy: 0.5023 - val_fn: 251.0000 - val_fp: 0.0000e+00 - val_loss: 0.5023 - val_prc: 0.3660 - val_precision: 0.0000e+00 - val_recall: 0.0000e+00 - val_tn: 1178.0000 - val_tp: 0.0000e+00\nEpoch 2/10\n\u001b[1m90/90\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 33ms/step - Brier score: 0.0925 - auc: 0.8920 - cross entropy: 0.2960 - fn: 257.1429 - fp: 105.7582 - loss: 0.2960 - prc: 0.6857 - precision: 0.7208 - recall: 0.5017 - tn: 2314.1978 - tp: 265.2747 - val_Brier score: 0.1714 - val_auc: 0.8070 - val_cross entropy: 0.7928 - val_fn: 251.0000 - val_fp: 0.0000e+00 - val_loss: 0.7928 - val_prc: 0.4056 - val_precision: 0.0000e+00 - val_recall: 0.0000e+00 - val_tn: 1178.0000 - val_tp: 0.0000e+00\nEpoch 3/10\n\u001b[1m90/90\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 32ms/step - Brier score: 0.0812 - auc: 0.9156 - cross entropy: 0.2612 - fn: 222.4725 - fp: 101.9451 - loss: 0.2612 - prc: 0.7446 - precision: 0.7242 - recall: 0.5658 - tn: 2325.8682 - tp: 292.0879 - val_Brier score: 0.1574 - val_auc: 0.7638 - val_cross entropy: 0.5819 - val_fn: 245.0000 - val_fp: 7.0000 - val_loss: 0.5819 - val_prc: 0.3637 - val_precision: 0.4615 - val_recall: 0.0239 - val_tn: 1171.0000 - val_tp: 6.0000\nEpoch 4/10\n\u001b[1m90/90\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 32ms/step - Brier score: 0.0708 - auc: 0.9351 - cross entropy: 0.2302 - fn: 199.8352 - fp: 102.2527 - loss: 0.2302 - prc: 0.7996 - precision: 0.7539 - recall: 0.6274 - tn: 2322.1648 - tp: 318.1209 - val_Brier score: 0.1636 - val_auc: 0.8070 - val_cross entropy: 0.7243 - val_fn: 249.0000 - val_fp: 0.0000e+00 - val_loss: 0.7243 - val_prc: 0.4893 - val_precision: 1.0000 - val_recall: 0.0080 - val_tn: 1178.0000 - val_tp: 2.0000\nEpoch 5/10\n\u001b[1m90/90\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 33ms/step - Brier score: 0.0682 - auc: 0.9418 - cross entropy: 0.2205 - fn: 189.7912 - fp: 88.1099 - loss: 0.2205 - prc: 0.8126 - precision: 0.7816 - recall: 0.6258 - tn: 2346.0439 - tp: 318.4286 - val_Brier score: 0.1094 - val_auc: 0.8838 - val_cross entropy: 0.3825 - val_fn: 175.0000 - val_fp: 22.0000 - val_loss: 0.3825 - val_prc: 0.6513 - val_precision: 0.7755 - val_recall: 0.3028 - val_tn: 1156.0000 - val_tp: 76.0000\nEpoch 6/10\n\u001b[1m90/90\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 33ms/step - Brier score: 0.0711 - auc: 0.9363 - cross entropy: 0.2323 - fn: 176.5714 - fp: 99.1209 - loss: 0.2323 - prc: 0.8077 - precision: 0.7628 - recall: 0.6699 - tn: 2324.7473 - tp: 341.9341 - val_Brier score: 0.1315 - val_auc: 0.8791 - val_cross entropy: 0.5024 - val_fn: 217.0000 - val_fp: 1.0000 - val_loss: 0.5024 - val_prc: 0.6656 - val_precision: 0.9714 - val_recall: 0.1355 - val_tn: 1177.0000 - val_tp: 34.0000\nEpoch 7/10\n\u001b[1m90/90\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 33ms/step - Brier score: 0.0608 - auc: 0.9503 - cross entropy: 0.1976 - fn: 158.6374 - fp: 85.4835 - loss: 0.1976 - prc: 0.8341 - precision: 0.7906 - recall: 0.6778 - tn: 2355.6924 - tp: 342.5604 - val_Brier score: 0.0898 - val_auc: 0.8950 - val_cross entropy: 0.2937 - val_fn: 106.0000 - val_fp: 67.0000 - val_loss: 0.2937 - val_prc: 0.7189 - val_precision: 0.6840 - val_recall: 0.5777 - val_tn: 1111.0000 - val_tp: 145.0000\nEpoch 8/10\n\u001b[1m90/90\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 33ms/step - Brier score: 0.0569 - auc: 0.9553 - cross entropy: 0.1875 - fn: 156.2747 - fp: 80.0220 - loss: 0.1875 - prc: 0.8547 - precision: 0.8103 - recall: 0.6984 - tn: 2356.5276 - tp: 349.5494 - val_Brier score: 0.1433 - val_auc: 0.7294 - val_cross entropy: 0.8347 - val_fn: 213.0000 - val_fp: 11.0000 - val_loss: 0.8347 - val_prc: 0.4718 - val_precision: 0.7755 - val_recall: 0.1514 - val_tn: 1167.0000 - val_tp: 38.0000\nEpoch 9/10\n\u001b[1m90/90\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 32ms/step - Brier score: 0.0531 - auc: 0.9640 - cross entropy: 0.1742 - fn: 135.7363 - fp: 80.9231 - loss: 0.1742 - prc: 0.8672 - precision: 0.8151 - recall: 0.7464 - tn: 2354.0330 - tp: 371.6813 - val_Brier score: 0.0669 - val_auc: 0.9327 - val_cross entropy: 0.2326 - val_fn: 72.0000 - val_fp: 48.0000 - val_loss: 0.2326 - val_prc: 0.8204 - val_precision: 0.7885 - val_recall: 0.7131 - val_tn: 1130.0000 - val_tp: 179.0000\nEpoch 10/10\n\u001b[1m90/90\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 32ms/step - Brier score: 0.0486 - auc: 0.9689 - cross entropy: 0.1637 - fn: 122.7582 - fp: 76.3297 - loss: 0.1637 - prc: 0.8959 - precision: 0.8344 - recall: 0.7729 - tn: 2343.3735 - tp: 399.9121 - val_Brier score: 0.0878 - val_auc: 0.9472 - val_cross entropy: 0.2971 - val_fn: 160.0000 - val_fp: 4.0000 - val_loss: 0.2971 - val_prc: 0.8253 - val_precision: 0.9579 - val_recall: 0.3625 - val_tn: 1174.0000 - val_tp: 91.0000\nEpoch 1/10\n\u001b[1m90/90\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 109ms/step - Brier score: 0.1138 - auc: 0.8444 - cross entropy: 0.3607 - fn: 509.2308 - fp: 211.8901 - loss: 0.4279 - prc: 0.5500 - precision: 0.5511 - recall: 0.3382 - tn: 3388.3296 - tp: 261.9231 - val_Brier score: 0.1659 - val_auc: 0.7523 - val_cross entropy: 0.6476 - val_fn: 251.0000 - val_fp: 0.0000e+00 - val_loss: 0.6476 - val_prc: 0.3626 - val_precision: 0.0000e+00 - val_recall: 0.0000e+00 - val_tn: 1178.0000 - val_tp: 0.0000e+00\nEpoch 2/10\n\u001b[1m90/90\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 32ms/step - Brier score: 0.0875 - auc: 0.9014 - cross entropy: 0.2828 - fn: 248.3297 - fp: 102.4176 - loss: 0.2828 - prc: 0.7061 - precision: 0.7279 - recall: 0.5163 - tn: 2324.2966 - tp: 267.3297 - val_Brier score: 0.1730 - val_auc: 0.7414 - val_cross entropy: 0.8725 - val_fn: 251.0000 - val_fp: 0.0000e+00 - val_loss: 0.8725 - val_prc: 0.3534 - val_precision: 0.0000e+00 - val_recall: 0.0000e+00 - val_tn: 1178.0000 - val_tp: 0.0000e+00\nEpoch 3/10\n\u001b[1m90/90\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 32ms/step - Brier score: 0.0750 - auc: 0.9283 - cross entropy: 0.2427 - fn: 209.1978 - fp: 93.3956 - loss: 0.2427 - prc: 0.7707 - precision: 0.7602 - recall: 0.5983 - tn: 2331.4175 - tp: 308.3626 - val_Brier score: 0.1499 - val_auc: 0.7661 - val_cross entropy: 0.5302 - val_fn: 251.0000 - val_fp: 0.0000e+00 - val_loss: 0.5302 - val_prc: 0.4344 - val_precision: 0.0000e+00 - val_recall: 0.0000e+00 - val_tn: 1178.0000 - val_tp: 0.0000e+00\nEpoch 4/10\n\u001b[1m90/90\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 32ms/step - Brier score: 0.0674 - auc: 0.9426 - cross entropy: 0.2214 - fn: 195.3297 - fp: 83.8352 - loss: 0.2214 - prc: 0.8183 - precision: 0.8011 - recall: 0.6168 - tn: 2335.9121 - tp: 327.2967 - val_Brier score: 0.0956 - val_auc: 0.8966 - val_cross entropy: 0.3016 - val_fn: 187.0000 - val_fp: 8.0000 - val_loss: 0.3016 - val_prc: 0.6879 - val_precision: 0.8889 - val_recall: 0.2550 - val_tn: 1170.0000 - val_tp: 64.0000\nEpoch 5/10\n\u001b[1m90/90\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 33ms/step - Brier score: 0.0625 - auc: 0.9502 - cross entropy: 0.2033 - fn: 178.9670 - fp: 76.7912 - loss: 0.2033 - prc: 0.8349 - precision: 0.8212 - recall: 0.6430 - tn: 2354.5605 - tp: 332.0549 - val_Brier score: 0.1488 - val_auc: 0.8246 - val_cross entropy: 0.6088 - val_fn: 241.0000 - val_fp: 0.0000e+00 - val_loss: 0.6088 - val_prc: 0.5643 - val_precision: 1.0000 - val_recall: 0.0398 - val_tn: 1178.0000 - val_tp: 10.0000\nEpoch 6/10\n\u001b[1m90/90\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 33ms/step - Brier score: 0.0577 - auc: 0.9550 - cross entropy: 0.1919 - fn: 158.2637 - fp: 72.7363 - loss: 0.1919 - prc: 0.8538 - precision: 0.8306 - recall: 0.6839 - tn: 2355.5825 - tp: 355.7912 - val_Brier score: 0.0798 - val_auc: 0.9175 - val_cross entropy: 0.2656 - val_fn: 120.0000 - val_fp: 38.0000 - val_loss: 0.2656 - val_prc: 0.7530 - val_precision: 0.7751 - val_recall: 0.5219 - val_tn: 1140.0000 - val_tp: 131.0000\nEpoch 7/10\n\u001b[1m90/90\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 32ms/step - Brier score: 0.0583 - auc: 0.9556 - cross entropy: 0.1920 - fn: 148.1209 - fp: 83.1978 - loss: 0.1920 - prc: 0.8516 - precision: 0.7913 - recall: 0.7110 - tn: 2356.6484 - tp: 354.4066 - val_Brier score: 0.0794 - val_auc: 0.9351 - val_cross entropy: 0.2661 - val_fn: 116.0000 - val_fp: 37.0000 - val_loss: 0.2661 - val_prc: 0.7814 - val_precision: 0.7849 - val_recall: 0.5378 - val_tn: 1141.0000 - val_tp: 135.0000\nEpoch 8/10\n\u001b[1m90/90\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 32ms/step - Brier score: 0.0554 - auc: 0.9619 - cross entropy: 0.1812 - fn: 132.0659 - fp: 96.5385 - loss: 0.1812 - prc: 0.8689 - precision: 0.7927 - recall: 0.7525 - tn: 2331.7693 - tp: 382.0000 - val_Brier score: 0.0876 - val_auc: 0.9094 - val_cross entropy: 0.2809 - val_fn: 116.0000 - val_fp: 54.0000 - val_loss: 0.2809 - val_prc: 0.7310 - val_precision: 0.7143 - val_recall: 0.5378 - val_tn: 1124.0000 - val_tp: 135.0000\nEpoch 9/10\n\u001b[1m90/90\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 33ms/step - Brier score: 0.0483 - auc: 0.9722 - cross entropy: 0.1599 - fn: 122.6813 - fp: 71.7912 - loss: 0.1599 - prc: 0.9079 - precision: 0.8531 - recall: 0.7705 - tn: 2341.1099 - tp: 406.7912 - val_Brier score: 0.0818 - val_auc: 0.8988 - val_cross entropy: 0.3114 - val_fn: 126.0000 - val_fp: 25.0000 - val_loss: 0.3114 - val_prc: 0.7615 - val_precision: 0.8333 - val_recall: 0.4980 - val_tn: 1153.0000 - val_tp: 125.0000\nEpoch 10/10\n\u001b[1m90/90\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 33ms/step - Brier score: 0.0505 - auc: 0.9688 - cross entropy: 0.1661 - fn: 123.4945 - fp: 73.4176 - loss: 0.1661 - prc: 0.8967 - precision: 0.8553 - recall: 0.7499 - tn: 2343.4724 - tp: 401.9890 - val_Brier score: 0.1470 - val_auc: 0.6406 - val_cross entropy: 1.2273 - val_fn: 216.0000 - val_fp: 0.0000e+00 - val_loss: 1.2273 - val_prc: 0.4636 - val_precision: 1.0000 - val_recall: 0.1394 - val_tn: 1178.0000 - val_tp: 35.0000\nEpoch 1/10\n\u001b[1m90/90\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 116ms/step - Brier score: 0.1405 - auc: 0.6976 - cross entropy: 0.7358 - fn: 578.4506 - fp: 211.9780 - loss: 0.4454 - prc: 0.3978 - precision: 0.4597 - recall: 0.2383 - tn: 3384.3955 - tp: 196.5495 - val_Brier score: 0.1621 - val_auc: 0.7618 - val_cross entropy: 0.5875 - val_fn: 251.0000 - val_fp: 0.0000e+00 - val_loss: 0.5875 - val_prc: 0.3103 - val_precision: 0.0000e+00 - val_recall: 0.0000e+00 - val_tn: 1178.0000 - val_tp: 0.0000e+00\nEpoch 2/10\n\u001b[1m90/90\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 33ms/step - Brier score: 0.0866 - auc: 0.9008 - cross entropy: 0.2776 - fn: 253.1209 - fp: 100.1648 - loss: 0.2776 - prc: 0.6923 - precision: 0.7237 - recall: 0.4696 - tn: 2328.9121 - tp: 260.1758 - val_Brier score: 0.1748 - val_auc: 0.5057 - val_cross entropy: 1.0898 - val_fn: 251.0000 - val_fp: 0.0000e+00 - val_loss: 1.0898 - val_prc: 0.1968 - val_precision: 0.0000e+00 - val_recall: 0.0000e+00 - val_tn: 1178.0000 - val_tp: 0.0000e+00\nEpoch 3/10\n\u001b[1m90/90\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 33ms/step - Brier score: 0.0799 - auc: 0.9217 - cross entropy: 0.2542 - fn: 217.7692 - fp: 105.3516 - loss: 0.2542 - prc: 0.7420 - precision: 0.7240 - recall: 0.5727 - tn: 2325.2087 - tp: 294.0439 - val_Brier score: 0.1738 - val_auc: 0.5762 - val_cross entropy: 1.0538 - val_fn: 251.0000 - val_fp: 0.0000e+00 - val_loss: 1.0538 - val_prc: 0.2774 - val_precision: 0.0000e+00 - val_recall: 0.0000e+00 - val_tn: 1178.0000 - val_tp: 0.0000e+00\nEpoch 4/10\n\u001b[1m90/90\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 33ms/step - Brier score: 0.0662 - auc: 0.9433 - cross entropy: 0.2155 - fn: 198.0110 - fp: 80.4066 - loss: 0.2155 - prc: 0.8145 - precision: 0.8027 - recall: 0.6082 - tn: 2347.7693 - tp: 316.1868 - val_Brier score: 0.1494 - val_auc: 0.8085 - val_cross entropy: 0.5704 - val_fn: 250.0000 - val_fp: 0.0000e+00 - val_loss: 0.5704 - val_prc: 0.4495 - val_precision: 1.0000 - val_recall: 0.0040 - val_tn: 1178.0000 - val_tp: 1.0000\nEpoch 5/10\n\u001b[1m90/90\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 33ms/step - Brier score: 0.0630 - auc: 0.9468 - cross entropy: 0.2102 - fn: 176.6813 - fp: 91.0989 - loss: 0.2102 - prc: 0.8223 - precision: 0.7867 - recall: 0.6665 - tn: 2342.6924 - tp: 331.9011 - val_Brier score: 0.1098 - val_auc: 0.8366 - val_cross entropy: 0.3525 - val_fn: 183.0000 - val_fp: 30.0000 - val_loss: 0.3525 - val_prc: 0.5649 - val_precision: 0.6939 - val_recall: 0.2709 - val_tn: 1148.0000 - val_tp: 68.0000\nEpoch 6/10\n\u001b[1m90/90\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 33ms/step - Brier score: 0.0625 - auc: 0.9540 - cross entropy: 0.2023 - fn: 169.5604 - fp: 88.6813 - loss: 0.2023 - prc: 0.8454 - precision: 0.8121 - recall: 0.6802 - tn: 2325.9670 - tp: 358.1648 - val_Brier score: 0.0935 - val_auc: 0.8751 - val_cross entropy: 0.3042 - val_fn: 117.0000 - val_fp: 61.0000 - val_loss: 0.3042 - val_prc: 0.6930 - val_precision: 0.6872 - val_recall: 0.5339 - val_tn: 1117.0000 - val_tp: 134.0000\nEpoch 7/10\n\u001b[1m90/90\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 33ms/step - Brier score: 0.0548 - auc: 0.9638 - cross entropy: 0.1788 - fn: 145.8132 - fp: 79.8681 - loss: 0.1788 - prc: 0.8701 - precision: 0.8168 - recall: 0.7216 - tn: 2342.0000 - tp: 374.6923 - val_Brier score: 0.1147 - val_auc: 0.8623 - val_cross entropy: 0.5090 - val_fn: 184.0000 - val_fp: 3.0000 - val_loss: 0.5090 - val_prc: 0.6945 - val_precision: 0.9571 - val_recall: 0.2669 - val_tn: 1175.0000 - val_tp: 67.0000\nEpoch 8/10\n\u001b[1m90/90\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 33ms/step - Brier score: 0.0559 - auc: 0.9611 - cross entropy: 0.1808 - fn: 148.7802 - fp: 79.9121 - loss: 0.1808 - prc: 0.8653 - precision: 0.8252 - recall: 0.7040 - tn: 2345.1648 - tp: 368.5165 - val_Brier score: 0.0938 - val_auc: 0.9276 - val_cross entropy: 0.3479 - val_fn: 171.0000 - val_fp: 4.0000 - val_loss: 0.3479 - val_prc: 0.8220 - val_precision: 0.9524 - val_recall: 0.3187 - val_tn: 1174.0000 - val_tp: 80.0000\nEpoch 9/10\n\u001b[1m90/90\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 33ms/step - Brier score: 0.0463 - auc: 0.9725 - cross entropy: 0.1530 - fn: 128.2308 - fp: 66.2747 - loss: 0.1530 - prc: 0.8988 - precision: 0.8501 - recall: 0.7524 - tn: 2371.8132 - tp: 376.0549 - val_Brier score: 0.0918 - val_auc: 0.9217 - val_cross entropy: 0.2964 - val_fn: 75.0000 - val_fp: 116.0000 - val_loss: 0.2964 - val_prc: 0.6858 - val_precision: 0.6027 - val_recall: 0.7012 - val_tn: 1062.0000 - val_tp: 176.0000\nEpoch 10/10\n\u001b[1m90/90\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 33ms/step - Brier score: 0.0476 - auc: 0.9729 - cross entropy: 0.1555 - fn: 122.4945 - fp: 76.6484 - loss: 0.1555 - prc: 0.9054 - precision: 0.8354 - recall: 0.7730 - tn: 2344.0549 - tp: 399.1758 - val_Brier score: 0.1277 - val_auc: 0.9266 - val_cross entropy: 0.3898 - val_fn: 27.0000 - val_fp: 252.0000 - val_loss: 0.3898 - val_prc: 0.7905 - val_precision: 0.4706 - val_recall: 0.8924 - val_tn: 926.0000 - val_tp: 224.0000\n","output_type":"stream"}],"execution_count":11},{"cell_type":"code","source":"def eval_at_threshold(y_true, probs, thr=0):\n    preds = (probs >= thr).astype(int)\n    p = precision_score(y_true, preds, zero_division=0)\n    r = recall_score(y_true, preds, zero_division=0)\n    f1 = f1_score(y_true, preds, zero_division=0)\n    cm = confusion_matrix(y_true, preds)\n    return p, r, f1, cm\n\np, r, f1, cm = eval_at_threshold(oof_true, oof_preds, 0.5)\nprint(\"Precision:\", p, \"Recall:\", r, \"F1:\", f1, \"\\nConfusion Matrix:\\n\", cm)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-01T17:13:13.280310Z","iopub.execute_input":"2025-08-01T17:13:13.281036Z","iopub.status.idle":"2025-08-01T17:13:13.309494Z","shell.execute_reply.started":"2025-08-01T17:13:13.281001Z","shell.execute_reply":"2025-08-01T17:13:13.308683Z"}},"outputs":[{"name":"stdout","text":"Precision: 0.7878395860284605 Recall: 0.4852589641434263 F1: 0.6005917159763313 \nConfusion Matrix:\n [[5728  164]\n [ 646  609]]\n","output_type":"stream"}],"execution_count":21},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}