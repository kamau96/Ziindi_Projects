{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":11474913,"sourceType":"datasetVersion","datasetId":7191644}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Landslide Detection \nThe goal of this notebook is to build a model capable of classifying satellite imagery to identify the occurrence of landslides.","metadata":{}},{"cell_type":"code","source":"# Libraries used for the project\nimport numpy as np\nimport os\nimport pandas as pd\nfrom pathlib import Path\nimport tensorflow as tf\n\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.models import Sequential","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-24T10:58:32.127614Z","iopub.execute_input":"2025-07-24T10:58:32.128172Z","iopub.status.idle":"2025-07-24T10:58:50.116169Z","shell.execute_reply.started":"2025-07-24T10:58:32.128143Z","shell.execute_reply":"2025-07-24T10:58:50.115267Z"}},"outputs":[{"name":"stderr","text":"2025-07-24 10:58:34.528312: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nE0000 00:00:1753354714.791176      36 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\nE0000 00:00:1753354714.865959      36 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"}],"execution_count":1},{"cell_type":"markdown","source":"## Data Exploration","metadata":{}},{"cell_type":"code","source":"train_data_path = \"/kaggle/input/slideandseekclasificationlandslidedetectiondataset/train_data/train_data\"\ntrain_csv_path = \"/kaggle/input/slideandseekclasificationlandslidedetectiondataset/Train.csv\"\n\ntest_data_path = \"/kaggle/input/slideandseekclasificationlandslidedetectiondataset/test_data/test_data\"\ntest_csv_path = \"/kaggle/input/slideandseekclasificationlandslidedetectiondataset/Test.csv\"\n\ntrain_csv = pd.read_csv(train_csv_path)\ntest_csv= pd.read_csv(test_csv_path)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-24T10:58:50.117560Z","iopub.execute_input":"2025-07-24T10:58:50.118210Z","iopub.status.idle":"2025-07-24T10:58:50.149849Z","shell.execute_reply.started":"2025-07-24T10:58:50.118182Z","shell.execute_reply":"2025-07-24T10:58:50.149096Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"train_csv.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-24T10:58:50.150642Z","iopub.execute_input":"2025-07-24T10:58:50.150955Z","iopub.status.idle":"2025-07-24T10:58:50.174004Z","shell.execute_reply.started":"2025-07-24T10:58:50.150902Z","shell.execute_reply":"2025-07-24T10:58:50.173327Z"}},"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"          ID  label\n0  ID_HUD1ST      1\n1  ID_KGE2HY      1\n2  ID_VHV9BL      1\n3  ID_ZT0VEJ      0\n4  ID_5NFXVY      0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ID</th>\n      <th>label</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>ID_HUD1ST</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>ID_KGE2HY</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>ID_VHV9BL</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>ID_ZT0VEJ</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>ID_5NFXVY</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":3},{"cell_type":"code","source":"test_csv.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-24T10:58:50.175600Z","iopub.execute_input":"2025-07-24T10:58:50.175854Z","iopub.status.idle":"2025-07-24T10:58:50.183769Z","shell.execute_reply.started":"2025-07-24T10:58:50.175833Z","shell.execute_reply":"2025-07-24T10:58:50.183006Z"}},"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"          ID\n0  ID_ICB8K9\n1  ID_2D4AOJ\n2  ID_2TVPI0\n3  ID_E05WIK\n4  ID_KKFDJO","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ID</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>ID_ICB8K9</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>ID_2D4AOJ</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>ID_2TVPI0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>ID_E05WIK</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>ID_KKFDJO</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":4},{"cell_type":"code","source":"train_csv[\"ID\"]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-24T10:58:50.184529Z","iopub.execute_input":"2025-07-24T10:58:50.184817Z","iopub.status.idle":"2025-07-24T10:58:50.206470Z","shell.execute_reply.started":"2025-07-24T10:58:50.184791Z","shell.execute_reply":"2025-07-24T10:58:50.205594Z"}},"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"0       ID_HUD1ST\n1       ID_KGE2HY\n2       ID_VHV9BL\n3       ID_ZT0VEJ\n4       ID_5NFXVY\n          ...    \n7142    ID_7RINJF\n7143    ID_UAYBOC\n7144    ID_M0YJD0\n7145    ID_PI0GHW\n7146    ID_VNBDTG\nName: ID, Length: 7147, dtype: object"},"metadata":{}}],"execution_count":5},{"cell_type":"code","source":"def build_tf_dataset(npy_dir_path, label_df=None, batch_size=32, shuffle=True):\n    npy_dir = Path(npy_dir_path)\n\n    # Step 1: List all .npy files\n    file_paths = list(npy_dir.glob(\"*.npy\"))\n\n    # Step 2: If labels are available, map IDs to labels\n    if label_df is not None:\n        label_df[\"ID\"] = label_df[\"ID\"].astype(str)\n        label_map = dict(zip(label_df[\"ID\"], label_df[\"label\"]))\n\n        # Build (file_path, label) pairs\n        data = []\n        for file in file_paths:\n            file_id = file.stem  # e.g. '1234' from '1234.npy'\n            if file_id in label_map:\n                label = label_map[file_id]\n                data.append((str(file), label))\n\n        file_paths, labels = zip(*data)\n    else:\n        # Just raw file paths for unlabeled data (e.g. test set)\n        file_paths = [str(f) for f in file_paths]\n        labels = None\n\n    # Step 3: Define how to load one sample\n    def load_npy(file_path, label=None):\n        def _load(path):\n            arr = np.load(path.numpy().decode(\"utf-8\"))\n            return arr.astype(np.float32)\n\n        image = tf.py_function(_load, [file_path], tf.float32)\n        image.set_shape([64, 64, 10]) \n\n        if label is not None:\n            return image, label\n        else:\n            return image\n\n    # Step 4: Build tf.data.Dataset\n    if labels is not None:\n        ds = tf.data.Dataset.from_tensor_slices((list(file_paths), list(labels)))\n        ds = ds.map(load_npy, num_parallel_calls=tf.data.AUTOTUNE)\n    else:\n        ds = tf.data.Dataset.from_tensor_slices(list(file_paths))\n        ds = ds.map(lambda x: load_npy(x, None), num_parallel_calls=tf.data.AUTOTUNE)\n\n    if shuffle and labels is not None:\n        ds = ds.shuffle(buffer_size=len(file_paths))\n\n    ds = ds.batch(batch_size).prefetch(tf.data.AUTOTUNE)\n\n    return ds","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-24T11:04:52.879710Z","iopub.execute_input":"2025-07-24T11:04:52.880537Z","iopub.status.idle":"2025-07-24T11:04:52.894802Z","shell.execute_reply.started":"2025-07-24T11:04:52.880507Z","shell.execute_reply":"2025-07-24T11:04:52.893779Z"}},"outputs":[],"execution_count":20},{"cell_type":"code","source":"train_dataset = build_tf_dataset(train_data_path, train_csv)\ntest_dataset = build_tf_dataset(test_data_path)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-24T11:04:53.274173Z","iopub.execute_input":"2025-07-24T11:04:53.274485Z","iopub.status.idle":"2025-07-24T11:04:53.465215Z","shell.execute_reply.started":"2025-07-24T11:04:53.274457Z","shell.execute_reply":"2025-07-24T11:04:53.464315Z"}},"outputs":[],"execution_count":21},{"cell_type":"code","source":"for image, label in train_dataset.take(1):\n    print(image.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-24T11:03:25.766162Z","iopub.execute_input":"2025-07-24T11:03:25.766482Z","iopub.status.idle":"2025-07-24T11:03:33.258252Z","shell.execute_reply.started":"2025-07-24T11:03:25.766429Z","shell.execute_reply":"2025-07-24T11:03:33.257156Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mInvalidArgumentError\u001b[0m                      Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_36/1468335001.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mimage\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtrain_dataset\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtake\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/tensorflow/python/data/ops/iterator_ops.py\u001b[0m in \u001b[0;36m__next__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    824\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m__next__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    825\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 826\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_next_internal\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    827\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mOutOfRangeError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    828\u001b[0m       \u001b[0;32mraise\u001b[0m \u001b[0mStopIteration\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/tensorflow/python/data/ops/iterator_ops.py\u001b[0m in \u001b[0;36m_next_internal\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    774\u001b[0m     \u001b[0;31m# to communicate that there is no more data to iterate over.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    775\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexecution_mode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSYNC\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 776\u001b[0;31m       ret = gen_dataset_ops.iterator_get_next(\n\u001b[0m\u001b[1;32m    777\u001b[0m           \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_iterator_resource\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    778\u001b[0m           \u001b[0moutput_types\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_flat_output_types\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/tensorflow/python/ops/gen_dataset_ops.py\u001b[0m in \u001b[0;36miterator_get_next\u001b[0;34m(iterator, output_types, output_shapes, name)\u001b[0m\n\u001b[1;32m   3084\u001b[0m       \u001b[0;32mreturn\u001b[0m \u001b[0m_result\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3085\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0m_core\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3086\u001b[0;31m       \u001b[0m_ops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mraise_from_not_ok_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3087\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0m_core\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_FallbackException\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3088\u001b[0m       \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/tensorflow/python/framework/ops.py\u001b[0m in \u001b[0;36mraise_from_not_ok_status\u001b[0;34m(e, name)\u001b[0m\n\u001b[1;32m   6000\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mraise_from_not_ok_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mNoReturn\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6001\u001b[0m   \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmessage\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m\" name: \"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;34m\"\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6002\u001b[0;31m   \u001b[0;32mraise\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_status_to_exception\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m  \u001b[0;31m# pylint: disable=protected-access\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6003\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6004\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mInvalidArgumentError\u001b[0m: {{function_node __wrapped__IteratorGetNext_output_types_2_device_/job:localhost/replica:0/task:0/device:CPU:0}} Incompatible shapes at component 0: expected [?,1,64,64,10] but got [32,64,64,12]. [Op:IteratorGetNext] name: "],"ename":"InvalidArgumentError","evalue":"{{function_node __wrapped__IteratorGetNext_output_types_2_device_/job:localhost/replica:0/task:0/device:CPU:0}} Incompatible shapes at component 0: expected [?,1,64,64,10] but got [32,64,64,12]. [Op:IteratorGetNext] name: ","output_type":"error"}],"execution_count":15},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}