{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":11474913,"sourceType":"datasetVersion","datasetId":7191644}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Landslide Detection \nThe goal of this notebook is to build a model capable of classifying satellite imagery to identify the occurrence of landslides.","metadata":{}},{"cell_type":"code","source":"# Libraries used for the project\nimport pandas as pd\nimport numpy as np\nimport os","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-22T14:55:29.298553Z","iopub.execute_input":"2025-07-22T14:55:29.299211Z","iopub.status.idle":"2025-07-22T14:55:29.303816Z","shell.execute_reply.started":"2025-07-22T14:55:29.299170Z","shell.execute_reply":"2025-07-22T14:55:29.302822Z"}},"outputs":[],"execution_count":5},{"cell_type":"markdown","source":"## Data Exploration","metadata":{}},{"cell_type":"code","source":"train_data_path = \"/kaggle/input/slideandseekclasificationlandslidedetectiondataset/train_data/train_data\"\ntrain_csv_path = \"/kaggle/input/slideandseekclasificationlandslidedetectiondataset/Train.csv\"\n\ntest_data_path = \"/kaggle/input/slideandseekclasificationlandslidedetectiondataset/test_data/test_data\"\ntest_csv_path = \"/kaggle/input/slideandseekclasificationlandslidedetectiondataset/Test.csv\"\n\ntrain_csv = pd.read_csv(train_csv_path)\ntest_csv= pd.read_csv(test_csv_path)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-22T14:44:59.349666Z","iopub.execute_input":"2025-07-22T14:44:59.350216Z","iopub.status.idle":"2025-07-22T14:44:59.428853Z","shell.execute_reply.started":"2025-07-22T14:44:59.350182Z","shell.execute_reply":"2025-07-22T14:44:59.427862Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"train_csv.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-22T14:45:11.311114Z","iopub.execute_input":"2025-07-22T14:45:11.311451Z","iopub.status.idle":"2025-07-22T14:45:11.358457Z","shell.execute_reply.started":"2025-07-22T14:45:11.311405Z","shell.execute_reply":"2025-07-22T14:45:11.357364Z"}},"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"          ID  label\n0  ID_HUD1ST      1\n1  ID_KGE2HY      1\n2  ID_VHV9BL      1\n3  ID_ZT0VEJ      0\n4  ID_5NFXVY      0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ID</th>\n      <th>label</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>ID_HUD1ST</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>ID_KGE2HY</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>ID_VHV9BL</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>ID_ZT0VEJ</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>ID_5NFXVY</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":3},{"cell_type":"code","source":"test_csv.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-22T14:45:21.166527Z","iopub.execute_input":"2025-07-22T14:45:21.166834Z","iopub.status.idle":"2025-07-22T14:45:21.175601Z","shell.execute_reply.started":"2025-07-22T14:45:21.166810Z","shell.execute_reply":"2025-07-22T14:45:21.174624Z"}},"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"          ID\n0  ID_ICB8K9\n1  ID_2D4AOJ\n2  ID_2TVPI0\n3  ID_E05WIK\n4  ID_KKFDJO","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ID</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>ID_ICB8K9</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>ID_2D4AOJ</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>ID_2TVPI0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>ID_E05WIK</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>ID_KKFDJO</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":4},{"cell_type":"code","source":"train_csv[\"ID\"]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-22T15:44:49.337598Z","iopub.execute_input":"2025-07-22T15:44:49.337893Z","iopub.status.idle":"2025-07-22T15:44:49.348041Z","shell.execute_reply.started":"2025-07-22T15:44:49.337871Z","shell.execute_reply":"2025-07-22T15:44:49.347118Z"}},"outputs":[{"execution_count":34,"output_type":"execute_result","data":{"text/plain":"0       ID_HUD1ST\n1       ID_KGE2HY\n2       ID_VHV9BL\n3       ID_ZT0VEJ\n4       ID_5NFXVY\n          ...    \n7142    ID_7RINJF\n7143    ID_UAYBOC\n7144    ID_M0YJD0\n7145    ID_PI0GHW\n7146    ID_VNBDTG\nName: ID, Length: 7147, dtype: object"},"metadata":{}}],"execution_count":34},{"cell_type":"code","source":"def load_images(path, df=None):\n    images = []\n    labels = []\n\n    # Pre-load label lookup if df is provided\n    label_map = None\n    if df is not None:\n        label_map = dict(zip(df[\"ID\"].astype(str), df[\"label\"]))\n\n    for file in os.listdir(path):\n        if not file.endswith(\".npy\"):\n            continue  # skip non-npy files\n\n        file_path = os.path.join(path, file)\n        image = np.load(file_path)\n\n        if label_map is not None:\n            file_id = os.path.splitext(file)[0]\n            label = label_map.get(file_id, None)\n\n            if label is None:\n                print(f\"Warning: Label not found for file {file_id}\")\n                continue\n            images.append(image)\n            labels.append(label)\n        else:\n            images.append(image)\n\n    return images, labels","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-22T15:57:35.062195Z","iopub.execute_input":"2025-07-22T15:57:35.062572Z","iopub.status.idle":"2025-07-22T15:57:35.070464Z","shell.execute_reply.started":"2025-07-22T15:57:35.062546Z","shell.execute_reply":"2025-07-22T15:57:35.069480Z"}},"outputs":[],"execution_count":39},{"cell_type":"code","source":"X_train, y = load_images(train_data_path, train_csv)\nX_test, _ = load_images(test_data_path)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-22T15:57:58.384858Z","iopub.execute_input":"2025-07-22T15:57:58.385194Z","iopub.status.idle":"2025-07-22T15:58:14.865470Z","shell.execute_reply.started":"2025-07-22T15:57:58.385171Z","shell.execute_reply":"2025-07-22T15:58:14.864456Z"}},"outputs":[],"execution_count":40},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}