{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":5441,"databundleVersionId":38425,"sourceType":"competition"}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Cats vs Dogs Image Classification\n\n## Project Overview\n\nThis project tackles the classic **Cats vs Dogs** image classification challenge — training a deep learning model to distinguish between two of the internet’s favorite animals. Using a large dataset of labeled images, the model learns to pick up on subtle visual cues like fur texture, facial structure, and posture, enabling it to classify new, unseen images with high confidence.\n\n---\n\n## Objectives\n\n* Perform **exploratory data analysis (EDA)** to understand image characteristics.\n* Apply **preprocessing and data augmentation** to enhance model performance.\n* Build and train a **Convolutional Neural Network (CNN)** for binary classification.\n* Validate the model’s performance on **unseen test data** for real-world applicability.\n\n---\n\n## Outcomes\n\n* A trained, ready-to-use CNN model capable of accurately predicting whether an image contains a **cat** or a **dog**.\n* Insights into **image-based machine learning workflows**, from dataset preparation to deployment.\n* A documented, reproducible pipeline that can be adapted to other classification problems.\n","metadata":{}},{"cell_type":"code","source":"import warnings\n\nwarnings.filterwarnings('ignore')","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import os, random, zipfile\nimport numpy as np\nimport pandas as pd\nfrom pathlib import Path\nfrom scipy import ndimage\nfrom skimage import io\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflow as tf","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def set_reproducibility(seed=44):\n    os.environ[\"PYTHONHASHSEED\"] = str(seed)\n    os.environ[\"TF_DETERMINISTIC_OPS\"] = \"1\"\n    os.environ[\"TF_CUDNN_DETERMINISTIC\"] = \"1\"\n    random.seed(seed)\n    np.random.seed(seed)\n    tf.random.set_seed(seed)\n    print(f\"[INFO] Seed set: {seed}\")\n\nset_reproducibility()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"zip_path = \"/kaggle/input/dogs-vs-cats-redux-kernels-edition/\"\n\ndef extract_files(path, data_type):\n    with zipfile.ZipFile(path+data_type, 'r') as zip_ref:\n        zip_ref.extractall(\".\") \nextract_files(zip_path, \"train.zip\")\nextract_files(zip_path, \"test.zip\")","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_path = \"/kaggle/working/train\"\ntest_path = \"/kaggle/working/test\"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def load_images_labels(images, path, labels=None):\n    for file in Path(path).glob(\"*.jpg\"):\n        image = io.imread(file)\n        images.append(image)\n\n        if labels is not None:\n            label = file.stem.split(\".\")[0]\n            labels.append(label)\n            \n    return images, labels","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_images, labels = load_images_labels(list(), train_path, list())\ntest_images, _ = load_images_labels(list(), test_path)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Exploratory Data Analysis","metadata":{}},{"cell_type":"code","source":"random_index = np.random.randint(0, len(train_images), size=10)\nfig, ax = plt.subplots(2, 5, figsize=(12, 8))\nax = ax.flatten()\nfor i, index in enumerate(random_index):\n    ax[i].imshow(train_images[index])\n    ax[i].axis(\"off\")\nfig.suptitle(\"Cats-vs-Dogs\", size=25)\nfig.tight_layout()\nplt.show()\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df_labels = pd.DataFrame({\"Animal\": labels})\nsns.catplot(data=df_labels, x= 'Animal', kind='count')\nplt.title(\"Distribution of Cats and Dogs.\")\nplt.ylabel(\"Frequency\")\nplt.show()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# fig, ax = plt.subplots(nrows=2, ncols=5,figsize=(12, 8), sharey=True)\n# ax = ax.flatten()\n# for i, index in enumerate(random_index):\n#     hist_vals = ndimage.histogram(train_images[index], min=0, max=255, bins=256)\n#     sns.histplot(hist_vals, bins=256, ax=ax[i])\n#     ax[i].set_title(labels[index])\n#     ax[i].set_ylabel(\"Frequency\")\n# plt.show()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}