{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":112899,"databundleVersionId":13449579,"sourceType":"competition"}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd, numpy as np, matplotlib.pyplot as plt, os, glob, cv2, tensorflow as tf\nfrom sklearn.model_selection import train_test_split\nfrom tqdm import tqdm\nfrom tensorflow.keras.models import Sequential, Model\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Dropout, Input, GlobalAveragePooling2D\nfrom tensorflow.keras.applications.densenet import DenseNet121, preprocess_input\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.metrics import AUC","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-10-10T17:55:46.862620Z","iopub.execute_input":"2025-10-10T17:55:46.862872Z","iopub.status.idle":"2025-10-10T17:55:50.656740Z","shell.execute_reply.started":"2025-10-10T17:55:46.862853Z","shell.execute_reply":"2025-10-10T17:55:50.656170Z"}},"outputs":[{"name":"stderr","text":"2025-10-10 17:55:47.496629: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nE0000 00:00:1760118947.519362     222 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\nE0000 00:00:1760118947.526191     222 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"pd.set_option('display.max_columns', 500)\nRANDOM_STATE = 44\nIMG_SHAPE = [224, 224]\nBATCH_SIZE = 32\nNUM_CLASSES = 14\nAUTOTUNE = tf.data.AUTOTUNE\nTRAIN_IMG_DIR = \"/kaggle/input/grand-xray-slam-division-a/train1/\"\nTEST_IMG_DIR = \"/kaggle/input/grand-xray-slam-division-a/test1/\"\nTRAIN_CSV_PATH = \"/kaggle/input/grand-xray-slam-division-a/train1.csv\"","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-10T17:55:50.658534Z","iopub.execute_input":"2025-10-10T17:55:50.658957Z","iopub.status.idle":"2025-10-10T17:55:50.664014Z","shell.execute_reply.started":"2025-10-10T17:55:50.658937Z","shell.execute_reply":"2025-10-10T17:55:50.663317Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"train_csv = pd.read_csv(TRAIN_CSV_PATH)\ntrain_csv[\"Image_name\"] = TRAIN_IMG_DIR+train_csv[\"Image_name\"]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-10T17:55:50.664787Z","iopub.execute_input":"2025-10-10T17:55:50.665050Z","iopub.status.idle":"2025-10-10T17:55:50.898853Z","shell.execute_reply.started":"2025-10-10T17:55:50.665024Z","shell.execute_reply":"2025-10-10T17:55:50.898216Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"def load_and_preprocess(path, label=None, size=IMG_SHAPE):\n    img = tf.io.read_file(path)\n    img = tf.image.decode_jpeg(img, channels=3)\n    img = tf.image.resize(img, size)\n    if label is None:\n        return img\n    return img, label\n        ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-10T17:55:50.899590Z","iopub.execute_input":"2025-10-10T17:55:50.899842Z","iopub.status.idle":"2025-10-10T17:55:50.904096Z","shell.execute_reply.started":"2025-10-10T17:55:50.899821Z","shell.execute_reply":"2025-10-10T17:55:50.903546Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"target_columns = ['Atelectasis', 'Cardiomegaly', 'Consolidation', 'Edema',\n                 'Enlarged Cardiomediastinum', 'Fracture', 'Lung Lesion', 'Lung Opacity',\n                 'No Finding', 'Pleural Effusion', 'Pleural Other', 'Pneumonia',\n                 'Pneumothorax', 'Support Devices']\nX_train, X_valid, y_train, y_valid = train_test_split(train_csv[\"Image_name\"], train_csv[target_columns], random_state=RANDOM_STATE)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-10T17:55:50.904802Z","iopub.execute_input":"2025-10-10T17:55:50.905038Z","iopub.status.idle":"2025-10-10T17:55:50.940916Z","shell.execute_reply.started":"2025-10-10T17:55:50.905014Z","shell.execute_reply":"2025-10-10T17:55:50.940173Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"train_ds = tf.data.Dataset.from_tensor_slices((X_train, y_train))\ntrain_ds = train_ds.map(load_and_preprocess, num_parallel_calls=AUTOTUNE)\ntrain_ds = (train_ds\n            .shuffle(buffer_size=1000)\n            .batch(BATCH_SIZE)\n            .prefetch(AUTOTUNE))\n\nval_ds = tf.data.Dataset.from_tensor_slices((X_valid, y_valid))\nval_ds = val_ds.map(load_and_preprocess, num_parallel_calls=AUTOTUNE)\nval_ds = (val_ds\n          .batch(BATCH_SIZE)\n          .prefetch(AUTOTUNE))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-10T17:55:50.941639Z","iopub.execute_input":"2025-10-10T17:55:50.941938Z","iopub.status.idle":"2025-10-10T17:55:51.443511Z","shell.execute_reply.started":"2025-10-10T17:55:50.941917Z","shell.execute_reply":"2025-10-10T17:55:51.442931Z"}},"outputs":[{"name":"stderr","text":"I0000 00:00:1760118951.287619     222 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 13942 MB memory:  -> device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\nI0000 00:00:1760118951.288256     222 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:1 with 13942 MB memory:  -> device: 1, name: Tesla T4, pci bus id: 0000:00:05.0, compute capability: 7.5\n","output_type":"stream"}],"execution_count":6},{"cell_type":"code","source":"data_augmentation = tf.keras.Sequential([\n  tf.keras.layers.RandomFlip('horizontal'),\n  tf.keras.layers.RandomRotation(0.2),\n])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-10T17:55:51.444272Z","iopub.execute_input":"2025-10-10T17:55:51.444948Z","iopub.status.idle":"2025-10-10T17:55:51.458391Z","shell.execute_reply.started":"2025-10-10T17:55:51.444920Z","shell.execute_reply":"2025-10-10T17:55:51.457819Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"prediction_layer = Dense(NUM_CLASSES, activation='sigmoid')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-10T17:55:51.460366Z","iopub.execute_input":"2025-10-10T17:55:51.460560Z","iopub.status.idle":"2025-10-10T17:55:51.469793Z","shell.execute_reply.started":"2025-10-10T17:55:51.460543Z","shell.execute_reply":"2025-10-10T17:55:51.469018Z"}},"outputs":[],"execution_count":8},{"cell_type":"code","source":"# Base DenseNet model\nbase_model = DenseNet121(\n    weights='imagenet',\n    include_top=False,\n    input_shape=(*IMG_SHAPE, 3)\n)\n\n# Freeze base layers initially\nbase_model.trainable = False\n\ninputs = Input(shape=(*IMG_SHAPE, 3))\nx = data_augmentation(inputs)\nx = preprocess_input(x)\nx = base_model(x, training=False)\nx = GlobalAveragePooling2D()(x)\nx = Dropout(0.2)(x)\noutputs = prediction_layer(x)\nmodel = Model(inputs, outputs)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-10T17:55:51.470503Z","iopub.execute_input":"2025-10-10T17:55:51.470708Z","iopub.status.idle":"2025-10-10T17:55:54.341491Z","shell.execute_reply.started":"2025-10-10T17:55:51.470693Z","shell.execute_reply":"2025-10-10T17:55:54.340933Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"model.compile(\n    optimizer=Adam(learning_rate=1e-4),\n    loss='binary_crossentropy',\n    metrics=[\n        AUC(name='auc', multi_label=True, num_labels=NUM_CLASSES)\n    ]\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-10T17:55:54.342208Z","iopub.execute_input":"2025-10-10T17:55:54.342396Z","iopub.status.idle":"2025-10-10T17:55:54.362888Z","shell.execute_reply.started":"2025-10-10T17:55:54.342382Z","shell.execute_reply":"2025-10-10T17:55:54.362380Z"}},"outputs":[],"execution_count":10},{"cell_type":"code","source":"history = model.fit(\n    train_ds,\n    validation_data=val_ds,\n    epochs=10,\n    verbose=1\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-10T17:55:54.363561Z","iopub.execute_input":"2025-10-10T17:55:54.363817Z"}},"outputs":[{"name":"stdout","text":"Epoch 1/10\n","output_type":"stream"},{"name":"stderr","text":"I0000 00:00:1760118991.143796     270 cuda_dnn.cc:529] Loaded cuDNN version 90300\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m2517/2517\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1659s\u001b[0m 643ms/step - auc: 0.6372 - loss: 0.5243 - val_auc: 0.7952 - val_loss: 0.3973\nEpoch 2/10\n\u001b[1m2517/2517\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1603s\u001b[0m 630ms/step - auc: 0.7823 - loss: 0.4039 - val_auc: 0.8141 - val_loss: 0.3839\nEpoch 3/10\n\u001b[1m2517/2517\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1686s\u001b[0m 663ms/step - auc: 0.8003 - loss: 0.3907 - val_auc: 0.8217 - val_loss: 0.3777\nEpoch 4/10\n\u001b[1m2517/2517\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1615s\u001b[0m 635ms/step - auc: 0.8077 - loss: 0.3843 - val_auc: 0.8261 - val_loss: 0.3743\nEpoch 5/10\n\u001b[1m2517/2517\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1625s\u001b[0m 640ms/step - auc: 0.8131 - loss: 0.3806 - val_auc: 0.8290 - val_loss: 0.3736\nEpoch 6/10\n\u001b[1m2064/2517\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━\u001b[0m \u001b[1m3:45\u001b[0m 498ms/step - auc: 0.8166 - loss: 0.3777","output_type":"stream"}],"execution_count":null},{"cell_type":"code","source":"base_model.trainable = True\n\n# Optionally unfreeze only top layers\nfor layer in base_model.layers[:-50]:\n    layer.trainable = False\n \nmodel.compile(\n    optimizer=Adam(learning_rate=1e-5),  \n    loss='binary_crossentropy',\n    metrics=[\n        AUC(name='auc', multi_label=True, num_labels=NUM_CLASSES)\n    ]\n)\n\nhistory_finetune = model.fit(\n    train_ds,\n    validation_data=val_ds,\n    epochs=10,\n    verbose=1\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T18:48:33.712441Z","iopub.execute_input":"2025-10-08T18:48:33.712709Z"}},"outputs":[{"name":"stdout","text":"Epoch 1/10\n\u001b[1m2517/2517\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1627s\u001b[0m 624ms/step - auc: 0.8004 - loss: 0.4436 - val_auc: 0.8443 - val_loss: 0.3557\nEpoch 2/10\n\u001b[1m2517/2517\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1555s\u001b[0m 612ms/step - auc: 0.8160 - loss: 0.3940 - val_auc: 0.8510 - val_loss: 0.3473\nEpoch 3/10\n\u001b[1m2517/2517\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1559s\u001b[0m 614ms/step - auc: 0.8238 - loss: 0.3830 - val_auc: 0.8554 - val_loss: 0.3420\nEpoch 4/10\n\u001b[1m2517/2517\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1555s\u001b[0m 612ms/step - auc: 0.8302 - loss: 0.3760 - val_auc: 0.8588 - val_loss: 0.3380\nEpoch 5/10\n\u001b[1m2517/2517\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1556s\u001b[0m 612ms/step - auc: 0.8342 - loss: 0.3710 - val_auc: 0.8616 - val_loss: 0.3350\nEpoch 6/10\n\u001b[1m2517/2517\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1636s\u001b[0m 644ms/step - auc: 0.8416 - loss: 0.3622 - val_auc: 0.8638 - val_loss: 0.3325\nEpoch 7/10\n\u001b[1m2517/2517\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1562s\u001b[0m 614ms/step - auc: 0.8452 - loss: 0.3578 - val_auc: 0.8658 - val_loss: 0.3307\nEpoch 8/10\n\u001b[1m2517/2517\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1568s\u001b[0m 617ms/step - auc: 0.8484 - loss: 0.3538 - val_auc: 0.8675 - val_loss: 0.3285\nEpoch 9/10\n\u001b[1m2517/2517\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1580s\u001b[0m 622ms/step - auc: 0.8519 - loss: 0.3492 - val_auc: 0.8691 - val_loss: 0.3270\nEpoch 10/10\n\u001b[1m1889/2517\u001b[0m \u001b[32m━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━━\u001b[0m \u001b[1m5:00\u001b[0m 478ms/step - auc: 0.8543 - loss: 0.3467","output_type":"stream"}],"execution_count":null},{"cell_type":"code","source":"test_image_paths = sorted(glob.glob(os.path.join(TEST_IMG_DIR , \"*.jpg\")))","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def load_and_preprocess_test(path, size=IMG_SIZE):\n    img = tf.io.read_file(path)\n    img = tf.image.decode_jpeg(img, channels=3)\n    img = tf.image.resize(img, size)\n    img = tf.cast(img, tf.float32) / 255.0\n    return img","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"test_ds = tf.data.Dataset.from_tensor_slices(test_image_paths)\ntest_ds = test_ds.map(load_and_preprocess_test, num_parallel_calls=AUTOTUNE)\ntest_ds = ( test_ds\n           .batch(BATCH_SIZE)\n           .prefetch(AUTOTUNE) )\npredictions = model.predict(test_ds)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"filenames = [os.path.basename(p) for p in test_image_paths]\nfilenames_np = np.array(filenames).reshape(-1, 1)\n\nres = np.concatenate([filenames_np, predictions], axis=1)\ndf = pd.DataFrame(res, columns=[\"Image_name\"]+target_columns)\ndf.to_csv(\"medical_submission.csv\", index=False)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}