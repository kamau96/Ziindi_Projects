{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":12806871,"sourceType":"datasetVersion","datasetId":8097839}],"dockerImageVersionId":31090,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"%load_ext cudf.pandas","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-26T19:52:57.436130Z","iopub.execute_input":"2025-09-26T19:52:57.436724Z","iopub.status.idle":"2025-09-26T19:53:04.763464Z","shell.execute_reply.started":"2025-09-26T19:52:57.436697Z","shell.execute_reply":"2025-09-26T19:53:04.762798Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"import numpy as np, pandas as pd, itertools\npd.set_option('display.max_columns', 500)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-26T19:53:04.764713Z","iopub.execute_input":"2025-09-26T19:53:04.765226Z","iopub.status.idle":"2025-09-26T19:53:04.870752Z","shell.execute_reply.started":"2025-09-26T19:53:04.765206Z","shell.execute_reply":"2025-09-26T19:53:04.869906Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"train_path = \"/kaggle/input/indigenous-knowledge/train (1).csv\"\ntest_path = \"/kaggle/input/indigenous-knowledge/test.csv\"","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-26T19:53:04.871830Z","iopub.execute_input":"2025-09-26T19:53:04.872241Z","iopub.status.idle":"2025-09-26T19:53:04.875967Z","shell.execute_reply.started":"2025-09-26T19:53:04.872204Z","shell.execute_reply":"2025-09-26T19:53:04.875233Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"train = pd.read_csv(train_path)\ntrain[\"prediction_time\"] = pd.to_datetime( train[\"prediction_time\"] )\ntrain[\"month\"] = train[\"prediction_time\"].dt.month.astype(\"float32\")\ntrain[\"day\"] = train[\"prediction_time\"].dt.day.astype(\"float32\")\ntrain[\"hour\"] = train[\"prediction_time\"].dt.day.astype(\"float32\")\ntrain[\"dow\"] = train[\"prediction_time\"].dt.dayofweek.astype(\"float32\")\nprint( train.shape )\ntrain.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-26T19:53:04.877489Z","iopub.execute_input":"2025-09-26T19:53:04.877785Z","iopub.status.idle":"2025-09-26T19:53:05.429450Z","shell.execute_reply.started":"2025-09-26T19:53:04.877763Z","shell.execute_reply":"2025-09-26T19:53:05.428801Z"}},"outputs":[{"name":"stdout","text":"(10928, 16)\n","output_type":"stream"},{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"            ID  user_id  confidence  predicted_intensity community  \\\n0  ID_KwcTp_12       11         0.3                  0.0    Tumfa    \n1  ID_K9vWT_12       17         0.3                  0.0  Kwabeng    \n2  ID_AIQg3_12       19         0.3                  0.0  Akropong   \n3  ID_px4yf_12       23         0.3                  0.0   Asamama   \n4  ID_QYYmK_12       23         0.3                  0.0   Asamama   \n\n     district     prediction_time indicator indicator_description  \\\n0  atiwa_west 2025-05-30 11:09:33      <NA>                  <NA>   \n1  atiwa_west 2025-05-30 11:09:35      <NA>                  <NA>   \n2  atiwa_west 2025-05-30 11:09:47      <NA>                  <NA>   \n3  atiwa_west 2025-05-30 11:16:33      <NA>                  <NA>   \n4  atiwa_west 2025-05-30 11:16:55      <NA>                  <NA>   \n\n  time_observed      Target  forecast_length  month   day  hour  dow  \n0          <NA>  MEDIUMRAIN               12    5.0  30.0  30.0  4.0  \n1          <NA>   HEAVYRAIN               12    5.0  30.0  30.0  4.0  \n2          <NA>  MEDIUMRAIN               12    5.0  30.0  30.0  4.0  \n3          <NA>   HEAVYRAIN               12    5.0  30.0  30.0  4.0  \n4          <NA>   HEAVYRAIN               12    5.0  30.0  30.0  4.0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ID</th>\n      <th>user_id</th>\n      <th>confidence</th>\n      <th>predicted_intensity</th>\n      <th>community</th>\n      <th>district</th>\n      <th>prediction_time</th>\n      <th>indicator</th>\n      <th>indicator_description</th>\n      <th>time_observed</th>\n      <th>Target</th>\n      <th>forecast_length</th>\n      <th>month</th>\n      <th>day</th>\n      <th>hour</th>\n      <th>dow</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>ID_KwcTp_12</td>\n      <td>11</td>\n      <td>0.3</td>\n      <td>0.0</td>\n      <td>Tumfa</td>\n      <td>atiwa_west</td>\n      <td>2025-05-30 11:09:33</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n      <td>MEDIUMRAIN</td>\n      <td>12</td>\n      <td>5.0</td>\n      <td>30.0</td>\n      <td>30.0</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>ID_K9vWT_12</td>\n      <td>17</td>\n      <td>0.3</td>\n      <td>0.0</td>\n      <td>Kwabeng</td>\n      <td>atiwa_west</td>\n      <td>2025-05-30 11:09:35</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n      <td>HEAVYRAIN</td>\n      <td>12</td>\n      <td>5.0</td>\n      <td>30.0</td>\n      <td>30.0</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>ID_AIQg3_12</td>\n      <td>19</td>\n      <td>0.3</td>\n      <td>0.0</td>\n      <td>Akropong</td>\n      <td>atiwa_west</td>\n      <td>2025-05-30 11:09:47</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n      <td>MEDIUMRAIN</td>\n      <td>12</td>\n      <td>5.0</td>\n      <td>30.0</td>\n      <td>30.0</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>ID_px4yf_12</td>\n      <td>23</td>\n      <td>0.3</td>\n      <td>0.0</td>\n      <td>Asamama</td>\n      <td>atiwa_west</td>\n      <td>2025-05-30 11:16:33</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n      <td>HEAVYRAIN</td>\n      <td>12</td>\n      <td>5.0</td>\n      <td>30.0</td>\n      <td>30.0</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>ID_QYYmK_12</td>\n      <td>23</td>\n      <td>0.3</td>\n      <td>0.0</td>\n      <td>Asamama</td>\n      <td>atiwa_west</td>\n      <td>2025-05-30 11:16:55</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n      <td>HEAVYRAIN</td>\n      <td>12</td>\n      <td>5.0</td>\n      <td>30.0</td>\n      <td>30.0</td>\n      <td>4.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":4},{"cell_type":"code","source":"test = pd.read_csv(test_path)\ntest[\"prediction_time\"] = pd.to_datetime( test[\"prediction_time\"] )\ntest[\"month\"] = test[\"prediction_time\"].dt.month.astype(\"float32\")\ntest[\"day\"] = test[\"prediction_time\"].dt.day.astype(\"float32\")\ntest[\"hour\"] = test[\"prediction_time\"].dt.day.astype(\"float32\")\ntest[\"dow\"] = test[\"prediction_time\"].dt.dayofweek.astype(\"float32\")\nprint( test.shape )\ntest.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-26T19:53:05.430315Z","iopub.execute_input":"2025-09-26T19:53:05.430594Z","iopub.status.idle":"2025-09-26T19:53:05.502177Z","shell.execute_reply.started":"2025-09-26T19:53:05.430561Z","shell.execute_reply":"2025-09-26T19:53:05.501571Z"}},"outputs":[{"name":"stdout","text":"(2732, 15)\n","output_type":"stream"},{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"            ID  user_id  confidence  predicted_intensity         community  \\\n0  ID_SbTdy_24       77         0.3                  0.0  ASSIN BROFOYEDUR   \n1  ID_SBKYz_24       77         0.3                  0.0  ASSIN BROFOYEDUR   \n2  ID_fAimg_24       77         0.3                  0.0  ASSIN BROFOYEDUR   \n3  ID_2wBqC_24       77         0.3                  0.0  ASSIN BROFOYEDUR   \n4  ID_NItox_24       77         0.3                  0.0  ASSIN BROFOYEDUR   \n\n     district     prediction_time indicator indicator_description  \\\n0  assin_fosu 2025-07-20 19:27:28      <NA>                  <NA>   \n1  assin_fosu 2025-07-20 19:27:29      <NA>                  <NA>   \n2  assin_fosu 2025-07-20 19:27:30      <NA>                  <NA>   \n3  assin_fosu 2025-07-20 19:27:31      <NA>                  <NA>   \n4  assin_fosu 2025-07-20 19:27:32      <NA>                  <NA>   \n\n  time_observed  forecast_length  month   day  hour  dow  \n0          <NA>               24    7.0  20.0  20.0  6.0  \n1          <NA>               24    7.0  20.0  20.0  6.0  \n2          <NA>               24    7.0  20.0  20.0  6.0  \n3          <NA>               24    7.0  20.0  20.0  6.0  \n4          <NA>               24    7.0  20.0  20.0  6.0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ID</th>\n      <th>user_id</th>\n      <th>confidence</th>\n      <th>predicted_intensity</th>\n      <th>community</th>\n      <th>district</th>\n      <th>prediction_time</th>\n      <th>indicator</th>\n      <th>indicator_description</th>\n      <th>time_observed</th>\n      <th>forecast_length</th>\n      <th>month</th>\n      <th>day</th>\n      <th>hour</th>\n      <th>dow</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>ID_SbTdy_24</td>\n      <td>77</td>\n      <td>0.3</td>\n      <td>0.0</td>\n      <td>ASSIN BROFOYEDUR</td>\n      <td>assin_fosu</td>\n      <td>2025-07-20 19:27:28</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n      <td>24</td>\n      <td>7.0</td>\n      <td>20.0</td>\n      <td>20.0</td>\n      <td>6.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>ID_SBKYz_24</td>\n      <td>77</td>\n      <td>0.3</td>\n      <td>0.0</td>\n      <td>ASSIN BROFOYEDUR</td>\n      <td>assin_fosu</td>\n      <td>2025-07-20 19:27:29</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n      <td>24</td>\n      <td>7.0</td>\n      <td>20.0</td>\n      <td>20.0</td>\n      <td>6.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>ID_fAimg_24</td>\n      <td>77</td>\n      <td>0.3</td>\n      <td>0.0</td>\n      <td>ASSIN BROFOYEDUR</td>\n      <td>assin_fosu</td>\n      <td>2025-07-20 19:27:30</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n      <td>24</td>\n      <td>7.0</td>\n      <td>20.0</td>\n      <td>20.0</td>\n      <td>6.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>ID_2wBqC_24</td>\n      <td>77</td>\n      <td>0.3</td>\n      <td>0.0</td>\n      <td>ASSIN BROFOYEDUR</td>\n      <td>assin_fosu</td>\n      <td>2025-07-20 19:27:31</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n      <td>24</td>\n      <td>7.0</td>\n      <td>20.0</td>\n      <td>20.0</td>\n      <td>6.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>ID_NItox_24</td>\n      <td>77</td>\n      <td>0.3</td>\n      <td>0.0</td>\n      <td>ASSIN BROFOYEDUR</td>\n      <td>assin_fosu</td>\n      <td>2025-07-20 19:27:32</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n      <td>24</td>\n      <td>7.0</td>\n      <td>20.0</td>\n      <td>20.0</td>\n      <td>6.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":5},{"cell_type":"code","source":"# train[\"time_observed\"] = train[\"time_observed\"].replace({\"LATE_AFTERNOON\": \"AFTERNOON\", \n#                                                          \"EARLY_MORNING\": \"MORNING\", \n#                                                          \"DAWN\": \"MORNING\", \n#                                                          \"ALL_DAY\": \"EVENING\"})\n# test[\"time_observed\"] = test[\"time_observed\"].replace({\"LATE_AFTERNOON\": \"AFTERNOON\", \n#                                                        \"EARLY_MORNING\": \"MORNING\",\n#                                                        \"DAWN\": \"MORNING\", \n#                                                        \"ALL_DAY\": \"EVENING\"})","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-26T19:53:05.503096Z","iopub.execute_input":"2025-09-26T19:53:05.503350Z","iopub.status.idle":"2025-09-26T19:53:05.507593Z","shell.execute_reply.started":"2025-09-26T19:53:05.503331Z","shell.execute_reply":"2025-09-26T19:53:05.506648Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"CATS = [\"confidence\", \"predicted_intensity\", \"community\", \"district\"]\nlists2 = []","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-26T19:53:05.508404Z","iopub.execute_input":"2025-09-26T19:53:05.508714Z","iopub.status.idle":"2025-09-26T19:53:05.518060Z","shell.execute_reply.started":"2025-09-26T19:53:05.508694Z","shell.execute_reply":"2025-09-26T19:53:05.517449Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"combined = pd.concat([train,test],axis=0,ignore_index=True)\nfor f1, f2 in itertools.combinations(CATS, 2):\n    name = f\"{f1}_{f2}\"\n    lists2.append([f1, f2])\n\nfor f1, f2, f3 in itertools.combinations(CATS, 3):\n    name = f\"{f1}_{f2}_{f3}\"\n    lists2.append([f1, f2, f3])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-26T19:53:05.518829Z","iopub.execute_input":"2025-09-26T19:53:05.519116Z","iopub.status.idle":"2025-09-26T19:53:05.561638Z","shell.execute_reply.started":"2025-09-26T19:53:05.519091Z","shell.execute_reply":"2025-09-26T19:53:05.561072Z"}},"outputs":[],"execution_count":8},{"cell_type":"code","source":"combined[\"Target\"] = combined[\"Target\"].map({\"NORAIN\": 0, \"SMALLRAIN\": 1, \"MEDIUMRAIN\": 2, \"HEAVYRAIN\": 3})","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-26T19:53:05.562197Z","iopub.execute_input":"2025-09-26T19:53:05.562396Z","iopub.status.idle":"2025-09-26T19:53:05.728689Z","shell.execute_reply.started":"2025-09-26T19:53:05.562380Z","shell.execute_reply":"2025-09-26T19:53:05.728138Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"RMV = [\"ID\",\"prediction_time\",\"Target\"]\nFEATURES = [c for c in train.columns if not c in RMV]\n\n\nHIGH_CARDINALITY = []\nprint(f\"THE {len(FEATURES)} BASIC FEATURES ARE:\")\nfor c in FEATURES:\n    ftype = \"numerical\"\n    if combined[c].dtype==\"object\":\n        if c in [\"community\", \"indicator\", \"indicator_description\"]:\n            combined[c] = ( combined[c].str.lower().str.replace(r\"\\s+\", \" \", regex=True).str.strip() )\n        if combined[c].isnull().sum() > 0:\n            combined[c+\"_was_null\"] = combined[c].isnull().astype(\"int32\")\n            combined[c] = combined[c].fillna(\"NAN\")\n            FEATURES.append(c+\"_was_null\")\n        combined[c],_ = combined[c].factorize()\n        combined[c] -= combined[c].min()\n        ftype = \"categorical\"\n    if combined[c].dtype==\"int64\":\n        combined[c] = combined[c].astype(\"int32\")\n    elif combined[c].dtype==\"float64\":\n        combined[c] = combined[c].astype(\"float32\")\n        \n    n = combined[c].nunique()\n    print(f\"{c} ({ftype}) with {n} unique values\")\n    if n>=9: HIGH_CARDINALITY.append(c)\n    \ntrain = combined.iloc[:len(train)].copy()\ntest = combined.iloc[len(train):].reset_index(drop=True).copy()\n\nprint(\"\\nTHE FOLLOWING HAVE 9 OR MORE UNIQUE VALUES:\", HIGH_CARDINALITY )","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-26T19:53:05.730904Z","iopub.execute_input":"2025-09-26T19:53:05.731360Z","iopub.status.idle":"2025-09-26T19:53:05.958388Z","shell.execute_reply.started":"2025-09-26T19:53:05.731341Z","shell.execute_reply":"2025-09-26T19:53:05.957534Z"}},"outputs":[{"name":"stdout","text":"THE 13 BASIC FEATURES ARE:\nuser_id (numerical) with 48 unique values\nconfidence (numerical) with 3 unique values\npredicted_intensity (numerical) with 4 unique values\ncommunity (categorical) with 28 unique values\ndistrict (categorical) with 3 unique values\nindicator (categorical) with 11 unique values\nindicator_description (categorical) with 31 unique values\ntime_observed (categorical) with 9 unique values\nforecast_length (numerical) with 2 unique values\nmonth (numerical) with 4 unique values\nday (numerical) with 31 unique values\nhour (numerical) with 31 unique values\ndow (numerical) with 7 unique values\nindicator_was_null (numerical) with 2 unique values\nindicator_description_was_null (numerical) with 2 unique values\ntime_observed_was_null (numerical) with 2 unique values\n\nTHE FOLLOWING HAVE 9 OR MORE UNIQUE VALUES: ['user_id', 'community', 'indicator', 'indicator_description', 'time_observed', 'day', 'hour']\n","output_type":"stream"}],"execution_count":10},{"cell_type":"code","source":"train[\"time_observed_diff\"] = train[\"forecast_length\"] - train[\"hour\"]\ntest[\"time_observed_diff\"] = test[\"forecast_length\"] - test[\"hour\"]\nFEATURES.append(\"time_observed_diff\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-26T19:53:05.959147Z","iopub.execute_input":"2025-09-26T19:53:05.959367Z","iopub.status.idle":"2025-09-26T19:53:05.965933Z","shell.execute_reply.started":"2025-09-26T19:53:05.959350Z","shell.execute_reply":"2025-09-26T19:53:05.965105Z"}},"outputs":[],"execution_count":11},{"cell_type":"code","source":"def target_encode(train, valid, test, col, target=\"Target\", kfold=5, smooth=20, agg=\"mean\"):\n\n    train['kfold'] = ((train.index) % kfold)\n    col_name = '_'.join(col)\n    train[f'TE_{agg.upper()}_' + col_name] = 0.\n    for i in range(kfold):\n        \n        df_tmp = train[train['kfold']!=i]\n        if agg==\"mean\": mn = train[target].mean()\n        elif agg==\"median\": mn = train[target].median()\n        elif agg==\"min\": mn = train[target].min()\n        elif agg==\"max\": mn = train[target].max()\n        elif agg==\"nunique\": mn = 0\n        df_tmp = df_tmp[col + [target]].groupby(col).agg([agg, 'count']).reset_index()\n        df_tmp.columns = col + [agg, 'count']\n        if agg==\"nunique\":\n            df_tmp['TE_tmp'] = df_tmp[agg] / df_tmp['count']\n        else:\n            df_tmp['TE_tmp'] = ((df_tmp[agg]*df_tmp['count'])+(mn*smooth)) / (df_tmp['count']+smooth)\n        df_tmp_m = train[col + ['kfold', f'TE_{agg.upper()}_' + col_name]].merge(df_tmp, how='left', left_on=col, right_on=col)\n        df_tmp_m.loc[df_tmp_m['kfold']==i, f'TE_{agg.upper()}_' + col_name] = df_tmp_m.loc[df_tmp_m['kfold']==i, 'TE_tmp']\n        train[f'TE_{agg.upper()}_' + col_name] = df_tmp_m[f'TE_{agg.upper()}_' + col_name].fillna(mn).values  \n    \n    df_tmp = train[col + [target]].groupby(col).agg([agg, 'count']).reset_index()\n    if agg==\"mean\": mn = train[target].mean()\n    elif agg==\"median\": mn = train[target].median()\n    elif agg==\"min\": mn = train[target].min()\n    elif agg==\"max\": mn = train[target].max()\n    elif agg==\"nunique\": mn = 0\n    df_tmp.columns = col + [agg, 'count']\n    if agg==\"nunique\":\n        df_tmp['TE_tmp'] = df_tmp[agg] / df_tmp['count']\n    else:\n        df_tmp['TE_tmp'] = ((df_tmp[agg]*df_tmp['count'])+(mn*smooth)) / (df_tmp['count']+smooth)\n    df_tmp_m = valid[col].merge(df_tmp, how='left', left_on=col, right_on=col)\n    valid[f'TE_{agg.upper()}_' + col_name] = df_tmp_m['TE_tmp'].fillna(mn).values\n    valid[f'TE_{agg.upper()}_' + col_name] = valid[f'TE_{agg.upper()}_' + col_name].astype(\"float32\")\n\n    df_tmp_m = test[col].merge(df_tmp, how='left', left_on=col, right_on=col)\n    test[f'TE_{agg.upper()}_' + col_name] = df_tmp_m['TE_tmp'].fillna(mn).values\n    test[f'TE_{agg.upper()}_' + col_name] = test[f'TE_{agg.upper()}_' + col_name].astype(\"float32\")\n\n    train = train.drop('kfold', axis=1)\n    train[f'TE_{agg.upper()}_' + col_name] = train[f'TE_{agg.upper()}_' + col_name].astype(\"float32\")\n\n    return (train, valid, test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-26T19:53:05.966800Z","iopub.execute_input":"2025-09-26T19:53:05.967130Z","iopub.status.idle":"2025-09-26T19:53:05.980352Z","shell.execute_reply.started":"2025-09-26T19:53:05.967092Z","shell.execute_reply":"2025-09-26T19:53:05.979596Z"}},"outputs":[],"execution_count":12},{"cell_type":"code","source":"from xgboost import XGBClassifier\nimport xgboost as xgb, time\nprint(f\"Using XGBoost version\",xgb.__version__)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-26T19:53:05.981126Z","iopub.execute_input":"2025-09-26T19:53:05.981308Z","iopub.status.idle":"2025-09-26T19:53:06.851179Z","shell.execute_reply.started":"2025-09-26T19:53:05.981294Z","shell.execute_reply":"2025-09-26T19:53:06.850493Z"}},"outputs":[{"name":"stdout","text":"Using XGBoost version 2.0.3\n","output_type":"stream"}],"execution_count":13},{"cell_type":"code","source":"%%time\n\nFOLDS = 20\nfrom sklearn.model_selection import StratifiedKFold\nskf = StratifiedKFold(n_splits=FOLDS, shuffle=True, random_state=44)\n\noof = np.zeros((len(train), 4))\npred = np.zeros((len(test), 4))\n\nfor i, (train_index, test_index) in enumerate(skf.split(train, train[\"Target\"])):\n\n    print(\"#\"*25)\n    print(f\"### Fold {i+1}\")\n    print(\"#\"*25)\n    \n    x_train = train.loc[train_index,FEATURES+[\"Target\"] ].copy()\n    y_train = train.loc[train_index,\"Target\"]\n    x_valid = train.loc[test_index,FEATURES].copy()\n    y_valid = train.loc[test_index,\"Target\"]\n    x_test = test[FEATURES].copy()\n\n    start = time.time()\n    print(f\"FEATURE ENGINEER {len(FEATURES)} COLUMNS and {len(lists2)} GROUPS: \",end=\"\")\n    for j,f in enumerate(FEATURES+lists2):\n\n        if j<len(FEATURES): c = [f]\n        else: c = f\n        print(f\"({j+1}){c}\",\", \",end=\"\")\n\n        # LOW CARDINALITY FEATURES - TARGET ENCODE MEAN AND MEDIAN\n        x_train, x_valid, x_test = target_encode(x_train, x_valid, x_test, c, smooth=20, agg=\"mean\")\n        x_train, x_valid, x_test = target_encode(x_train, x_valid, x_test, c, smooth=0, agg=\"median\")\n\n        # HIGH CARDINALITY FEATURES - TE MIN, MAX, NUNIQUE and CE\n        if (j>=len(FEATURES)) | (c[0] in HIGH_CARDINALITY):\n            x_train, x_valid, x_test = target_encode(x_train, x_valid, x_test, c, smooth=0, agg=\"min\")\n            x_train, x_valid, x_test = target_encode(x_train, x_valid, x_test, c, smooth=0, agg=\"max\")\n            x_train, x_valid, x_test = target_encode(x_train, x_valid, x_test, c, smooth=0, agg=\"nunique\")\n    \n            # COUNT ENCODING (USING COMBINED TRAIN TEST)\n            tmp = combined.groupby(c).Target.count()\n            nm = f\"CE_{'_'.join(c)}\"; tmp.name = nm\n            x_train = x_train.merge(tmp, on=c, how=\"left\")\n            x_valid = x_valid.merge(tmp, on=c, how=\"left\")\n            x_test = x_test.merge(tmp, on=c, how=\"left\")\n            x_train[nm] = x_train[nm].astype(\"int32\")\n            x_valid[nm] = x_valid[nm].astype(\"int32\")\n            x_test[nm] = x_test[nm].astype(\"int32\")\n            \n    end = time.time()\n    elapsed = end-start\n    print(f\"Feature engineering took {elapsed:.1f} seconds\")\n    x_train = x_train.drop(\"Target\",axis=1)\n\n    model = XGBClassifier(\n        device=\"cuda\",\n        max_depth=10, \n        colsample_bytree=0.9, \n        subsample=0.9, \n        n_estimators=2_000, \n        learning_rate=0.01, \n        num_class=4,\n        early_stopping_rounds=25,  \n        objective=\"multi:softprob\",\n        eval_metric=\"mlogloss\"\n    )\n    model.fit(\n        x_train, y_train,\n        eval_set=[(x_valid, y_valid)],   \n        verbose=100\n    )\n\n    # INFER OOF\n    oof[test_index] = model.predict_proba(x_valid)\n    # INFER TEST\n    pred += model.predict_proba(x_test)\n\n# COMPUTE AVERAGE TEST PREDS\npred /= FOLDS","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-26T19:53:06.852007Z","iopub.execute_input":"2025-09-26T19:53:06.852976Z"}},"outputs":[{"name":"stdout","text":"#########################\n### Fold 1\n#########################\nFEATURE ENGINEER 17 COLUMNS and 10 GROUPS: (1)['user_id'] , (2)['confidence'] , (3)['predicted_intensity'] , (4)['community'] , (5)['district'] , (6)['indicator'] , (7)['indicator_description'] , (8)['time_observed'] , (9)['forecast_length'] , (10)['month'] , (11)['day'] , (12)['hour'] , (13)['dow'] , (14)['indicator_was_null'] , (15)['indicator_description_was_null'] , (16)['time_observed_was_null'] , (17)['time_observed_diff'] , (18)['confidence', 'predicted_intensity'] , (19)['confidence', 'community'] , (20)['confidence', 'district'] , (21)['predicted_intensity', 'community'] , (22)['predicted_intensity', 'district'] , (23)['community', 'district'] , (24)['confidence', 'predicted_intensity', 'community'] , (25)['confidence', 'predicted_intensity', 'district'] , (26)['confidence', 'community', 'district'] , (27)['predicted_intensity', 'community', 'district'] , Feature engineering took 32.7 seconds\n[0]\tvalidation_0-mlogloss:1.36748\n[100]\tvalidation_0-mlogloss:0.45969\n[200]\tvalidation_0-mlogloss:0.19387\n[300]\tvalidation_0-mlogloss:0.09689\n[400]\tvalidation_0-mlogloss:0.05720\n[500]\tvalidation_0-mlogloss:0.04020\n[600]\tvalidation_0-mlogloss:0.03278\n[700]\tvalidation_0-mlogloss:0.02979\n[800]\tvalidation_0-mlogloss:0.02876\n[830]\tvalidation_0-mlogloss:0.02882\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [19:53:53] WARNING: /workspace/src/common/error_msg.cc:58: Falling back to prediction using DMatrix due to mismatched devices. This might lead to higher memory usage and slower performance. XGBoost is running on: cuda:0, while the input data is on: cpu.\nPotential solutions:\n- Use a data structure that matches the device ordinal in the booster.\n- Set the device for booster before call to inplace_predict.\n\nThis warning will only be shown once.\n\n  warnings.warn(smsg, UserWarning)\n","output_type":"stream"},{"name":"stdout","text":"#########################\n### Fold 2\n#########################\nFEATURE ENGINEER 17 COLUMNS and 10 GROUPS: (1)['user_id'] , (2)['confidence'] , (3)['predicted_intensity'] , (4)['community'] , (5)['district'] , (6)['indicator'] , (7)['indicator_description'] , (8)['time_observed'] , (9)['forecast_length'] , (10)['month'] , (11)['day'] , (12)['hour'] , (13)['dow'] , (14)['indicator_was_null'] , (15)['indicator_description_was_null'] , (16)['time_observed_was_null'] , (17)['time_observed_diff'] , (18)['confidence', 'predicted_intensity'] , (19)['confidence', 'community'] , (20)['confidence', 'district'] , (21)['predicted_intensity', 'community'] , (22)['predicted_intensity', 'district'] , (23)['community', 'district'] , (24)['confidence', 'predicted_intensity', 'community'] , (25)['confidence', 'predicted_intensity', 'district'] , (26)['confidence', 'community', 'district'] , (27)['predicted_intensity', 'community', 'district'] , Feature engineering took 30.8 seconds\n[0]\tvalidation_0-mlogloss:1.36756\n[100]\tvalidation_0-mlogloss:0.46233\n[200]\tvalidation_0-mlogloss:0.19726\n[300]\tvalidation_0-mlogloss:0.10154\n[400]\tvalidation_0-mlogloss:0.06236\n[500]\tvalidation_0-mlogloss:0.04505\n[600]\tvalidation_0-mlogloss:0.03745\n[700]\tvalidation_0-mlogloss:0.03448\n[800]\tvalidation_0-mlogloss:0.03304\n[856]\tvalidation_0-mlogloss:0.03289\n#########################\n### Fold 3\n#########################\nFEATURE ENGINEER 17 COLUMNS and 10 GROUPS: (1)['user_id'] , (2)['confidence'] , (3)['predicted_intensity'] , (4)['community'] , (5)['district'] , (6)['indicator'] , (7)['indicator_description'] , (8)['time_observed'] , (9)['forecast_length'] , (10)['month'] , (11)['day'] , (12)['hour'] , (13)['dow'] , (14)['indicator_was_null'] , (15)['indicator_description_was_null'] , (16)['time_observed_was_null'] , (17)['time_observed_diff'] , (18)['confidence', 'predicted_intensity'] , (19)['confidence', 'community'] , (20)['confidence', 'district'] , (21)['predicted_intensity', 'community'] , (22)['predicted_intensity', 'district'] , (23)['community', 'district'] , (24)['confidence', 'predicted_intensity', 'community'] , (25)['confidence', 'predicted_intensity', 'district'] , (26)['confidence', 'community', 'district'] , (27)['predicted_intensity', 'community', 'district'] , Feature engineering took 30.4 seconds\n[0]\tvalidation_0-mlogloss:1.36734\n[100]\tvalidation_0-mlogloss:0.44885\n[200]\tvalidation_0-mlogloss:0.18165\n[300]\tvalidation_0-mlogloss:0.08317\n[400]\tvalidation_0-mlogloss:0.04284\n[500]\tvalidation_0-mlogloss:0.02650\n[600]\tvalidation_0-mlogloss:0.01958\n[700]\tvalidation_0-mlogloss:0.01772\n[787]\tvalidation_0-mlogloss:0.01749\n#########################\n### Fold 4\n#########################\nFEATURE ENGINEER 17 COLUMNS and 10 GROUPS: (1)['user_id'] , (2)['confidence'] , (3)['predicted_intensity'] , (4)['community'] , (5)['district'] , (6)['indicator'] , (7)['indicator_description'] , (8)['time_observed'] , (9)['forecast_length'] , (10)['month'] , (11)['day'] , (12)['hour'] , (13)['dow'] , (14)['indicator_was_null'] , (15)['indicator_description_was_null'] , (16)['time_observed_was_null'] , (17)['time_observed_diff'] , (18)['confidence', 'predicted_intensity'] , (19)['confidence', 'community'] , (20)['confidence', 'district'] , (21)['predicted_intensity', 'community'] , (22)['predicted_intensity', 'district'] , (23)['community', 'district'] , (24)['confidence', 'predicted_intensity', 'community'] , (25)['confidence', 'predicted_intensity', 'district'] , (26)['confidence', 'community', 'district'] , (27)['predicted_intensity', 'community', 'district'] , Feature engineering took 30.7 seconds\n[0]\tvalidation_0-mlogloss:1.36737\n[100]\tvalidation_0-mlogloss:0.46372\n[200]\tvalidation_0-mlogloss:0.19750\n[300]\tvalidation_0-mlogloss:0.09804\n[400]\tvalidation_0-mlogloss:0.05797\n[500]\tvalidation_0-mlogloss:0.04093\n[600]\tvalidation_0-mlogloss:0.03389\n[700]\tvalidation_0-mlogloss:0.03175\n[800]\tvalidation_0-mlogloss:0.03106\n[824]\tvalidation_0-mlogloss:0.03108\n#########################\n### Fold 5\n#########################\nFEATURE ENGINEER 17 COLUMNS and 10 GROUPS: (1)['user_id'] , (2)['confidence'] , (3)['predicted_intensity'] , (4)['community'] , (5)['district'] , (6)['indicator'] , (7)['indicator_description'] , (8)['time_observed'] , (9)['forecast_length'] , (10)['month'] , (11)['day'] , (12)['hour'] , (13)['dow'] , (14)['indicator_was_null'] , (15)['indicator_description_was_null'] , (16)['time_observed_was_null'] , (17)['time_observed_diff'] , (18)['confidence', 'predicted_intensity'] , (19)['confidence', 'community'] , (20)['confidence', 'district'] , (21)['predicted_intensity', 'community'] , (22)['predicted_intensity', 'district'] , (23)['community', 'district'] , (24)['confidence', 'predicted_intensity', 'community'] , (25)['confidence', 'predicted_intensity', 'district'] , (26)['confidence', 'community', 'district'] , (27)['predicted_intensity', 'community', 'district'] , Feature engineering took 30.3 seconds\n[0]\tvalidation_0-mlogloss:1.36725\n[100]\tvalidation_0-mlogloss:0.44745\n[200]\tvalidation_0-mlogloss:0.17989\n[300]\tvalidation_0-mlogloss:0.08408\n[400]\tvalidation_0-mlogloss:0.04496\n[500]\tvalidation_0-mlogloss:0.02867\n[600]\tvalidation_0-mlogloss:0.02168\n[700]\tvalidation_0-mlogloss:0.01839\n[800]\tvalidation_0-mlogloss:0.01660\n[900]\tvalidation_0-mlogloss:0.01562\n[1000]\tvalidation_0-mlogloss:0.01508\n[1100]\tvalidation_0-mlogloss:0.01392\n[1200]\tvalidation_0-mlogloss:0.01296\n[1300]\tvalidation_0-mlogloss:0.01215\n[1400]\tvalidation_0-mlogloss:0.01157\n[1500]\tvalidation_0-mlogloss:0.01101\n[1600]\tvalidation_0-mlogloss:0.01052\n[1700]\tvalidation_0-mlogloss:0.01012\n[1800]\tvalidation_0-mlogloss:0.00978\n[1900]\tvalidation_0-mlogloss:0.00941\n[1999]\tvalidation_0-mlogloss:0.00913\n#########################\n### Fold 6\n#########################\nFEATURE ENGINEER 17 COLUMNS and 10 GROUPS: (1)['user_id'] , (2)['confidence'] , (3)['predicted_intensity'] , (4)['community'] , (5)['district'] , (6)['indicator'] , (7)['indicator_description'] , (8)['time_observed'] , (9)['forecast_length'] , (10)['month'] , (11)['day'] , (12)['hour'] , (13)['dow'] , (14)['indicator_was_null'] , (15)['indicator_description_was_null'] , (16)['time_observed_was_null'] , (17)['time_observed_diff'] , (18)['confidence', 'predicted_intensity'] , (19)['confidence', 'community'] , (20)['confidence', 'district'] , (21)['predicted_intensity', 'community'] , (22)['predicted_intensity', 'district'] , (23)['community', 'district'] , (24)['confidence', 'predicted_intensity', 'community'] , (25)['confidence', 'predicted_intensity', 'district'] , (26)['confidence', 'community', 'district'] , (27)['predicted_intensity', 'community', 'district'] , Feature engineering took 29.6 seconds\n[0]\tvalidation_0-mlogloss:1.36759\n[100]\tvalidation_0-mlogloss:0.45371\n[200]\tvalidation_0-mlogloss:0.18566\n[300]\tvalidation_0-mlogloss:0.08917\n[400]\tvalidation_0-mlogloss:0.05025\n[500]\tvalidation_0-mlogloss:0.03443\n[600]\tvalidation_0-mlogloss:0.02786\n[700]\tvalidation_0-mlogloss:0.02487\n[800]\tvalidation_0-mlogloss:0.02394\n[833]\tvalidation_0-mlogloss:0.02393\n#########################\n### Fold 7\n#########################\nFEATURE ENGINEER 17 COLUMNS and 10 GROUPS: (1)['user_id'] , (2)['confidence'] , (3)['predicted_intensity'] , (4)['community'] , (5)['district'] , (6)['indicator'] , (7)['indicator_description'] , (8)['time_observed'] , (9)['forecast_length'] , (10)['month'] , (11)['day'] , (12)['hour'] , (13)['dow'] , (14)['indicator_was_null'] , (15)['indicator_description_was_null'] , (16)['time_observed_was_null'] , (17)['time_observed_diff'] , (18)['confidence', 'predicted_intensity'] , (19)['confidence', 'community'] , (20)['confidence', 'district'] , (21)['predicted_intensity', 'community'] , (22)['predicted_intensity', 'district'] , (23)['community', 'district'] , (24)['confidence', 'predicted_intensity', 'community'] , (25)['confidence', 'predicted_intensity', 'district'] , (26)['confidence', 'community', 'district'] , (27)['predicted_intensity', 'community', 'district'] , Feature engineering took 29.8 seconds\n[0]\tvalidation_0-mlogloss:1.36745\n[100]\tvalidation_0-mlogloss:0.46178\n[200]\tvalidation_0-mlogloss:0.19880\n[300]\tvalidation_0-mlogloss:0.10659\n[400]\tvalidation_0-mlogloss:0.07263\n[500]\tvalidation_0-mlogloss:0.05865\n[600]\tvalidation_0-mlogloss:0.05447\n[700]\tvalidation_0-mlogloss:0.05344\n[742]\tvalidation_0-mlogloss:0.05346\n#########################\n### Fold 8\n#########################\nFEATURE ENGINEER 17 COLUMNS and 10 GROUPS: (1)['user_id'] , (2)['confidence'] , (3)['predicted_intensity'] , (4)['community'] , (5)['district'] , (6)['indicator'] , (7)['indicator_description'] , (8)['time_observed'] , (9)['forecast_length'] , (10)['month'] , (11)['day'] , (12)['hour'] , (13)['dow'] , (14)['indicator_was_null'] , (15)['indicator_description_was_null'] , (16)['time_observed_was_null'] , (17)['time_observed_diff'] , (18)['confidence', 'predicted_intensity'] , (19)['confidence', 'community'] , (20)['confidence', 'district'] , (21)['predicted_intensity', 'community'] , (22)['predicted_intensity', 'district'] , (23)['community', 'district'] , (24)['confidence', 'predicted_intensity', 'community'] , (25)['confidence', 'predicted_intensity', 'district'] , (26)['confidence', 'community', 'district'] , (27)['predicted_intensity', 'community', 'district'] , Feature engineering took 29.6 seconds\n[0]\tvalidation_0-mlogloss:1.36757\n[100]\tvalidation_0-mlogloss:0.46378\n[200]\tvalidation_0-mlogloss:0.19901\n[300]\tvalidation_0-mlogloss:0.10375\n[400]\tvalidation_0-mlogloss:0.06708\n[500]\tvalidation_0-mlogloss:0.05209\n[600]\tvalidation_0-mlogloss:0.04572\n[700]\tvalidation_0-mlogloss:0.04297\n[800]\tvalidation_0-mlogloss:0.04214\n[856]\tvalidation_0-mlogloss:0.04212\n#########################\n### Fold 9\n#########################\nFEATURE ENGINEER 17 COLUMNS and 10 GROUPS: (1)['user_id'] , (2)['confidence'] , (3)['predicted_intensity'] , (4)['community'] , (5)['district'] , (6)['indicator'] , (7)['indicator_description'] , (8)['time_observed'] , (9)['forecast_length'] , (10)['month'] , (11)['day'] , (12)['hour'] , (13)['dow'] , (14)['indicator_was_null'] , (15)['indicator_description_was_null'] , (16)['time_observed_was_null'] , (17)['time_observed_diff'] , (18)['confidence', 'predicted_intensity'] , (19)['confidence', 'community'] , (20)['confidence', 'district'] , (21)['predicted_intensity', 'community'] , (22)['predicted_intensity', 'district'] , (23)['community', 'district'] , (24)['confidence', 'predicted_intensity', 'community'] , (25)['confidence', 'predicted_intensity', 'district'] , (26)['confidence', 'community', 'district'] , (27)['predicted_intensity', 'community', 'district'] , Feature engineering took 29.4 seconds\n[0]\tvalidation_0-mlogloss:1.36747\n[100]\tvalidation_0-mlogloss:0.46204\n[200]\tvalidation_0-mlogloss:0.19870\n[300]\tvalidation_0-mlogloss:0.10365\n[400]\tvalidation_0-mlogloss:0.06148\n[500]\tvalidation_0-mlogloss:0.04319\n[600]\tvalidation_0-mlogloss:0.03502\n[700]\tvalidation_0-mlogloss:0.03185\n[800]\tvalidation_0-mlogloss:0.03071\n[900]\tvalidation_0-mlogloss:0.03037\n[916]\tvalidation_0-mlogloss:0.03037\n#########################\n### Fold 10\n#########################\nFEATURE ENGINEER 17 COLUMNS and 10 GROUPS: (1)['user_id'] , (2)['confidence'] , (3)['predicted_intensity'] , (4)['community'] , (5)['district'] , (6)['indicator'] , (7)['indicator_description'] , (8)['time_observed'] , (9)['forecast_length'] , (10)['month'] , (11)['day'] , (12)['hour'] , (13)['dow'] , (14)['indicator_was_null'] , (15)['indicator_description_was_null'] , (16)['time_observed_was_null'] , (17)['time_observed_diff'] , (18)['confidence', 'predicted_intensity'] , (19)['confidence', 'community'] , (20)['confidence', 'district'] , (21)['predicted_intensity', 'community'] , (22)['predicted_intensity', 'district'] , (23)['community', 'district'] , (24)['confidence', 'predicted_intensity', 'community'] , (25)['confidence', 'predicted_intensity', 'district'] , (26)['confidence', 'community', 'district'] , (27)['predicted_intensity', 'community', 'district'] , Feature engineering took 29.3 seconds\n[0]\tvalidation_0-mlogloss:1.36740\n[100]\tvalidation_0-mlogloss:0.46110\n[200]\tvalidation_0-mlogloss:0.19760\n[300]\tvalidation_0-mlogloss:0.10273\n[400]\tvalidation_0-mlogloss:0.06389\n[500]\tvalidation_0-mlogloss:0.04870\n[600]\tvalidation_0-mlogloss:0.04190\n[700]\tvalidation_0-mlogloss:0.03990\n[730]\tvalidation_0-mlogloss:0.03990\n#########################\n### Fold 11\n#########################\nFEATURE ENGINEER 17 COLUMNS and 10 GROUPS: (1)['user_id'] , (2)['confidence'] , (3)['predicted_intensity'] , (4)['community'] , (5)['district'] , (6)['indicator'] , (7)['indicator_description'] , (8)['time_observed'] , (9)['forecast_length'] , (10)['month'] , (11)['day'] , (12)['hour'] , (13)['dow'] , (14)['indicator_was_null'] , (15)['indicator_description_was_null'] , (16)['time_observed_was_null'] , (17)['time_observed_diff'] , (18)['confidence', 'predicted_intensity'] , (19)['confidence', 'community'] , (20)['confidence', 'district'] , (21)['predicted_intensity', 'community'] , (22)['predicted_intensity', 'district'] , (23)['community', 'district'] , (24)['confidence', 'predicted_intensity', 'community'] , (25)['confidence', 'predicted_intensity', 'district'] , (26)['confidence', 'community', 'district'] , (27)['predicted_intensity', 'community', 'district'] , Feature engineering took 29.9 seconds\n[0]\tvalidation_0-mlogloss:1.36782\n[100]\tvalidation_0-mlogloss:0.47145\n[200]\tvalidation_0-mlogloss:0.21345\n[300]\tvalidation_0-mlogloss:0.12293\n[400]\tvalidation_0-mlogloss:0.08411\n[500]\tvalidation_0-mlogloss:0.06780\n[600]\tvalidation_0-mlogloss:0.06193\n[700]\tvalidation_0-mlogloss:0.05964\n[770]\tvalidation_0-mlogloss:0.05908\n#########################\n### Fold 12\n#########################\nFEATURE ENGINEER 17 COLUMNS and 10 GROUPS: (1)['user_id'] , (2)['confidence'] , (3)['predicted_intensity'] , (4)['community'] , (5)['district'] , (6)['indicator'] , (7)['indicator_description'] , (8)['time_observed'] , (9)['forecast_length'] , (10)['month'] , (11)['day'] , (12)['hour'] , (13)['dow'] , (14)['indicator_was_null'] , (15)['indicator_description_was_null'] , (16)['time_observed_was_null'] , (17)['time_observed_diff'] , (18)['confidence', 'predicted_intensity'] , (19)['confidence', 'community'] , (20)['confidence', 'district'] , (21)['predicted_intensity', 'community'] , (22)['predicted_intensity', 'district'] , (23)['community', 'district'] , (24)['confidence', 'predicted_intensity', 'community'] , (25)['confidence', 'predicted_intensity', 'district'] , (26)['confidence', 'community', 'district'] , (27)['predicted_intensity', 'community', 'district'] , Feature engineering took 29.8 seconds\n[0]\tvalidation_0-mlogloss:1.36786\n[100]\tvalidation_0-mlogloss:0.46524\n[200]\tvalidation_0-mlogloss:0.19715\n[300]\tvalidation_0-mlogloss:0.09934\n[400]\tvalidation_0-mlogloss:0.05929\n[500]\tvalidation_0-mlogloss:0.04199\n[600]\tvalidation_0-mlogloss:0.03442\n[700]\tvalidation_0-mlogloss:0.03111\n[800]\tvalidation_0-mlogloss:0.02992\n[900]\tvalidation_0-mlogloss:0.02921\n[1000]\tvalidation_0-mlogloss:0.02860\n[1100]\tvalidation_0-mlogloss:0.02798\n[1200]\tvalidation_0-mlogloss:0.02735\n[1300]\tvalidation_0-mlogloss:0.02680\n[1400]\tvalidation_0-mlogloss:0.02631\n[1500]\tvalidation_0-mlogloss:0.02600\n[1600]\tvalidation_0-mlogloss:0.02571\n[1700]\tvalidation_0-mlogloss:0.02555\n[1797]\tvalidation_0-mlogloss:0.02538\n#########################\n### Fold 13\n#########################\nFEATURE ENGINEER 17 COLUMNS and 10 GROUPS: (1)['user_id'] , (2)['confidence'] , (3)['predicted_intensity'] , (4)['community'] , (5)['district'] , (6)['indicator'] , (7)['indicator_description'] , (8)['time_observed'] , (9)['forecast_length'] , (10)['month'] , (11)['day'] , (12)['hour'] , (13)['dow'] , (14)['indicator_was_null'] , (15)['indicator_description_was_null'] , (16)['time_observed_was_null'] , (17)['time_observed_diff'] , (18)['confidence', 'predicted_intensity'] , (19)['confidence', 'community'] , (20)['confidence', 'district'] , (21)['predicted_intensity', 'community'] , (22)['predicted_intensity', 'district'] , (23)['community', 'district'] , (24)['confidence', 'predicted_intensity', 'community'] , (25)['confidence', 'predicted_intensity', 'district'] , (26)['confidence', 'community', 'district'] , (27)['predicted_intensity', 'community', 'district'] , Feature engineering took 30.2 seconds\n[0]\tvalidation_0-mlogloss:1.36706\n[100]\tvalidation_0-mlogloss:0.44670\n[200]\tvalidation_0-mlogloss:0.17543\n[300]\tvalidation_0-mlogloss:0.07814\n[400]\tvalidation_0-mlogloss:0.04024\n[500]\tvalidation_0-mlogloss:0.02541\n[600]\tvalidation_0-mlogloss:0.01964\n[700]\tvalidation_0-mlogloss:0.01770\n[800]\tvalidation_0-mlogloss:0.01699\n[862]\tvalidation_0-mlogloss:0.01697\n#########################\n### Fold 14\n#########################\nFEATURE ENGINEER 17 COLUMNS and 10 GROUPS: (1)['user_id'] , (2)['confidence'] , (3)['predicted_intensity'] , (4)['community'] , (5)['district'] , (6)['indicator'] , (7)['indicator_description'] , (8)['time_observed'] , (9)['forecast_length'] , (10)['month'] , (11)['day'] , (12)['hour'] , (13)['dow'] , (14)['indicator_was_null'] , (15)['indicator_description_was_null'] , (16)['time_observed_was_null'] , (17)['time_observed_diff'] , (18)['confidence', 'predicted_intensity'] , (19)['confidence', 'community'] , (20)['confidence', 'district'] , (21)['predicted_intensity', 'community'] , (22)['predicted_intensity', 'district'] , (23)['community', 'district'] , (24)['confidence', 'predicted_intensity', 'community'] , (25)['confidence', 'predicted_intensity', 'district'] , (26)['confidence', 'community', 'district'] , (27)['predicted_intensity', 'community', 'district'] , Feature engineering took 31.1 seconds\n[0]\tvalidation_0-mlogloss:1.36736\n[100]\tvalidation_0-mlogloss:0.45720\n[200]\tvalidation_0-mlogloss:0.19012\n[300]\tvalidation_0-mlogloss:0.09522\n[400]\tvalidation_0-mlogloss:0.05620\n[500]\tvalidation_0-mlogloss:0.04012\n[600]\tvalidation_0-mlogloss:0.03392\n[700]\tvalidation_0-mlogloss:0.03197\n[780]\tvalidation_0-mlogloss:0.03167\n#########################\n### Fold 15\n#########################\nFEATURE ENGINEER 17 COLUMNS and 10 GROUPS: (1)['user_id'] , (2)['confidence'] , (3)['predicted_intensity'] , (4)['community'] , (5)['district'] , (6)['indicator'] , (7)['indicator_description'] , (8)['time_observed'] , (9)['forecast_length'] , (10)['month'] , (11)['day'] , (12)['hour'] , (13)['dow'] , (14)['indicator_was_null'] , (15)['indicator_description_was_null'] , (16)['time_observed_was_null'] , (17)['time_observed_diff'] , (18)['confidence', 'predicted_intensity'] , (19)['confidence', 'community'] , ","output_type":"stream"}],"execution_count":null},{"cell_type":"code","source":"preds = np.argmax(pred, axis=1)\ndata = {\"ID\": test.ID, \"Target\": preds}\nsubmission = pd.DataFrame(data)\nsubmission[\"Target\"] = submission[\"Target\"].map({0: \"NORAIN\", 1: \"SMALLRAIN\", 2: \"MEDIUMRAIN\", 3: \"HEAVYRAIN\"})","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.metrics import f1_score\noof_pred = np.argmax(oof, axis=1)\nprint(f1_score(train[\"Target\"], oof_pred, average=\"macro\"))","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"- 0.9454066557574673 [\"confidence\",\"predicted_intensity\",\"community\",\"district\"]\n- 0.940404375003723 [confidence included as categorical]\n- 0.9320936343561069 [encode fold 20]\n- 0.9405303269135805 [train used in kfold]\n- 0.9388247951471642 [no binary missings columns]","metadata":{}},{"cell_type":"code","source":"submission.to_csv(\"submission.csv\", index=False)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}