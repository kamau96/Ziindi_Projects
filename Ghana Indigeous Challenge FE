{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":12806871,"sourceType":"datasetVersion","datasetId":8097839}],"dockerImageVersionId":31090,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %load_ext cudf.pandas","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-02T16:07:50.925651Z","iopub.execute_input":"2025-10-02T16:07:50.926334Z","iopub.status.idle":"2025-10-02T16:07:50.930653Z","shell.execute_reply.started":"2025-10-02T16:07:50.926297Z","shell.execute_reply":"2025-10-02T16:07:50.929882Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"import numpy as np, pandas as pd, itertools\nfrom sklearn.model_selection import train_test_split, StratifiedKFold\nfrom sklearn.feature_selection import SequentialFeatureSelector\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.metrics import f1_score\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.tree import DecisionTreeClassifier","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-02T16:07:50.953416Z","iopub.execute_input":"2025-10-02T16:07:50.953710Z","iopub.status.idle":"2025-10-02T16:07:52.067308Z","shell.execute_reply.started":"2025-10-02T16:07:50.953687Z","shell.execute_reply":"2025-10-02T16:07:52.066445Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"pd.set_option('display.max_columns', 500)\nRANDOM_STATE = 44","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-02T16:07:52.068848Z","iopub.execute_input":"2025-10-02T16:07:52.069355Z","iopub.status.idle":"2025-10-02T16:07:52.073731Z","shell.execute_reply.started":"2025-10-02T16:07:52.069322Z","shell.execute_reply":"2025-10-02T16:07:52.072906Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"train_path = \"/kaggle/input/indigenous-knowledge/train (1).csv\"\ntest_path = \"/kaggle/input/indigenous-knowledge/test.csv\"","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-02T16:07:52.074724Z","iopub.execute_input":"2025-10-02T16:07:52.074936Z","iopub.status.idle":"2025-10-02T16:07:52.092418Z","shell.execute_reply.started":"2025-10-02T16:07:52.074920Z","shell.execute_reply":"2025-10-02T16:07:52.091525Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"train = pd.read_csv(train_path)\ntrain[\"prediction_time\"] = pd.to_datetime( train[\"prediction_time\"] )\ntrain[\"month\"] = train[\"prediction_time\"].dt.month.astype(\"float32\")\ntrain[\"day\"] = train[\"prediction_time\"].dt.day.astype(\"float32\")\ntrain[\"hour\"] = train[\"prediction_time\"].dt.hour.astype(\"float32\")\ntrain[\"dow\"] = train[\"prediction_time\"].dt.dayofweek.astype(\"float32\")\ny = train[\"Target\"].map({\"NORAIN\": 0, \"SMALLRAIN\": 1, \"MEDIUMRAIN\": 2, \"HEAVYRAIN\": 3}).astype(\"int32\")\ntrain = train.drop(columns=[\"ID\", \"prediction_time\", \"Target\"])\nprint( train.shape )\ntrain.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-02T16:07:52.094605Z","iopub.execute_input":"2025-10-02T16:07:52.094974Z","iopub.status.idle":"2025-10-02T16:07:52.175883Z","shell.execute_reply.started":"2025-10-02T16:07:52.094951Z","shell.execute_reply":"2025-10-02T16:07:52.174942Z"}},"outputs":[{"name":"stdout","text":"(10928, 13)\n","output_type":"stream"},{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"   user_id  confidence  predicted_intensity community    district indicator  \\\n0       11         0.3                  0.0    Tumfa   atiwa_west       NaN   \n1       17         0.3                  0.0  Kwabeng   atiwa_west       NaN   \n2       19         0.3                  0.0  Akropong  atiwa_west       NaN   \n3       23         0.3                  0.0   Asamama  atiwa_west       NaN   \n4       23         0.3                  0.0   Asamama  atiwa_west       NaN   \n\n  indicator_description time_observed  forecast_length  month   day  hour  dow  \n0                   NaN           NaN               12    5.0  30.0  11.0  4.0  \n1                   NaN           NaN               12    5.0  30.0  11.0  4.0  \n2                   NaN           NaN               12    5.0  30.0  11.0  4.0  \n3                   NaN           NaN               12    5.0  30.0  11.0  4.0  \n4                   NaN           NaN               12    5.0  30.0  11.0  4.0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>user_id</th>\n      <th>confidence</th>\n      <th>predicted_intensity</th>\n      <th>community</th>\n      <th>district</th>\n      <th>indicator</th>\n      <th>indicator_description</th>\n      <th>time_observed</th>\n      <th>forecast_length</th>\n      <th>month</th>\n      <th>day</th>\n      <th>hour</th>\n      <th>dow</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>11</td>\n      <td>0.3</td>\n      <td>0.0</td>\n      <td>Tumfa</td>\n      <td>atiwa_west</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>12</td>\n      <td>5.0</td>\n      <td>30.0</td>\n      <td>11.0</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>17</td>\n      <td>0.3</td>\n      <td>0.0</td>\n      <td>Kwabeng</td>\n      <td>atiwa_west</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>12</td>\n      <td>5.0</td>\n      <td>30.0</td>\n      <td>11.0</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>19</td>\n      <td>0.3</td>\n      <td>0.0</td>\n      <td>Akropong</td>\n      <td>atiwa_west</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>12</td>\n      <td>5.0</td>\n      <td>30.0</td>\n      <td>11.0</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>23</td>\n      <td>0.3</td>\n      <td>0.0</td>\n      <td>Asamama</td>\n      <td>atiwa_west</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>12</td>\n      <td>5.0</td>\n      <td>30.0</td>\n      <td>11.0</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>23</td>\n      <td>0.3</td>\n      <td>0.0</td>\n      <td>Asamama</td>\n      <td>atiwa_west</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>12</td>\n      <td>5.0</td>\n      <td>30.0</td>\n      <td>11.0</td>\n      <td>4.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":5},{"cell_type":"code","source":"test = pd.read_csv(test_path)\ntest[\"prediction_time\"] = pd.to_datetime( test[\"prediction_time\"] )\ntest[\"month\"] = test[\"prediction_time\"].dt.month.astype(\"float32\")\ntest[\"day\"] = test[\"prediction_time\"].dt.day.astype(\"float32\")\ntest[\"hour\"] = test[\"prediction_time\"].dt.hour.astype(\"float32\")\ntest[\"dow\"] = test[\"prediction_time\"].dt.dayofweek.astype(\"float32\")\ntest_id = test[\"ID\"]\ntest = test.drop(columns=[\"ID\", \"prediction_time\"])\nprint( test.shape )\ntest.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-02T16:07:52.176840Z","iopub.execute_input":"2025-10-02T16:07:52.177670Z","iopub.status.idle":"2025-10-02T16:07:52.214742Z","shell.execute_reply.started":"2025-10-02T16:07:52.177646Z","shell.execute_reply":"2025-10-02T16:07:52.213919Z"}},"outputs":[{"name":"stdout","text":"(2732, 13)\n","output_type":"stream"},{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"   user_id  confidence  predicted_intensity         community    district  \\\n0       77         0.3                  0.0  ASSIN BROFOYEDUR  assin_fosu   \n1       77         0.3                  0.0  ASSIN BROFOYEDUR  assin_fosu   \n2       77         0.3                  0.0  ASSIN BROFOYEDUR  assin_fosu   \n3       77         0.3                  0.0  ASSIN BROFOYEDUR  assin_fosu   \n4       77         0.3                  0.0  ASSIN BROFOYEDUR  assin_fosu   \n\n  indicator indicator_description time_observed  forecast_length  month   day  \\\n0       NaN                   NaN           NaN               24    7.0  20.0   \n1       NaN                   NaN           NaN               24    7.0  20.0   \n2       NaN                   NaN           NaN               24    7.0  20.0   \n3       NaN                   NaN           NaN               24    7.0  20.0   \n4       NaN                   NaN           NaN               24    7.0  20.0   \n\n   hour  dow  \n0  19.0  6.0  \n1  19.0  6.0  \n2  19.0  6.0  \n3  19.0  6.0  \n4  19.0  6.0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>user_id</th>\n      <th>confidence</th>\n      <th>predicted_intensity</th>\n      <th>community</th>\n      <th>district</th>\n      <th>indicator</th>\n      <th>indicator_description</th>\n      <th>time_observed</th>\n      <th>forecast_length</th>\n      <th>month</th>\n      <th>day</th>\n      <th>hour</th>\n      <th>dow</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>77</td>\n      <td>0.3</td>\n      <td>0.0</td>\n      <td>ASSIN BROFOYEDUR</td>\n      <td>assin_fosu</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>24</td>\n      <td>7.0</td>\n      <td>20.0</td>\n      <td>19.0</td>\n      <td>6.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>77</td>\n      <td>0.3</td>\n      <td>0.0</td>\n      <td>ASSIN BROFOYEDUR</td>\n      <td>assin_fosu</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>24</td>\n      <td>7.0</td>\n      <td>20.0</td>\n      <td>19.0</td>\n      <td>6.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>77</td>\n      <td>0.3</td>\n      <td>0.0</td>\n      <td>ASSIN BROFOYEDUR</td>\n      <td>assin_fosu</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>24</td>\n      <td>7.0</td>\n      <td>20.0</td>\n      <td>19.0</td>\n      <td>6.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>77</td>\n      <td>0.3</td>\n      <td>0.0</td>\n      <td>ASSIN BROFOYEDUR</td>\n      <td>assin_fosu</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>24</td>\n      <td>7.0</td>\n      <td>20.0</td>\n      <td>19.0</td>\n      <td>6.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>77</td>\n      <td>0.3</td>\n      <td>0.0</td>\n      <td>ASSIN BROFOYEDUR</td>\n      <td>assin_fosu</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>24</td>\n      <td>7.0</td>\n      <td>20.0</td>\n      <td>19.0</td>\n      <td>6.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":6},{"cell_type":"code","source":"combined = pd.concat([train, test], axis=0, ignore_index=True)\n\nfor c in combined.columns:\n    if combined[c].dtype == \"object\":\n        if c in [\"community\", \"indicator\", \"indicator_description\", \"time_observed\"]:\n            combined[c] = combined[c].str.lower().str.strip().str.replace(r\"\\s+\", \" \", regex=True)\n        combined[c], _ = combined[c].factorize()\n        combined[c] = combined[c].astype(\"int32\")\n    elif combined[c].dtype == \"int64\": \n        combined[c] = combined[c].astype(\"int32\")\n    elif combined[c].dtype == \"float64\":\n        combined[c] = combined[c].astype(\"float32\")\ntrain = combined[:len(train)].copy()\ntest = combined[len(train):].reset_index(drop=True).copy()\ndel combined","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-02T16:07:52.215721Z","iopub.execute_input":"2025-10-02T16:07:52.215987Z","iopub.status.idle":"2025-10-02T16:07:52.266144Z","shell.execute_reply.started":"2025-10-02T16:07:52.215966Z","shell.execute_reply":"2025-10-02T16:07:52.265294Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"skf = StratifiedKFold(n_splits=5, shuffle=True, random_state=RANDOM_STATE)\ndef target_encode(train, valid, test, col, target=\"Target\", kfold=skf, smooth=20):\n    \n    train = train.reset_index(drop=True)\n    valid = valid.reset_index(drop=True)\n    test = test.reset_index(drop=True)\n    \n    for train_index, test_index in skf.split(train, train[target]):\n        \n        df_tmp = train.loc[train_index].copy()\n        mn = df_tmp[target].value_counts(normalize=True)\n        df_tmp_probs = df_tmp.groupby(col)[target].value_counts(normalize=True).unstack(fill_value=0)\n        df_tmp_counts = df_tmp.groupby(col)[target].count()\n        df_tmp = df_tmp_probs.join(df_tmp_counts.rename(\"count\")).reset_index()\n        \n        new_cols = []\n        for c in df_tmp.columns:\n            if c not in [\"count\", col]:\n                name = 'TE_'+str(c)+\"_\"+col\n                new_cols.append(name)\n                df_tmp[name] = ((df_tmp[c]*df_tmp[\"count\"])+(mn.iloc[c]*smooth)) / (df_tmp[\"count\"]+smooth)\n                \n        df_tmp_m = train[[col]].merge(df_tmp, how='left', left_on=col, right_on=col)\n        df_tmp_m.loc[test_index, new_cols] = df_tmp_m.loc[test_index, new_cols]\n        \n        for c in new_cols:\n            i = int(c.split(\"_\")[1])\n            train[c] = df_tmp_m[c].fillna(mn.iloc[i]).values \n            train[c] = train[c].astype(\"float32\")\n    \n    df_tmp_probs = train.groupby(col)[target].value_counts(normalize=True).unstack(fill_value=0)\n    df_tmp_counts = train.groupby(col)[target].count()\n    df_tmp = df_tmp_probs.join(df_tmp_counts.rename(\"count\")).reset_index()\n    mn = train[target].value_counts(normalize=True)\n    \n    for c in df_tmp.columns:\n        if c not in [\"count\", col]:\n            name = 'TE_'+str(c)+\"_\"+col\n            df_tmp[name] = ((df_tmp[c]*df_tmp[\"count\"])+(mn.iloc[c]*smooth)) / (df_tmp[\"count\"]+smooth)\n            \n    df_tmp_m = valid[[col]].merge(df_tmp, how='left', left_on=col, right_on=col)\n    for c in new_cols:\n        i = int(c.split(\"_\")[1])\n        valid[c] = df_tmp_m[c].fillna(mn.iloc[i]).values\n        valid[c] = valid[c].astype(\"float32\")\n\n    df_tmp_m = test[[col]].merge(df_tmp, how='left', left_on=col, right_on=col)\n    for c in new_cols:\n        i = int(c.split(\"_\")[1])\n        test[c] = df_tmp_m[c].fillna(mn.iloc[i]).values\n        test[c] = test[c].astype(\"float32\")\n        \n    \n    return (train, valid, test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-02T16:07:52.266992Z","iopub.execute_input":"2025-10-02T16:07:52.267278Z","iopub.status.idle":"2025-10-02T16:07:52.280476Z","shell.execute_reply.started":"2025-10-02T16:07:52.267246Z","shell.execute_reply":"2025-10-02T16:07:52.279274Z"}},"outputs":[],"execution_count":8},{"cell_type":"code","source":"import xgboost as xgb, time\nprint(f\"Using XGBoost version\",xgb.__version__)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-02T16:07:52.281428Z","iopub.execute_input":"2025-10-02T16:07:52.281745Z","iopub.status.idle":"2025-10-02T16:07:52.301457Z","shell.execute_reply.started":"2025-10-02T16:07:52.281717Z","shell.execute_reply":"2025-10-02T16:07:52.300379Z"}},"outputs":[{"name":"stdout","text":"Using XGBoost version 2.0.3\n","output_type":"stream"}],"execution_count":9},{"cell_type":"code","source":"%%time\n\nFOLDS = 20\nskf2 = StratifiedKFold(n_splits=FOLDS, shuffle=True, random_state=RANDOM_STATE)\n\noof = np.zeros((len(train), 4))\npred = np.zeros((len(test), 4))\n\nfor i, (train_index, test_index) in enumerate(skf2.split(train, y)):\n\n    print(\"#\"*25)\n    print(f\"### Fold {i+1}\")\n    print(\"#\"*25)\n    \n    x_train = train.loc[train_index].copy()\n    y_train = y.loc[train_index].copy()\n    x_valid = train.loc[test_index].copy()\n    y_valid = y.loc[test_index].copy()\n    x_test = test.copy()\n\n    x_train[\"Target\"] = y_train\n    for c in [\"community\", \"district\", \"indicator\", \"indicator_description\"]:\n        x_train, x_valid, x_test = target_encode(x_train, x_valid, x_test, c)\n    x_train = x_train.drop(columns=[\"Target\"])\n        \n\n    model = XGBClassifier(\n        random_state=RANDOM_STATE,\n        max_depth=10, \n        colsample_bytree=0.9, \n        subsample=0.9, \n        n_estimators=2_000, \n        learning_rate=0.01, \n        num_class=4,\n        early_stopping_rounds=25,  \n        objective=\"multi:softprob\",\n        eval_metric=\"mlogloss\"\n    )\n    model.fit(\n        x_train, y_train,\n        eval_set=[(x_valid, y_valid)],   \n        verbose=100\n    )\n\n    # INFER OOF\n    oof[test_index] = model.predict_proba(x_valid)\n    # INFER TEST\n    pred += model.predict_proba(x_test)\n\n# COMPUTE AVERAGE TEST PREDS\npred /= FOLDS","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-02T16:07:52.302398Z","iopub.execute_input":"2025-10-02T16:07:52.302720Z"}},"outputs":[{"name":"stdout","text":"#########################\n### Fold 1\n#########################\n[0]\tvalidation_0-mlogloss:1.36741\n[100]\tvalidation_0-mlogloss:0.46847\n[200]\tvalidation_0-mlogloss:0.19330\n[300]\tvalidation_0-mlogloss:0.08899\n[400]\tvalidation_0-mlogloss:0.04589\n[500]\tvalidation_0-mlogloss:0.02712\n[600]\tvalidation_0-mlogloss:0.01905\n[700]\tvalidation_0-mlogloss:0.01519\n[800]\tvalidation_0-mlogloss:0.01310\n[900]\tvalidation_0-mlogloss:0.01195\n[1000]\tvalidation_0-mlogloss:0.01103\n[1100]\tvalidation_0-mlogloss:0.01045\n[1200]\tvalidation_0-mlogloss:0.00994\n[1300]\tvalidation_0-mlogloss:0.00955\n[1400]\tvalidation_0-mlogloss:0.00925\n[1500]\tvalidation_0-mlogloss:0.00892\n[1600]\tvalidation_0-mlogloss:0.00867\n[1700]\tvalidation_0-mlogloss:0.00847\n[1800]\tvalidation_0-mlogloss:0.00821\n[1900]\tvalidation_0-mlogloss:0.00807\n[1999]\tvalidation_0-mlogloss:0.00797\n#########################\n### Fold 2\n#########################\n[0]\tvalidation_0-mlogloss:1.36757\n[100]\tvalidation_0-mlogloss:0.45731\n[200]\tvalidation_0-mlogloss:0.19591\n[300]\tvalidation_0-mlogloss:0.09843\n[400]\tvalidation_0-mlogloss:0.05672\n[500]\tvalidation_0-mlogloss:0.03533\n[600]\tvalidation_0-mlogloss:0.02525\n[700]\tvalidation_0-mlogloss:0.02116\n[800]\tvalidation_0-mlogloss:0.01875\n[900]\tvalidation_0-mlogloss:0.01724\n[1000]\tvalidation_0-mlogloss:0.01627\n[1100]\tvalidation_0-mlogloss:0.01550\n[1200]\tvalidation_0-mlogloss:0.01500\n[1300]\tvalidation_0-mlogloss:0.01459\n[1400]\tvalidation_0-mlogloss:0.01420\n[1500]\tvalidation_0-mlogloss:0.01391\n[1600]\tvalidation_0-mlogloss:0.01371\n[1700]\tvalidation_0-mlogloss:0.01352\n[1800]\tvalidation_0-mlogloss:0.01334\n[1900]\tvalidation_0-mlogloss:0.01316\n[1999]\tvalidation_0-mlogloss:0.01297\n#########################\n### Fold 3\n#########################\n[0]\tvalidation_0-mlogloss:1.36865\n[100]\tvalidation_0-mlogloss:0.50006\n[200]\tvalidation_0-mlogloss:0.24384\n[300]\tvalidation_0-mlogloss:0.15058\n[400]\tvalidation_0-mlogloss:0.09869\n[500]\tvalidation_0-mlogloss:0.06634\n[600]\tvalidation_0-mlogloss:0.05044\n[700]\tvalidation_0-mlogloss:0.04078\n[800]\tvalidation_0-mlogloss:0.03540\n[900]\tvalidation_0-mlogloss:0.03234\n[1000]\tvalidation_0-mlogloss:0.03028\n[1100]\tvalidation_0-mlogloss:0.02864\n[1200]\tvalidation_0-mlogloss:0.02746\n[1300]\tvalidation_0-mlogloss:0.02656\n[1400]\tvalidation_0-mlogloss:0.02585\n[1500]\tvalidation_0-mlogloss:0.02537\n[1600]\tvalidation_0-mlogloss:0.02474\n[1700]\tvalidation_0-mlogloss:0.02427\n[1800]\tvalidation_0-mlogloss:0.02373\n[1900]\tvalidation_0-mlogloss:0.02330\n[1999]\tvalidation_0-mlogloss:0.02295\n#########################\n### Fold 4\n#########################\n[0]\tvalidation_0-mlogloss:1.36923\n[100]\tvalidation_0-mlogloss:0.53692\n[200]\tvalidation_0-mlogloss:0.28844\n[300]\tvalidation_0-mlogloss:0.19325\n[400]\tvalidation_0-mlogloss:0.14089\n[500]\tvalidation_0-mlogloss:0.11569\n[600]\tvalidation_0-mlogloss:0.09707\n[700]\tvalidation_0-mlogloss:0.08434\n[800]\tvalidation_0-mlogloss:0.07444\n[900]\tvalidation_0-mlogloss:0.06808\n[1000]\tvalidation_0-mlogloss:0.06390\n[1100]\tvalidation_0-mlogloss:0.05985\n[1200]\tvalidation_0-mlogloss:0.05687\n[1300]\tvalidation_0-mlogloss:0.05392\n[1400]\tvalidation_0-mlogloss:0.05179\n[1500]\tvalidation_0-mlogloss:0.04995\n[1600]\tvalidation_0-mlogloss:0.04847\n[1700]\tvalidation_0-mlogloss:0.04721\n[1800]\tvalidation_0-mlogloss:0.04584\n[1900]\tvalidation_0-mlogloss:0.04486\n[1999]\tvalidation_0-mlogloss:0.04394\n#########################\n### Fold 5\n#########################\n[0]\tvalidation_0-mlogloss:1.36741\n[100]\tvalidation_0-mlogloss:0.45144\n[200]\tvalidation_0-mlogloss:0.18911\n[300]\tvalidation_0-mlogloss:0.09095\n[400]\tvalidation_0-mlogloss:0.05025\n[500]\tvalidation_0-mlogloss:0.02937\n[600]\tvalidation_0-mlogloss:0.01904\n[700]\tvalidation_0-mlogloss:0.01400\n[800]\tvalidation_0-mlogloss:0.01110\n[900]\tvalidation_0-mlogloss:0.00932\n[1000]\tvalidation_0-mlogloss:0.00822\n[1100]\tvalidation_0-mlogloss:0.00745\n[1200]\tvalidation_0-mlogloss:0.00687\n[1300]\tvalidation_0-mlogloss:0.00639\n[1400]\tvalidation_0-mlogloss:0.00594\n[1500]\tvalidation_0-mlogloss:0.00567\n[1600]\tvalidation_0-mlogloss:0.00541\n[1700]\tvalidation_0-mlogloss:0.00518\n[1800]\tvalidation_0-mlogloss:0.00497\n[1900]\tvalidation_0-mlogloss:0.00480\n[1999]\tvalidation_0-mlogloss:0.00463\n#########################\n### Fold 6\n#########################\n[0]\tvalidation_0-mlogloss:1.36785\n[100]\tvalidation_0-mlogloss:0.47722\n[200]\tvalidation_0-mlogloss:0.20047\n[300]\tvalidation_0-mlogloss:0.09413\n[400]\tvalidation_0-mlogloss:0.05070\n[500]\tvalidation_0-mlogloss:0.03152\n[600]\tvalidation_0-mlogloss:0.02284\n[700]\tvalidation_0-mlogloss:0.01869\n[800]\tvalidation_0-mlogloss:0.01637\n[900]\tvalidation_0-mlogloss:0.01526\n[1000]\tvalidation_0-mlogloss:0.01449\n[1100]\tvalidation_0-mlogloss:0.01396\n[1200]\tvalidation_0-mlogloss:0.01365\n[1300]\tvalidation_0-mlogloss:0.01330\n[1400]\tvalidation_0-mlogloss:0.01308\n[1500]\tvalidation_0-mlogloss:0.01292\n[1600]\tvalidation_0-mlogloss:0.01273\n[1700]\tvalidation_0-mlogloss:0.01257\n[1759]\tvalidation_0-mlogloss:0.01254\n#########################\n### Fold 7\n#########################\n[0]\tvalidation_0-mlogloss:1.36775\n[100]\tvalidation_0-mlogloss:0.46603\n[200]\tvalidation_0-mlogloss:0.20107\n[300]\tvalidation_0-mlogloss:0.10445\n[400]\tvalidation_0-mlogloss:0.06609\n[500]\tvalidation_0-mlogloss:0.05011\n[600]\tvalidation_0-mlogloss:0.04342\n[700]\tvalidation_0-mlogloss:0.04102\n[800]\tvalidation_0-mlogloss:0.04033\n[835]\tvalidation_0-mlogloss:0.04033\n#########################\n### Fold 8\n#########################\n[0]\tvalidation_0-mlogloss:1.36885\n[100]\tvalidation_0-mlogloss:0.51296\n[200]\tvalidation_0-mlogloss:0.25534\n[300]\tvalidation_0-mlogloss:0.15718\n[400]\tvalidation_0-mlogloss:0.11282\n[500]\tvalidation_0-mlogloss:0.08734\n[600]\tvalidation_0-mlogloss:0.07256\n[700]\tvalidation_0-mlogloss:0.06309\n[800]\tvalidation_0-mlogloss:0.05682\n[900]\tvalidation_0-mlogloss:0.05290\n[1000]\tvalidation_0-mlogloss:0.05052\n[1100]\tvalidation_0-mlogloss:0.04875\n[1200]\tvalidation_0-mlogloss:0.04744\n[1300]\tvalidation_0-mlogloss:0.04632\n[1400]\tvalidation_0-mlogloss:0.04538\n[1500]\tvalidation_0-mlogloss:0.04461\n[1600]\tvalidation_0-mlogloss:0.04395\n[1700]\tvalidation_0-mlogloss:0.04346\n[1800]\tvalidation_0-mlogloss:0.04288\n[1900]\tvalidation_0-mlogloss:0.04230\n[1999]\tvalidation_0-mlogloss:0.04185\n#########################\n### Fold 9\n#########################\n[0]\tvalidation_0-mlogloss:1.36729\n[100]\tvalidation_0-mlogloss:0.44596\n[200]\tvalidation_0-mlogloss:0.17945\n[300]\tvalidation_0-mlogloss:0.08802\n[400]\tvalidation_0-mlogloss:0.04994\n[500]\tvalidation_0-mlogloss:0.02990\n[600]\tvalidation_0-mlogloss:0.02046\n[700]\tvalidation_0-mlogloss:0.01605\n[800]\tvalidation_0-mlogloss:0.01349\n[900]\tvalidation_0-mlogloss:0.01200\n[1000]\tvalidation_0-mlogloss:0.01111\n[1100]\tvalidation_0-mlogloss:0.01040\n[1200]\tvalidation_0-mlogloss:0.00997\n[1300]\tvalidation_0-mlogloss:0.00970\n[1400]\tvalidation_0-mlogloss:0.00947\n[1500]\tvalidation_0-mlogloss:0.00927\n[1600]\tvalidation_0-mlogloss:0.00908\n[1661]\tvalidation_0-mlogloss:0.00899\n#########################\n### Fold 10\n#########################\n[0]\tvalidation_0-mlogloss:1.36740\n[100]\tvalidation_0-mlogloss:0.45329\n[200]\tvalidation_0-mlogloss:0.18280\n[300]\tvalidation_0-mlogloss:0.08750\n[400]\tvalidation_0-mlogloss:0.05047\n","output_type":"stream"}],"execution_count":null},{"cell_type":"code","source":"oof = np.argmax(oof, axis=1)\nf1_score(y, oof, average=None)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"f1_score(y, oof, average=\"macro\")","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"pred = np.argmax(pred, axis=1)\ndata = {\"ID\": test_id, \"Target\": pred}\nsubmission = pd.DataFrame(data)\nsubmission[\"Target\"] = submission[\"Target\"].map({0: \"NORAIN\", 1: \"SMALLRAIN\", 2: \"MEDIUMRAIN\", 3: \"HEAVYRAIN\"})\nsubmission.to_csv(\"submission.csv\", index=False)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# def target_encode(train, valid, test, col, target=\"Target\", kfold=5, smooth=20, agg=\"mean\"):\n\n#     train['kfold'] = ((train.index) % kfold)\n#     col_name = '_'.join(col)\n#     train[f'TE_{agg.upper()}_' + col_name] = 0.\n#     for i in range(kfold):\n        \n#         df_tmp = train[train['kfold']!=i]\n#         if agg==\"mean\": mn = df_tmp[target].mean()\n#         elif agg==\"median\": mn = df_tmp[target].median()\n#         elif agg==\"min\": mn = df_tmp[target].min()\n#         elif agg==\"max\": mn = df_tmp[target].max()\n#         elif agg==\"nunique\": mn = 0\n#         df_tmp = df_tmp[col + [target]].groupby(col).agg([agg, 'count']).reset_index()\n#         df_tmp.columns = col + [agg, 'count']\n#         if agg==\"nunique\":\n#             df_tmp['TE_tmp'] = df_tmp[agg] / df_tmp['count']\n#         else: \n#             df_tmp['TE_tmp'] = ((df_tmp[agg]*df_tmp['count'])+(mn*smooth)) / (df_tmp['count']+smooth)\n#         df_tmp_m = train[col + ['kfold', f'TE_{agg.upper()}_' + col_name]].merge(df_tmp, how='left', left_on=col, right_on=col)\n#         df_tmp_m.loc[df_tmp_m['kfold']==i, f'TE_{agg.upper()}_' + col_name] = df_tmp_m.loc[df_tmp_m['kfold']==i, 'TE_tmp']\n#         train[f'TE_{agg.upper()}_' + col_name] = df_tmp_m[f'TE_{agg.upper()}_' + col_name].fillna(mn).values  \n    \n#     df_tmp = train[col + [target]].groupby(col).agg([agg, 'count']).reset_index()\n#     if agg==\"mean\": mn = train[target].mean()\n#     elif agg==\"median\": mn = train[target].median()\n#     elif agg==\"min\": mn = train[target].min()\n#     elif agg==\"max\": mn = train[target].max()\n#     elif agg==\"nunique\": mn = 0\n#     df_tmp.columns = col + [agg, 'count']\n#     if agg==\"nunique\":\n#         df_tmp['TE_tmp'] = df_tmp[agg] / df_tmp['count']\n#     else:\n#         df_tmp['TE_tmp'] = ((df_tmp[agg]*df_tmp['count'])+(mn*smooth)) / (df_tmp['count']+smooth)\n#     df_tmp_m = valid[col].merge(df_tmp, how='left', left_on=col, right_on=col)\n#     valid[f'TE_{agg.upper()}_' + col_name] = df_tmp_m['TE_tmp'].fillna(mn).values\n#     valid[f'TE_{agg.upper()}_' + col_name] = valid[f'TE_{agg.upper()}_' + col_name].astype(\"float32\")\n\n#     df_tmp_m = test[col].merge(df_tmp, how='left', left_on=col, right_on=col)\n#     test[f'TE_{agg.upper()}_' + col_name] = df_tmp_m['TE_tmp'].fillna(mn).values\n#     test[f'TE_{agg.upper()}_' + col_name] = test[f'TE_{agg.upper()}_' + col_name].astype(\"float32\")\n\n#     train = train.drop('kfold', axis=1)\n#     train[f'TE_{agg.upper()}_' + col_name] = train[f'TE_{agg.upper()}_' + col_name].astype(\"float32\")\n\n#     return (train, valid, test)","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}