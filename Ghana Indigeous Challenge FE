{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":12806871,"sourceType":"datasetVersion","datasetId":8097839}],"dockerImageVersionId":31090,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %load_ext cudf.pandas","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T20:31:04.775023Z","iopub.execute_input":"2025-10-09T20:31:04.775300Z","iopub.status.idle":"2025-10-09T20:31:04.781243Z","shell.execute_reply.started":"2025-10-09T20:31:04.775278Z","shell.execute_reply":"2025-10-09T20:31:04.780307Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"import numpy as np, pandas as pd, itertools\nfrom tqdm import tqdm\nfrom sklearn.model_selection import train_test_split, StratifiedKFold\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.metrics import f1_score\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.ensemble import AdaBoostClassifier, VotingClassifier, RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.base import BaseEstimator, ClassifierMixin\nfrom catboost import CatBoostClassifier, Pool","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T20:31:04.783169Z","iopub.execute_input":"2025-10-09T20:31:04.783446Z","iopub.status.idle":"2025-10-09T20:31:07.885707Z","shell.execute_reply.started":"2025-10-09T20:31:04.783423Z","shell.execute_reply":"2025-10-09T20:31:07.884677Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"pd.set_option('display.max_columns', 500)\nRANDOM_STATE = 44","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T20:31:07.886519Z","iopub.execute_input":"2025-10-09T20:31:07.887098Z","iopub.status.idle":"2025-10-09T20:31:07.892252Z","shell.execute_reply.started":"2025-10-09T20:31:07.887074Z","shell.execute_reply":"2025-10-09T20:31:07.891182Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"train_path = \"/kaggle/input/indigenous-knowledge/train (1).csv\"\ntest_path = \"/kaggle/input/indigenous-knowledge/test.csv\"","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T20:31:07.893204Z","iopub.execute_input":"2025-10-09T20:31:07.893520Z","iopub.status.idle":"2025-10-09T20:31:07.916185Z","shell.execute_reply.started":"2025-10-09T20:31:07.893491Z","shell.execute_reply":"2025-10-09T20:31:07.915135Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"train = pd.read_csv(train_path)\ntrain[\"prediction_time\"] = pd.to_datetime( train[\"prediction_time\"] )\ntrain[\"month\"] = train[\"prediction_time\"].dt.month.astype(\"float32\")\ntrain[\"day\"] = train[\"prediction_time\"].dt.day.astype(\"float32\")\ntrain[\"hour\"] = train[\"prediction_time\"].dt.hour.astype(\"float32\")\ntrain[\"pred_date\"] = train[\"prediction_time\"].dt.date.astype(\"str\")\ntrain[\"dow\"] = train[\"prediction_time\"].dt.dayofweek.astype(\"float32\")\ntrain[\"temp\"] = train[\"predicted_intensity\"].map({0: 0, 0.33: 1, 0.66: 2, 1: 3}).astype(\"int32\")\ny = train[\"Target\"].map({\"NORAIN\": 0, \"SMALLRAIN\": 1, \"MEDIUMRAIN\": 2, \"HEAVYRAIN\": 3}).astype(\"int32\")\n# train[\"prediction_correct\"] = ( train[\"temp\"] == y ).astype(\"int32\")\ntrain = train.drop(columns=[\"ID\", \"prediction_time\", \"Target\", \"temp\"])\nprint( train.shape )\ntrain.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T20:31:07.917143Z","iopub.execute_input":"2025-10-09T20:31:07.917415Z","iopub.status.idle":"2025-10-09T20:31:08.027580Z","shell.execute_reply.started":"2025-10-09T20:31:07.917393Z","shell.execute_reply":"2025-10-09T20:31:08.026546Z"}},"outputs":[{"name":"stdout","text":"(10928, 14)\n","output_type":"stream"},{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"   user_id  confidence  predicted_intensity community    district indicator  \\\n0       11         0.3                  0.0    Tumfa   atiwa_west       NaN   \n1       17         0.3                  0.0  Kwabeng   atiwa_west       NaN   \n2       19         0.3                  0.0  Akropong  atiwa_west       NaN   \n3       23         0.3                  0.0   Asamama  atiwa_west       NaN   \n4       23         0.3                  0.0   Asamama  atiwa_west       NaN   \n\n  indicator_description time_observed  forecast_length  month   day  hour  \\\n0                   NaN           NaN               12    5.0  30.0  11.0   \n1                   NaN           NaN               12    5.0  30.0  11.0   \n2                   NaN           NaN               12    5.0  30.0  11.0   \n3                   NaN           NaN               12    5.0  30.0  11.0   \n4                   NaN           NaN               12    5.0  30.0  11.0   \n\n    pred_date  dow  \n0  2025-05-30  4.0  \n1  2025-05-30  4.0  \n2  2025-05-30  4.0  \n3  2025-05-30  4.0  \n4  2025-05-30  4.0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>user_id</th>\n      <th>confidence</th>\n      <th>predicted_intensity</th>\n      <th>community</th>\n      <th>district</th>\n      <th>indicator</th>\n      <th>indicator_description</th>\n      <th>time_observed</th>\n      <th>forecast_length</th>\n      <th>month</th>\n      <th>day</th>\n      <th>hour</th>\n      <th>pred_date</th>\n      <th>dow</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>11</td>\n      <td>0.3</td>\n      <td>0.0</td>\n      <td>Tumfa</td>\n      <td>atiwa_west</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>12</td>\n      <td>5.0</td>\n      <td>30.0</td>\n      <td>11.0</td>\n      <td>2025-05-30</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>17</td>\n      <td>0.3</td>\n      <td>0.0</td>\n      <td>Kwabeng</td>\n      <td>atiwa_west</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>12</td>\n      <td>5.0</td>\n      <td>30.0</td>\n      <td>11.0</td>\n      <td>2025-05-30</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>19</td>\n      <td>0.3</td>\n      <td>0.0</td>\n      <td>Akropong</td>\n      <td>atiwa_west</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>12</td>\n      <td>5.0</td>\n      <td>30.0</td>\n      <td>11.0</td>\n      <td>2025-05-30</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>23</td>\n      <td>0.3</td>\n      <td>0.0</td>\n      <td>Asamama</td>\n      <td>atiwa_west</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>12</td>\n      <td>5.0</td>\n      <td>30.0</td>\n      <td>11.0</td>\n      <td>2025-05-30</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>23</td>\n      <td>0.3</td>\n      <td>0.0</td>\n      <td>Asamama</td>\n      <td>atiwa_west</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>12</td>\n      <td>5.0</td>\n      <td>30.0</td>\n      <td>11.0</td>\n      <td>2025-05-30</td>\n      <td>4.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":5},{"cell_type":"code","source":"test = pd.read_csv(test_path)\ntest[\"prediction_time\"] = pd.to_datetime( test[\"prediction_time\"] )\ntest[\"month\"] = test[\"prediction_time\"].dt.month.astype(\"float32\")\ntest[\"day\"] = test[\"prediction_time\"].dt.day.astype(\"float32\")\ntest[\"hour\"] = test[\"prediction_time\"].dt.hour.astype(\"float32\")\ntest[\"pred_date\"] = test[\"prediction_time\"].dt.date.astype(\"str\")\ntest[\"dow\"] = test[\"prediction_time\"].dt.dayofweek.astype(\"float32\")\ntest_id = test[\"ID\"]\ntest = test.drop(columns=[\"ID\", \"prediction_time\"])\nprint( test.shape )\ntest.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T20:31:08.030600Z","iopub.execute_input":"2025-10-09T20:31:08.030915Z","iopub.status.idle":"2025-10-09T20:31:08.076556Z","shell.execute_reply.started":"2025-10-09T20:31:08.030890Z","shell.execute_reply":"2025-10-09T20:31:08.075810Z"}},"outputs":[{"name":"stdout","text":"(2732, 14)\n","output_type":"stream"},{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"   user_id  confidence  predicted_intensity         community    district  \\\n0       77         0.3                  0.0  ASSIN BROFOYEDUR  assin_fosu   \n1       77         0.3                  0.0  ASSIN BROFOYEDUR  assin_fosu   \n2       77         0.3                  0.0  ASSIN BROFOYEDUR  assin_fosu   \n3       77         0.3                  0.0  ASSIN BROFOYEDUR  assin_fosu   \n4       77         0.3                  0.0  ASSIN BROFOYEDUR  assin_fosu   \n\n  indicator indicator_description time_observed  forecast_length  month   day  \\\n0       NaN                   NaN           NaN               24    7.0  20.0   \n1       NaN                   NaN           NaN               24    7.0  20.0   \n2       NaN                   NaN           NaN               24    7.0  20.0   \n3       NaN                   NaN           NaN               24    7.0  20.0   \n4       NaN                   NaN           NaN               24    7.0  20.0   \n\n   hour   pred_date  dow  \n0  19.0  2025-07-20  6.0  \n1  19.0  2025-07-20  6.0  \n2  19.0  2025-07-20  6.0  \n3  19.0  2025-07-20  6.0  \n4  19.0  2025-07-20  6.0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>user_id</th>\n      <th>confidence</th>\n      <th>predicted_intensity</th>\n      <th>community</th>\n      <th>district</th>\n      <th>indicator</th>\n      <th>indicator_description</th>\n      <th>time_observed</th>\n      <th>forecast_length</th>\n      <th>month</th>\n      <th>day</th>\n      <th>hour</th>\n      <th>pred_date</th>\n      <th>dow</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>77</td>\n      <td>0.3</td>\n      <td>0.0</td>\n      <td>ASSIN BROFOYEDUR</td>\n      <td>assin_fosu</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>24</td>\n      <td>7.0</td>\n      <td>20.0</td>\n      <td>19.0</td>\n      <td>2025-07-20</td>\n      <td>6.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>77</td>\n      <td>0.3</td>\n      <td>0.0</td>\n      <td>ASSIN BROFOYEDUR</td>\n      <td>assin_fosu</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>24</td>\n      <td>7.0</td>\n      <td>20.0</td>\n      <td>19.0</td>\n      <td>2025-07-20</td>\n      <td>6.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>77</td>\n      <td>0.3</td>\n      <td>0.0</td>\n      <td>ASSIN BROFOYEDUR</td>\n      <td>assin_fosu</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>24</td>\n      <td>7.0</td>\n      <td>20.0</td>\n      <td>19.0</td>\n      <td>2025-07-20</td>\n      <td>6.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>77</td>\n      <td>0.3</td>\n      <td>0.0</td>\n      <td>ASSIN BROFOYEDUR</td>\n      <td>assin_fosu</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>24</td>\n      <td>7.0</td>\n      <td>20.0</td>\n      <td>19.0</td>\n      <td>2025-07-20</td>\n      <td>6.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>77</td>\n      <td>0.3</td>\n      <td>0.0</td>\n      <td>ASSIN BROFOYEDUR</td>\n      <td>assin_fosu</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>24</td>\n      <td>7.0</td>\n      <td>20.0</td>\n      <td>19.0</td>\n      <td>2025-07-20</td>\n      <td>6.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":6},{"cell_type":"code","source":"train = train.fillna(\"missing\")\ntest = test.fillna(\"missing\")\ntrain = train.drop(columns=[\"indicator_description\", \"time_observed\"])\ntest = test.drop(columns=[\"indicator_description\", \"time_observed\"])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T20:31:08.077380Z","iopub.execute_input":"2025-10-09T20:31:08.077666Z","iopub.status.idle":"2025-10-09T20:31:08.095172Z","shell.execute_reply.started":"2025-10-09T20:31:08.077645Z","shell.execute_reply":"2025-10-09T20:31:08.093909Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"# one_hot_cols = [\"community\", \"district\", \"indicator\", \"pred_date\"]\n# other_cols = [\"user_id\", \"confidence\", \"predicted_intensity\",\n#               \"forecast_length\", \"month\", \"day\", \"hour\", \"dow\"]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T20:31:08.096014Z","iopub.execute_input":"2025-10-09T20:31:08.096338Z","iopub.status.idle":"2025-10-09T20:31:08.105932Z","shell.execute_reply.started":"2025-10-09T20:31:08.096312Z","shell.execute_reply":"2025-10-09T20:31:08.104754Z"}},"outputs":[],"execution_count":8},{"cell_type":"code","source":"# combined = pd.concat([train, test], axis=0, ignore_index=True)\n\n# for c in combined.columns:\n#     if combined[c].dtype == \"object\":\n#         if c in [\"community\", \"indicator\", \"indicator_description\", \"time_observed\"]:\n#             combined[c] = combined[c].str.lower().str.strip().str.replace(r\"\\s+\", \" \", regex=True)\n#         combined[c], _ = combined[c].factorize()\n#         combined[c] = combined[c].astype(\"int32\")\n#     elif combined[c].dtype == \"int64\": \n#         combined[c] = combined[c].astype(\"int32\")\n#     elif combined[c].dtype == \"float64\":\n#         combined[c] = combined[c].astype(\"float32\")\n# train = combined[:len(train)].copy()\n# test = combined[len(train):].reset_index(drop=True).copy()\n# del combined","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T20:31:08.106844Z","iopub.execute_input":"2025-10-09T20:31:08.107192Z","iopub.status.idle":"2025-10-09T20:31:08.126000Z","shell.execute_reply.started":"2025-10-09T20:31:08.107159Z","shell.execute_reply":"2025-10-09T20:31:08.124914Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"# ohe = OneHotEncoder(sparse_output=False, handle_unknown=\"ignore\")\n# train_ohe = ohe.fit_transform(train[one_hot_cols])\n# columns_ohe = ohe.get_feature_names_out()\n# train_ohe = pd.DataFrame(train_ohe, columns=columns_ohe)\n# train = pd.concat([train_ohe, train[other_cols]], axis=1)\n# # train[\"Target\"] = y\n# test_ohe = ohe.transform(test[one_hot_cols])\n# test_ohe = pd.DataFrame(test_ohe, columns=columns_ohe)\n# test = pd.concat([test_ohe, test[other_cols]], axis=1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T20:31:08.127223Z","iopub.execute_input":"2025-10-09T20:31:08.127897Z","iopub.status.idle":"2025-10-09T20:31:08.151662Z","shell.execute_reply.started":"2025-10-09T20:31:08.127861Z","shell.execute_reply":"2025-10-09T20:31:08.150558Z"}},"outputs":[],"execution_count":10},{"cell_type":"code","source":"# def knn_encoding(train, test, cols, target=\"Target\"):\n#     def euclidean_distance(X_1, X_2):\n#         return sum([ (x_1 - x_2)**2 for x_1, x_2 in zip(X_1, X_2)])**0.5\n#     correct_predictions = train.loc[train[\"prediction_correct\"]==1].copy()\n#     wrong_predictions = train.loc[train[\"prediction_correct\"]==0].copy()\n\n#     correct_predictions = correct_predictions.groupby(target)[cols].mean()\n#     wrong_predictions = wrong_predictions.groupby(target)[cols].mean()\n\n#     correct_encoding = [[], [], [], []]\n#     wrong_encoding = [[], [], [], []]\n\n#     for _, t_rows in tqdm(train[cols].iterrows(), total=len(train), desc=\"Processing train rows\"):\n#         for i, c_rows in correct_predictions.iterrows():\n#             correct_encoding[i].append(euclidean_distance(t_rows, c_rows))\n#         for i, w_rows in wrong_predictions.iterrows():\n#             wrong_encoding[i].append(euclidean_distance(t_rows, w_rows))\n\n#     c_df = pd.DataFrame(correct_encoding).T\n#     c_df.columns = [\"knn_encoding_c_0\", \"knn_encoding_c_1\", \"knn_encoding_c_2\", \"knn_encoding_c_3\"]\n#     w_df = pd.DataFrame(wrong_encoding).T\n#     w_df.columns = [\"knn_encoding_w_0\", \"knn_encoding_w_1\", \"knn_encoding_w_2\", \"knn_encoding_w_3\"]\n#     train = c_df.join(w_df)\n\n#     correct_encoding = [[], [], [], []]\n#     wrong_encoding = [[], [], [], []]\n\n#     for _, t_rows in tqdm(test[cols].iterrows(), total=len(test), desc=\"Processing test rows\"):\n#         for i, c_rows in correct_predictions.iterrows():\n#             correct_encoding[i].append(euclidean_distance(t_rows, c_rows))\n#         for i, w_rows in wrong_predictions.iterrows():\n#             wrong_encoding[i].append(euclidean_distance(t_rows, w_rows))\n\n#     c_df = pd.DataFrame(correct_encoding).T\n#     c_df.columns = [\"knn_encoding_c_0\", \"knn_encoding_c_1\", \"knn_encoding_c_2\", \"knn_encoding_c_3\"]\n#     w_df = pd.DataFrame(wrong_encoding).T\n#     w_df.columns = [\"knn_encoding_w_0\", \"knn_encoding_w_1\", \"knn_encoding_w_2\", \"knn_encoding_w_3\"]\n#     test = c_df.join(w_df)\n\n#     return (train, test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T20:31:08.153886Z","iopub.execute_input":"2025-10-09T20:31:08.154191Z","iopub.status.idle":"2025-10-09T20:31:08.174752Z","shell.execute_reply.started":"2025-10-09T20:31:08.154169Z","shell.execute_reply":"2025-10-09T20:31:08.173535Z"}},"outputs":[],"execution_count":11},{"cell_type":"code","source":"# cols_encode = list(columns_ohe)+other_cols[:-1]\n# train_encoded, test_encoded = knn_encoding(train, test, cols_encode)\n# train = pd.concat([train[cols_encode], train_encoded], axis=1)\n# test = pd.concat([test[cols_encode], test_encoded], axis=1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T20:31:08.175891Z","iopub.execute_input":"2025-10-09T20:31:08.176174Z","iopub.status.idle":"2025-10-09T20:31:08.199893Z","shell.execute_reply.started":"2025-10-09T20:31:08.176152Z","shell.execute_reply":"2025-10-09T20:31:08.198759Z"}},"outputs":[],"execution_count":12},{"cell_type":"code","source":"# skf = StratifiedKFold(n_splits=5, shuffle=True, random_state=RANDOM_STATE)\n# def target_encode(train, test, col, target=\"Target\", kfold=skf, smooth=30):\n    \n#     train = train.reset_index(drop=True)\n#     test = test.reset_index(drop=True)\n    \n#     for train_index, test_index in skf.split(train, train[target]):\n        \n#         df_tmp = train.loc[train_index].copy()\n#         mn = df_tmp[target].value_counts(normalize=True)\n#         df_tmp_probs = df_tmp.groupby(col)[target].value_counts(normalize=True).unstack(fill_value=0)\n#         df_tmp_counts = df_tmp.groupby(col)[target].count()\n#         df_tmp = df_tmp_probs.join(df_tmp_counts.rename(\"count\")).reset_index()\n        \n#         new_cols = []\n#         for c in df_tmp.columns:\n#             if c not in [\"count\", col]:\n#                 name = 'TE_'+str(c)+\"_\"+col\n#                 new_cols.append(name)\n#                 df_tmp[name] = ((df_tmp[c]*df_tmp[\"count\"])+(mn.iloc[c]*smooth)) / (df_tmp[\"count\"]+smooth)\n                \n#         df_tmp_m = train[[col]].merge(df_tmp, how='left', left_on=col, right_on=col)\n#         df_tmp_m.loc[test_index, new_cols] = df_tmp_m.loc[test_index, new_cols]\n        \n#         for c in new_cols:\n#             i = int(c.split(\"_\")[1])\n#             train[c] = df_tmp_m[c].fillna(mn.iloc[i]).values \n#             train[c] = train[c].astype(\"float32\")\n    \n#     df_tmp_probs = train.groupby(col)[target].value_counts(normalize=True).unstack(fill_value=0)\n#     df_tmp_counts = train.groupby(col)[target].count()\n#     df_tmp = df_tmp_probs.join(df_tmp_counts.rename(\"count\")).reset_index()\n#     mn = train[target].value_counts(normalize=True)\n    \n#     for c in df_tmp.columns:\n#         if c not in [\"count\", col]:\n#             name = 'TE_'+str(c)+\"_\"+col\n#             df_tmp[name] = ((df_tmp[c]*df_tmp[\"count\"])+(mn.iloc[c]*smooth)) / (df_tmp[\"count\"]+smooth)\n\n#     df_tmp_m = test[[col]].merge(df_tmp, how='left', left_on=col, right_on=col)\n#     for c in new_cols:\n#         i = int(c.split(\"_\")[1])\n#         test[c] = df_tmp_m[c].fillna(mn.iloc[i]).values\n#         test[c] = test[c].astype(\"float32\")\n        \n#     train = train.drop(columns=[c])\n#     test = test.drop(columns=[c])\n    \n#     return (train, test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T20:31:08.201129Z","iopub.execute_input":"2025-10-09T20:31:08.201712Z","iopub.status.idle":"2025-10-09T20:31:08.220229Z","shell.execute_reply.started":"2025-10-09T20:31:08.201675Z","shell.execute_reply":"2025-10-09T20:31:08.218988Z"}},"outputs":[],"execution_count":13},{"cell_type":"code","source":"# for c in one_hot_cols:\n#     train, test = target_encode(train, test, c)\n# train = train.drop(columns=[\"Target\"])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T20:31:08.221381Z","iopub.execute_input":"2025-10-09T20:31:08.221663Z","iopub.status.idle":"2025-10-09T20:31:08.246104Z","shell.execute_reply.started":"2025-10-09T20:31:08.221636Z","shell.execute_reply":"2025-10-09T20:31:08.244949Z"}},"outputs":[],"execution_count":14},{"cell_type":"code","source":"# class PretrainedModelWrapper(BaseEstimator, ClassifierMixin):\n#     def __init__(self, model):\n#         self.model = model\n#     def fit(self, X, y):\n#         # Do nothing, model already trained\n#         return self\n#     def predict_proba(self, X):\n#         return self.model.predict_proba(X)\n#     def predict(self, X):\n#         return self.model.predict(X)\n#     def get_params(self, deep=True):\n#         return {\"model\": self.model}\n    \n#     def set_params(self, **params):\n#         return self","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T20:31:08.247562Z","iopub.execute_input":"2025-10-09T20:31:08.248203Z","iopub.status.idle":"2025-10-09T20:31:08.271363Z","shell.execute_reply.started":"2025-10-09T20:31:08.248170Z","shell.execute_reply":"2025-10-09T20:31:08.270151Z"}},"outputs":[],"execution_count":15},{"cell_type":"code","source":"import xgboost as xgb, time\nprint(f\"Using XGBoost version\",xgb.__version__)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T20:31:08.272461Z","iopub.execute_input":"2025-10-09T20:31:08.272825Z","iopub.status.idle":"2025-10-09T20:31:08.292259Z","shell.execute_reply.started":"2025-10-09T20:31:08.272791Z","shell.execute_reply":"2025-10-09T20:31:08.291238Z"}},"outputs":[{"name":"stdout","text":"Using XGBoost version 2.0.3\n","output_type":"stream"}],"execution_count":16},{"cell_type":"code","source":"%%time\n\nFOLDS = 20\nskf2 = StratifiedKFold(n_splits=FOLDS, shuffle=True, random_state=RANDOM_STATE)\n\noof = np.zeros((len(train), 4))\npred = np.zeros((len(test), 4))\n\ncategorical_cols = [\"community\", \"district\", \"indicator\", \"pred_date\"]\n\nfor i, (train_index, test_index) in enumerate(skf2.split(train, y)):\n\n    print(\"#\"*25)\n    print(f\"### Fold {i+1}\")\n    print(\"#\"*25)\n    \n    x_train = train.loc[train_index].copy()\n    y_train = y.loc[train_index].copy()\n    x_valid = train.loc[test_index].copy()\n    y_valid = y.loc[test_index].copy()\n    x_test = test.copy()\n\n    train_pool = Pool(x_train, y_train, cat_features=categorical_cols)\n    valid_pool = Pool(x_valid, y_valid, cat_features=categorical_cols)\n    test_pool = Pool(x_test, cat_features=categorical_cols)\n    \n    cat = CatBoostClassifier(\n        iterations=2000,\n        learning_rate=0.01,\n        depth=10,\n        eval_metric='MultiClass',\n        loss_function='MultiClass',\n        random_seed=RANDOM_STATE,\n        early_stopping_rounds=25,\n        verbose=100\n    )\n    cat.fit(train_pool, eval_set=valid_pool, use_best_model=True)\n\n    # xgb = XGBClassifier(\n    #     random_state=RANDOM_STATE,\n    #     max_depth=10, \n    #     colsample_bytree=0.9, \n    #     subsample=0.9, \n    #     n_estimators=2000, \n    #     learning_rate=0.01, \n    #     num_class=4,\n    #     early_stopping_rounds=25,\n    #     objective=\"multi:softprob\",\n    #     eval_metric=\"mlogloss\"\n    # )\n    \n    # xgb.fit(\n    #     x_train, y_train,\n    #     eval_set=[(x_valid, y_valid)],\n    #     verbose=100\n    # )\n\n    # INFER OOF\n    oof[test_index] = cat.predict_proba(valid_pool)\n\n    # INFER TEST\n    pred += cat.predict_proba(test_pool)\n\n# COMPUTE AVERAGE TEST PREDS\npred /= FOLDS","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T20:31:08.293315Z","iopub.execute_input":"2025-10-09T20:31:08.294104Z"}},"outputs":[{"name":"stdout","text":"#########################\n### Fold 1\n#########################\n0:\tlearn: 1.3623607\ttest: 1.3621373\tbest: 1.3621373 (0)\ttotal: 155ms\tremaining: 5m 9s\n100:\tlearn: 0.4493413\ttest: 0.4422829\tbest: 0.4422829 (100)\ttotal: 7.26s\tremaining: 2m 16s\n200:\tlearn: 0.2240740\ttest: 0.2172715\tbest: 0.2172715 (200)\ttotal: 17.8s\tremaining: 2m 39s\n300:\tlearn: 0.1254681\ttest: 0.1182712\tbest: 0.1182712 (300)\ttotal: 29s\tremaining: 2m 43s\n400:\tlearn: 0.0804762\ttest: 0.0722720\tbest: 0.0722720 (400)\ttotal: 40.4s\tremaining: 2m 41s\n500:\tlearn: 0.0597492\ttest: 0.0519597\tbest: 0.0519597 (500)\ttotal: 52.6s\tremaining: 2m 37s\n600:\tlearn: 0.0487354\ttest: 0.0418078\tbest: 0.0418078 (600)\ttotal: 1m 4s\tremaining: 2m 30s\n700:\tlearn: 0.0424960\ttest: 0.0364892\tbest: 0.0364892 (700)\ttotal: 1m 16s\tremaining: 2m 22s\n800:\tlearn: 0.0380768\ttest: 0.0330362\tbest: 0.0330362 (800)\ttotal: 1m 28s\tremaining: 2m 12s\n900:\tlearn: 0.0346901\ttest: 0.0304955\tbest: 0.0304955 (900)\ttotal: 1m 40s\tremaining: 2m 3s\n1000:\tlearn: 0.0320106\ttest: 0.0285406\tbest: 0.0285406 (1000)\ttotal: 1m 53s\tremaining: 1m 53s\n1100:\tlearn: 0.0293829\ttest: 0.0266237\tbest: 0.0266237 (1100)\ttotal: 2m 6s\tremaining: 1m 42s\n1200:\tlearn: 0.0271024\ttest: 0.0250460\tbest: 0.0250460 (1200)\ttotal: 2m 18s\tremaining: 1m 32s\n1300:\tlearn: 0.0251450\ttest: 0.0236454\tbest: 0.0236454 (1300)\ttotal: 2m 31s\tremaining: 1m 21s\n1400:\tlearn: 0.0235709\ttest: 0.0226951\tbest: 0.0226951 (1400)\ttotal: 2m 43s\tremaining: 1m 10s\n1500:\tlearn: 0.0219025\ttest: 0.0214789\tbest: 0.0214789 (1500)\ttotal: 2m 56s\tremaining: 58.6s\n1600:\tlearn: 0.0205201\ttest: 0.0203970\tbest: 0.0203970 (1600)\ttotal: 3m 8s\tremaining: 47s\n1700:\tlearn: 0.0193812\ttest: 0.0196509\tbest: 0.0196509 (1700)\ttotal: 3m 21s\tremaining: 35.4s\n1800:\tlearn: 0.0182311\ttest: 0.0188406\tbest: 0.0188406 (1800)\ttotal: 3m 33s\tremaining: 23.6s\n1900:\tlearn: 0.0172804\ttest: 0.0181587\tbest: 0.0181587 (1900)\ttotal: 3m 46s\tremaining: 11.8s\n1999:\tlearn: 0.0163631\ttest: 0.0174832\tbest: 0.0174832 (1999)\ttotal: 3m 58s\tremaining: 0us\n\nbestTest = 0.01748318947\nbestIteration = 1999\n\n#########################\n### Fold 2\n#########################\n0:\tlearn: 1.3623350\ttest: 1.3623737\tbest: 1.3623737 (0)\ttotal: 92.5ms\tremaining: 3m 4s\n100:\tlearn: 0.4560672\ttest: 0.4564536\tbest: 0.4564536 (100)\ttotal: 6.66s\tremaining: 2m 5s\n200:\tlearn: 0.2242316\ttest: 0.2267252\tbest: 0.2267252 (200)\ttotal: 17.3s\tremaining: 2m 34s\n300:\tlearn: 0.1239021\ttest: 0.1285490\tbest: 0.1285490 (300)\ttotal: 28.9s\tremaining: 2m 43s\n400:\tlearn: 0.0789868\ttest: 0.0831863\tbest: 0.0831863 (400)\ttotal: 41s\tremaining: 2m 43s\n500:\tlearn: 0.0585251\ttest: 0.0624965\tbest: 0.0624965 (500)\ttotal: 53.5s\tremaining: 2m 40s\n600:\tlearn: 0.0482333\ttest: 0.0526131\tbest: 0.0526131 (600)\ttotal: 1m 5s\tremaining: 2m 32s\n700:\tlearn: 0.0420653\ttest: 0.0470002\tbest: 0.0470002 (700)\ttotal: 1m 17s\tremaining: 2m 23s\n800:\tlearn: 0.0378441\ttest: 0.0433853\tbest: 0.0433853 (800)\ttotal: 1m 29s\tremaining: 2m 14s\n900:\tlearn: 0.0346004\ttest: 0.0405697\tbest: 0.0405697 (900)\ttotal: 1m 41s\tremaining: 2m 3s\n1000:\tlearn: 0.0318755\ttest: 0.0381128\tbest: 0.0381128 (1000)\ttotal: 1m 53s\tremaining: 1m 53s\n1100:\tlearn: 0.0295874\ttest: 0.0361594\tbest: 0.0361594 (1100)\ttotal: 2m 5s\tremaining: 1m 42s\n1200:\tlearn: 0.0274312\ttest: 0.0342595\tbest: 0.0342595 (1200)\ttotal: 2m 18s\tremaining: 1m 32s\n1300:\tlearn: 0.0256041\ttest: 0.0328069\tbest: 0.0328069 (1300)\ttotal: 2m 30s\tremaining: 1m 20s\n1400:\tlearn: 0.0238586\ttest: 0.0312617\tbest: 0.0312617 (1400)\ttotal: 2m 42s\tremaining: 1m 9s\n1500:\tlearn: 0.0224674\ttest: 0.0301692\tbest: 0.0301692 (1500)\ttotal: 2m 55s\tremaining: 58.3s\n1600:\tlearn: 0.0210603\ttest: 0.0289373\tbest: 0.0289373 (1600)\ttotal: 3m 7s\tremaining: 46.7s\n1700:\tlearn: 0.0198549\ttest: 0.0281491\tbest: 0.0281398 (1698)\ttotal: 3m 19s\tremaining: 35.1s\n1800:\tlearn: 0.0187268\ttest: 0.0272973\tbest: 0.0272875 (1799)\ttotal: 3m 32s\tremaining: 23.4s\n1900:\tlearn: 0.0177407\ttest: 0.0266602\tbest: 0.0266602 (1900)\ttotal: 3m 44s\tremaining: 11.7s\n1999:\tlearn: 0.0168516\ttest: 0.0260313\tbest: 0.0260303 (1998)\ttotal: 3m 56s\tremaining: 0us\n\nbestTest = 0.02603034644\nbestIteration = 1998\n\nShrink model to first 1999 iterations.\n#########################\n### Fold 3\n#########################\n0:\tlearn: 1.3623344\ttest: 1.3620999\tbest: 1.3620999 (0)\ttotal: 91.1ms\tremaining: 3m 2s\n100:\tlearn: 0.4596350\ttest: 0.4491293\tbest: 0.4491293 (100)\ttotal: 7.02s\tremaining: 2m 12s\n200:\tlearn: 0.2310469\ttest: 0.2174999\tbest: 0.2174999 (200)\ttotal: 16.9s\tremaining: 2m 30s\n300:\tlearn: 0.1271909\ttest: 0.1169541\tbest: 0.1169541 (300)\ttotal: 27.9s\tremaining: 2m 37s\n400:\tlearn: 0.0817531\ttest: 0.0735224\tbest: 0.0735224 (400)\ttotal: 39.2s\tremaining: 2m 36s\n500:\tlearn: 0.0608742\ttest: 0.0545609\tbest: 0.0545609 (500)\ttotal: 51.1s\tremaining: 2m 32s\n600:\tlearn: 0.0505070\ttest: 0.0454826\tbest: 0.0454826 (600)\ttotal: 1m 3s\tremaining: 2m 26s\n700:\tlearn: 0.0441146\ttest: 0.0402791\tbest: 0.0402791 (700)\ttotal: 1m 15s\tremaining: 2m 19s\n800:\tlearn: 0.0400235\ttest: 0.0373638\tbest: 0.0373638 (800)\ttotal: 1m 27s\tremaining: 2m 10s\n900:\tlearn: 0.0365782\ttest: 0.0351440\tbest: 0.0351440 (900)\ttotal: 1m 39s\tremaining: 2m 1s\n1000:\tlearn: 0.0337511\ttest: 0.0333213\tbest: 0.0333213 (1000)\ttotal: 1m 51s\tremaining: 1m 51s\n1100:\tlearn: 0.0312951\ttest: 0.0317448\tbest: 0.0317448 (1100)\ttotal: 2m 4s\tremaining: 1m 41s\n1200:\tlearn: 0.0289678\ttest: 0.0301355\tbest: 0.0301355 (1200)\ttotal: 2m 16s\tremaining: 1m 31s\n1300:\tlearn: 0.0270714\ttest: 0.0289961\tbest: 0.0289961 (1300)\ttotal: 2m 30s\tremaining: 1m 20s\n1400:\tlearn: 0.0252726\ttest: 0.0278363\tbest: 0.0278363 (1400)\ttotal: 2m 42s\tremaining: 1m 9s\n1500:\tlearn: 0.0237980\ttest: 0.0270618\tbest: 0.0270618 (1500)\ttotal: 2m 55s\tremaining: 58.3s\n1600:\tlearn: 0.0223483\ttest: 0.0263253\tbest: 0.0263253 (1600)\ttotal: 3m 7s\tremaining: 46.8s\n1700:\tlearn: 0.0210720\ttest: 0.0257133\tbest: 0.0257130 (1699)\ttotal: 3m 20s\tremaining: 35.2s\n1800:\tlearn: 0.0199746\ttest: 0.0252705\tbest: 0.0252705 (1800)\ttotal: 3m 32s\tremaining: 23.5s\n1900:\tlearn: 0.0189306\ttest: 0.0248184\tbest: 0.0248131 (1897)\ttotal: 3m 44s\tremaining: 11.7s\n1999:\tlearn: 0.0180327\ttest: 0.0244498\tbest: 0.0244498 (1999)\ttotal: 3m 57s\tremaining: 0us\n\nbestTest = 0.02444978463\nbestIteration = 1999\n\n#########################\n### Fold 4\n#########################\n0:\tlearn: 1.3623254\ttest: 1.3623582\tbest: 1.3623582 (0)\ttotal: 96.1ms\tremaining: 3m 12s\n100:\tlearn: 0.4548621\ttest: 0.4533093\tbest: 0.4533093 (100)\ttotal: 6.85s\tremaining: 2m 8s\n200:\tlearn: 0.2260308\ttest: 0.2211803\tbest: 0.2211803 (200)\ttotal: 17.4s\tremaining: 2m 35s\n300:\tlearn: 0.1259750\ttest: 0.1219281\tbest: 0.1219281 (300)\ttotal: 28.4s\tremaining: 2m 40s\n400:\tlearn: 0.0800445\ttest: 0.0772432\tbest: 0.0772432 (400)\ttotal: 39.7s\tremaining: 2m 38s\n500:\tlearn: 0.0591978\ttest: 0.0575046\tbest: 0.0575046 (500)\ttotal: 51.4s\tremaining: 2m 33s\n600:\tlearn: 0.0488696\ttest: 0.0482186\tbest: 0.0482186 (600)\ttotal: 1m 3s\tremaining: 2m 28s\n700:\tlearn: 0.0425880\ttest: 0.0429173\tbest: 0.0429173 (700)\ttotal: 1m 15s\tremaining: 2m 19s\n800:\tlearn: 0.0382746\ttest: 0.0396634\tbest: 0.0396634 (800)\ttotal: 1m 27s\tremaining: 2m 10s\n900:\tlearn: 0.0353086\ttest: 0.0376117\tbest: 0.0376117 (900)\ttotal: 1m 39s\tremaining: 2m\n1000:\tlearn: 0.0327321\ttest: 0.0358904\tbest: 0.0358904 (1000)\ttotal: 1m 50s\tremaining: 1m 50s\n1100:\tlearn: 0.0300869\ttest: 0.0341875\tbest: 0.0341857 (1099)\ttotal: 2m 3s\tremaining: 1m 40s\n1200:\tlearn: 0.0279624\ttest: 0.0326746\tbest: 0.0326746 (1200)\ttotal: 2m 15s\tremaining: 1m 30s\n1300:\tlearn: 0.0262070\ttest: 0.0314943\tbest: 0.0314943 (1300)\ttotal: 2m 28s\tremaining: 1m 19s\n1400:\tlearn: 0.0246571\ttest: 0.0303646\tbest: 0.0303646 (1400)\ttotal: 2m 40s\tremaining: 1m 8s\n1500:\tlearn: 0.0231184\ttest: 0.0293375\tbest: 0.0293375 (1500)\ttotal: 2m 52s\tremaining: 57.4s\n1600:\tlearn: 0.0216670\ttest: 0.0283790\tbest: 0.0283790 (1600)\ttotal: 3m 5s\tremaining: 46.1s\n1700:\tlearn: 0.0204197\ttest: 0.0275271\tbest: 0.0275271 (1700)\ttotal: 3m 17s\tremaining: 34.7s\n1800:\tlearn: 0.0192540\ttest: 0.0266426\tbest: 0.0266426 (1800)\ttotal: 3m 29s\tremaining: 23.2s\n1900:\tlearn: 0.0181968\ttest: 0.0259174\tbest: 0.0259125 (1899)\ttotal: 3m 41s\tremaining: 11.6s\n1999:\tlearn: 0.0172766\ttest: 0.0252855\tbest: 0.0252834 (1998)\ttotal: 3m 54s\tremaining: 0us\n\nbestTest = 0.02528339905\nbestIteration = 1998\n\nShrink model to first 1999 iterations.\n#########################\n### Fold 5\n#########################\n0:\tlearn: 1.3623288\ttest: 1.3623922\tbest: 1.3623922 (0)\ttotal: 93ms\tremaining: 3m 5s\n100:\tlearn: 0.4561839\ttest: 0.4507131\tbest: 0.4507131 (100)\ttotal: 7.1s\tremaining: 2m 13s\n200:\tlearn: 0.2256757\ttest: 0.2125029\tbest: 0.2125029 (200)\ttotal: 17.5s\tremaining: 2m 36s\n300:\tlearn: 0.1251421\ttest: 0.1090171\tbest: 0.1090171 (300)\ttotal: 29s\tremaining: 2m 43s\n400:\tlearn: 0.0797574\ttest: 0.0625481\tbest: 0.0625481 (400)\ttotal: 40.5s\tremaining: 2m 41s\n500:\tlearn: 0.0586269\ttest: 0.0417320\tbest: 0.0417320 (500)\ttotal: 52.6s\tremaining: 2m 37s\n600:\tlearn: 0.0473120\ttest: 0.0318102\tbest: 0.0318102 (600)\ttotal: 1m 4s\tremaining: 2m 30s\n","output_type":"stream"}],"execution_count":null},{"cell_type":"code","source":"oof = np.argmax(oof, axis=1)\nf1_score(y, oof, average=None)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"f1_score(y, oof, average=\"macro\")","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# 0.9864402379685158\n# 0.9872424281615526","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"pred = np.argmax(pred, axis=1)\ndata = {\"ID\": test_id, \"Target\": pred}\nsubmission = pd.DataFrame(data)\nsubmission[\"Target\"] = submission[\"Target\"].map({0: \"NORAIN\", 1: \"SMALLRAIN\", 2: \"MEDIUMRAIN\", 3: \"HEAVYRAIN\"})\nsubmission.to_csv(\"submission.csv\", index=False)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# def target_encode(train, valid, test, col, target=\"Target\", kfold=5, smooth=20, agg=\"mean\"):\n\n#     train['kfold'] = ((train.index) % kfold)\n#     col_name = '_'.join(col)\n#     train[f'TE_{agg.upper()}_' + col_name] = 0.\n#     for i in range(kfold):\n        \n#         df_tmp = train[train['kfold']!=i]\n#         if agg==\"mean\": mn = df_tmp[target].mean()\n#         elif agg==\"median\": mn = df_tmp[target].median()\n#         elif agg==\"min\": mn = df_tmp[target].min()\n#         elif agg==\"max\": mn = df_tmp[target].max()\n#         elif agg==\"nunique\": mn = 0\n#         df_tmp = df_tmp[col + [target]].groupby(col).agg([agg, 'count']).reset_index()\n#         df_tmp.columns = col + [agg, 'count']\n#         if agg==\"nunique\":\n#             df_tmp['TE_tmp'] = df_tmp[agg] / df_tmp['count']\n#         else: \n#             df_tmp['TE_tmp'] = ((df_tmp[agg]*df_tmp['count'])+(mn*smooth)) / (df_tmp['count']+smooth)\n#         df_tmp_m = train[col + ['kfold', f'TE_{agg.upper()}_' + col_name]].merge(df_tmp, how='left', left_on=col, right_on=col)\n#         df_tmp_m.loc[df_tmp_m['kfold']==i, f'TE_{agg.upper()}_' + col_name] = df_tmp_m.loc[df_tmp_m['kfold']==i, 'TE_tmp']\n#         train[f'TE_{agg.upper()}_' + col_name] = df_tmp_m[f'TE_{agg.upper()}_' + col_name].fillna(mn).values  \n    \n#     df_tmp = train[col + [target]].groupby(col).agg([agg, 'count']).reset_index()\n#     if agg==\"mean\": mn = train[target].mean()\n#     elif agg==\"median\": mn = train[target].median()\n#     elif agg==\"min\": mn = train[target].min()\n#     elif agg==\"max\": mn = train[target].max()\n#     elif agg==\"nunique\": mn = 0\n#     df_tmp.columns = col + [agg, 'count']\n#     if agg==\"nunique\":\n#         df_tmp['TE_tmp'] = df_tmp[agg] / df_tmp['count']\n#     else:\n#         df_tmp['TE_tmp'] = ((df_tmp[agg]*df_tmp['count'])+(mn*smooth)) / (df_tmp['count']+smooth)\n#     df_tmp_m = valid[col].merge(df_tmp, how='left', left_on=col, right_on=col)\n#     valid[f'TE_{agg.upper()}_' + col_name] = df_tmp_m['TE_tmp'].fillna(mn).values\n#     valid[f'TE_{agg.upper()}_' + col_name] = valid[f'TE_{agg.upper()}_' + col_name].astype(\"float32\")\n\n#     df_tmp_m = test[col].merge(df_tmp, how='left', left_on=col, right_on=col)\n#     test[f'TE_{agg.upper()}_' + col_name] = df_tmp_m['TE_tmp'].fillna(mn).values\n#     test[f'TE_{agg.upper()}_' + col_name] = test[f'TE_{agg.upper()}_' + col_name].astype(\"float32\")\n\n#     train = train.drop('kfold', axis=1)\n#     train[f'TE_{agg.upper()}_' + col_name] = train[f'TE_{agg.upper()}_' + col_name].astype(\"float32\")\n\n#     return (train, valid, test)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}