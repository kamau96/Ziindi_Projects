{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":12806871,"sourceType":"datasetVersion","datasetId":8097839}],"dockerImageVersionId":31090,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import cudf, numpy as np\nfrom cuml import Lasso\nfrom cuml.preprocessing.TargetEncoder import TargetEncoder\nfrom sklearn.model_selection import KFold","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-09-14T15:41:10.034570Z","iopub.execute_input":"2025-09-14T15:41:10.035152Z","iopub.status.idle":"2025-09-14T15:41:20.557041Z","shell.execute_reply.started":"2025-09-14T15:41:10.035126Z","shell.execute_reply":"2025-09-14T15:41:20.556470Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"train_path = \"/kaggle/input/indigenous-knowledge/train (1).csv\"\ntest_path = \"/kaggle/input/indigenous-knowledge/test.csv\"","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-14T15:41:20.558111Z","iopub.execute_input":"2025-09-14T15:41:20.558529Z","iopub.status.idle":"2025-09-14T15:41:20.562127Z","shell.execute_reply.started":"2025-09-14T15:41:20.558503Z","shell.execute_reply":"2025-09-14T15:41:20.561374Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"train_data = cudf.read_csv(train_path)\ntest_data = cudf.read_csv(test_path)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-14T15:41:20.562940Z","iopub.execute_input":"2025-09-14T15:41:20.563248Z","iopub.status.idle":"2025-09-14T15:41:21.031760Z","shell.execute_reply.started":"2025-09-14T15:41:20.563223Z","shell.execute_reply":"2025-09-14T15:41:21.031045Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"confidence_mapper = {0.30:\"Low\", 0.60:\"Medium\", 1.0:\"High\"}\npredicted_intensity_mapper = {0.0:\"NORAIN\", 0.33:\"SMALLRAIN\", 0.66:\"MEDIUMRAIN\", 1.0:\"HEAVYRAIN\"}","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-14T15:41:21.033268Z","iopub.execute_input":"2025-09-14T15:41:21.033485Z","iopub.status.idle":"2025-09-14T15:41:21.037263Z","shell.execute_reply.started":"2025-09-14T15:41:21.033468Z","shell.execute_reply":"2025-09-14T15:41:21.036610Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"train_data[\"confidence\"] = round(train_data[\"confidence\"], 1)\ntrain_data[\"predicted_intensity\"] = round(train_data[\"predicted_intensity\"], 2)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-14T15:41:21.038249Z","iopub.execute_input":"2025-09-14T15:41:21.038663Z","iopub.status.idle":"2025-09-14T15:41:21.066568Z","shell.execute_reply.started":"2025-09-14T15:41:21.038643Z","shell.execute_reply":"2025-09-14T15:41:21.066109Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"test_data[\"confidence\"] = round(test_data[\"confidence\"], 1)\ntest_data[\"predicted_intensity\"] = round(test_data[\"predicted_intensity\"], 2)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-14T15:41:21.067148Z","iopub.execute_input":"2025-09-14T15:41:21.067327Z","iopub.status.idle":"2025-09-14T15:41:21.072027Z","shell.execute_reply.started":"2025-09-14T15:41:21.067312Z","shell.execute_reply":"2025-09-14T15:41:21.071347Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"train_data[\"confidence\"] = train_data[\"confidence\"].map(confidence_mapper)\ntrain_data[\"predicted_intensity\"] = train_data[\"predicted_intensity\"].map(predicted_intensity_mapper)\ntrain_data[\"community\"] = (\n    train_data[\"community\"]\n    .str.lower()\n    .str.normalize_spaces()\n    .str.strip()\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-14T15:41:21.072817Z","iopub.execute_input":"2025-09-14T15:41:21.072976Z","iopub.status.idle":"2025-09-14T15:41:21.316753Z","shell.execute_reply.started":"2025-09-14T15:41:21.072963Z","shell.execute_reply":"2025-09-14T15:41:21.316225Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"train_data[\"prediction_time\"] = cudf.to_datetime(train_data[\"prediction_time\"])\ntrain_data[\"month\"] = train_data[\"prediction_time\"].dt.month\ntrain_data[\"hour\"] = train_data[\"prediction_time\"].dt.hour\ntrain_data[\"day\"] = train_data[\"prediction_time\"].dt.day\ntrain_data[\"weekday\"] = train_data[\"prediction_time\"].dt.day_name()\n\ntrain_data.drop(columns=[\"prediction_time\"], inplace=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-14T15:41:21.317388Z","iopub.execute_input":"2025-09-14T15:41:21.317569Z","iopub.status.idle":"2025-09-14T15:41:21.541468Z","shell.execute_reply.started":"2025-09-14T15:41:21.317553Z","shell.execute_reply":"2025-09-14T15:41:21.540892Z"}},"outputs":[],"execution_count":8},{"cell_type":"code","source":"test_data[\"confidence\"] = test_data[\"confidence\"].map(confidence_mapper)\ntest_data[\"predicted_intensity\"] = test_data[\"predicted_intensity\"].map(predicted_intensity_mapper)\ntest_data[\"community\"] = (\n    test_data[\"community\"]\n    .str.lower()\n    .str.normalize_spaces()\n    .str.strip()\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-14T15:41:21.542122Z","iopub.execute_input":"2025-09-14T15:41:21.542342Z","iopub.status.idle":"2025-09-14T15:41:21.563677Z","shell.execute_reply.started":"2025-09-14T15:41:21.542326Z","shell.execute_reply":"2025-09-14T15:41:21.563153Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"test_data[\"prediction_time\"] = cudf.to_datetime(test_data[\"prediction_time\"])\ntest_data[\"month\"] = test_data[\"prediction_time\"].dt.month\ntest_data[\"hour\"] = test_data[\"prediction_time\"].dt.hour\ntest_data[\"day\"] = test_data[\"prediction_time\"].dt.day\ntest_data[\"weekday\"] = test_data[\"prediction_time\"].dt.day_name()\n\ntest_data.drop(columns=[\"prediction_time\"], inplace=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-14T15:41:21.565709Z","iopub.execute_input":"2025-09-14T15:41:21.566155Z","iopub.status.idle":"2025-09-14T15:41:21.579968Z","shell.execute_reply.started":"2025-09-14T15:41:21.566136Z","shell.execute_reply":"2025-09-14T15:41:21.579286Z"}},"outputs":[],"execution_count":10},{"cell_type":"code","source":"COLS = list( train_data.drop(columns=[\"ID\", \"Target\"]).columns )\nprint( COLS )\nprint(len(COLS),\"uni-grams exist\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-14T15:41:21.580892Z","iopub.execute_input":"2025-09-14T15:41:21.581240Z","iopub.status.idle":"2025-09-14T15:41:21.590176Z","shell.execute_reply.started":"2025-09-14T15:41:21.581222Z","shell.execute_reply":"2025-09-14T15:41:21.589449Z"}},"outputs":[{"name":"stdout","text":"['user_id', 'confidence', 'predicted_intensity', 'community', 'district', 'indicator', 'indicator_description', 'time_observed', 'forecast_length', 'month', 'hour', 'day', 'weekday']\n13 uni-grams exist\n","output_type":"stream"}],"execution_count":11},{"cell_type":"code","source":"new_columns = {}\nnew_columns2 = {}\nCOLS2 = []\nfor i, c1 in enumerate(COLS[:-1]):\n    for j, c2 in enumerate(COLS[i+1:]):\n        name = f\"{c1}-{c2}\"\n        new_columns[name] = train_data[c1].astype(\"str\") + \"_\" + train_data[c2].astype(\"str\")\n        new_columns2[name] = test_data[c1].astype(\"str\") + \"_\" + test_data[c2].astype(\"str\")\n        COLS2.append(name)\n        print(f\"{i}-{i+j+1}, \", end='')\ntrain_data = cudf.concat([train_data, cudf.DataFrame(new_columns)], axis=1)\ntest_data = cudf.concat([test_data, cudf.DataFrame(new_columns2)], axis=1)\nprint()\nprint(len(COLS2),\"bi-grams generated\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-14T15:41:21.590897Z","iopub.execute_input":"2025-09-14T15:41:21.591360Z","iopub.status.idle":"2025-09-14T15:41:21.989220Z","shell.execute_reply.started":"2025-09-14T15:41:21.591342Z","shell.execute_reply":"2025-09-14T15:41:21.988493Z"}},"outputs":[{"name":"stdout","text":"0-1, 0-2, 0-3, 0-4, 0-5, 0-6, 0-7, 0-8, 0-9, 0-10, 0-11, 0-12, 1-2, 1-3, 1-4, 1-5, 1-6, 1-7, 1-8, 1-9, 1-10, 1-11, 1-12, 2-3, 2-4, 2-5, 2-6, 2-7, 2-8, 2-9, 2-10, 2-11, 2-12, 3-4, 3-5, 3-6, 3-7, 3-8, 3-9, 3-10, 3-11, 3-12, 4-5, 4-6, 4-7, 4-8, 4-9, 4-10, 4-11, 4-12, 5-6, 5-7, 5-8, 5-9, 5-10, 5-11, 5-12, 6-7, 6-8, 6-9, 6-10, 6-11, 6-12, 7-8, 7-9, 7-10, 7-11, 7-12, 8-9, 8-10, 8-11, 8-12, 9-10, 9-11, 9-12, 10-11, 10-12, 11-12, \n78 bi-grams generated\n","output_type":"stream"}],"execution_count":12},{"cell_type":"code","source":"new_columns = {}\nnew_columns2 = {}\nCOLS3 = []\nfor i, c1 in enumerate(COLS[:-2]):\n    for j, c2 in enumerate(COLS[i+1:-1]):\n        for k, c3 in enumerate(COLS[i+j+2:]):\n            name = f\"{c1}-{c2}-{c3}\"\n            new_columns[name] = train_data[c1].astype(\"str\") + \"_\" + train_data[c2].astype(\"str\") + \"_\" + train_data[c3].astype(\"str\")\n            new_columns2[name] = test_data[c1].astype(\"str\") + \"_\" + test_data[c2].astype(\"str\") + \"_\" + test_data[c3].astype(\"str\")\n            COLS3.append(name)\n            print(f\"{i}-{i+j+1}-{i+j+k+2}, \", end='')\ntrain_data = cudf.concat([train_data, cudf.DataFrame(new_columns)], axis=1)\ntest_data = cudf.concat([test_data, cudf.DataFrame(new_columns2)], axis=1)\nprint()\nprint(len(COLS3),\"tri-grams generated\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-14T15:41:21.990055Z","iopub.execute_input":"2025-09-14T15:41:21.990263Z","iopub.status.idle":"2025-09-14T15:41:24.446265Z","shell.execute_reply.started":"2025-09-14T15:41:21.990245Z","shell.execute_reply":"2025-09-14T15:41:24.445634Z"}},"outputs":[{"name":"stdout","text":"0-1-2, 0-1-3, 0-1-4, 0-1-5, 0-1-6, 0-1-7, 0-1-8, 0-1-9, 0-1-10, 0-1-11, 0-1-12, 0-2-3, 0-2-4, 0-2-5, 0-2-6, 0-2-7, 0-2-8, 0-2-9, 0-2-10, 0-2-11, 0-2-12, 0-3-4, 0-3-5, 0-3-6, 0-3-7, 0-3-8, 0-3-9, 0-3-10, 0-3-11, 0-3-12, 0-4-5, 0-4-6, 0-4-7, 0-4-8, 0-4-9, 0-4-10, 0-4-11, 0-4-12, 0-5-6, 0-5-7, 0-5-8, 0-5-9, 0-5-10, 0-5-11, 0-5-12, 0-6-7, 0-6-8, 0-6-9, 0-6-10, 0-6-11, 0-6-12, 0-7-8, 0-7-9, 0-7-10, 0-7-11, 0-7-12, 0-8-9, 0-8-10, 0-8-11, 0-8-12, 0-9-10, 0-9-11, 0-9-12, 0-10-11, 0-10-12, 0-11-12, 1-2-3, 1-2-4, 1-2-5, 1-2-6, 1-2-7, 1-2-8, 1-2-9, 1-2-10, 1-2-11, 1-2-12, 1-3-4, 1-3-5, 1-3-6, 1-3-7, 1-3-8, 1-3-9, 1-3-10, 1-3-11, 1-3-12, 1-4-5, 1-4-6, 1-4-7, 1-4-8, 1-4-9, 1-4-10, 1-4-11, 1-4-12, 1-5-6, 1-5-7, 1-5-8, 1-5-9, 1-5-10, 1-5-11, 1-5-12, 1-6-7, 1-6-8, 1-6-9, 1-6-10, 1-6-11, 1-6-12, 1-7-8, 1-7-9, 1-7-10, 1-7-11, 1-7-12, 1-8-9, 1-8-10, 1-8-11, 1-8-12, 1-9-10, 1-9-11, 1-9-12, 1-10-11, 1-10-12, 1-11-12, 2-3-4, 2-3-5, 2-3-6, 2-3-7, 2-3-8, 2-3-9, 2-3-10, 2-3-11, 2-3-12, 2-4-5, 2-4-6, 2-4-7, 2-4-8, 2-4-9, 2-4-10, 2-4-11, 2-4-12, 2-5-6, 2-5-7, 2-5-8, 2-5-9, 2-5-10, 2-5-11, 2-5-12, 2-6-7, 2-6-8, 2-6-9, 2-6-10, 2-6-11, 2-6-12, 2-7-8, 2-7-9, 2-7-10, 2-7-11, 2-7-12, 2-8-9, 2-8-10, 2-8-11, 2-8-12, 2-9-10, 2-9-11, 2-9-12, 2-10-11, 2-10-12, 2-11-12, 3-4-5, 3-4-6, 3-4-7, 3-4-8, 3-4-9, 3-4-10, 3-4-11, 3-4-12, 3-5-6, 3-5-7, 3-5-8, 3-5-9, 3-5-10, 3-5-11, 3-5-12, 3-6-7, 3-6-8, 3-6-9, 3-6-10, 3-6-11, 3-6-12, 3-7-8, 3-7-9, 3-7-10, 3-7-11, 3-7-12, 3-8-9, 3-8-10, 3-8-11, 3-8-12, 3-9-10, 3-9-11, 3-9-12, 3-10-11, 3-10-12, 3-11-12, 4-5-6, 4-5-7, 4-5-8, 4-5-9, 4-5-10, 4-5-11, 4-5-12, 4-6-7, 4-6-8, 4-6-9, 4-6-10, 4-6-11, 4-6-12, 4-7-8, 4-7-9, 4-7-10, 4-7-11, 4-7-12, 4-8-9, 4-8-10, 4-8-11, 4-8-12, 4-9-10, 4-9-11, 4-9-12, 4-10-11, 4-10-12, 4-11-12, 5-6-7, 5-6-8, 5-6-9, 5-6-10, 5-6-11, 5-6-12, 5-7-8, 5-7-9, 5-7-10, 5-7-11, 5-7-12, 5-8-9, 5-8-10, 5-8-11, 5-8-12, 5-9-10, 5-9-11, 5-9-12, 5-10-11, 5-10-12, 5-11-12, 6-7-8, 6-7-9, 6-7-10, 6-7-11, 6-7-12, 6-8-9, 6-8-10, 6-8-11, 6-8-12, 6-9-10, 6-9-11, 6-9-12, 6-10-11, 6-10-12, 6-11-12, 7-8-9, 7-8-10, 7-8-11, 7-8-12, 7-9-10, 7-9-11, 7-9-12, 7-10-11, 7-10-12, 7-11-12, 8-9-10, 8-9-11, 8-9-12, 8-10-11, 8-10-12, 8-11-12, 9-10-11, 9-10-12, 9-11-12, 10-11-12, \n286 tri-grams generated\n","output_type":"stream"}],"execution_count":13},{"cell_type":"code","source":"TARGET = \"Target\"\nTARGET_ENCODE = [f\"{c}-TE\" for c in COLS+COLS2+COLS3]\nmore_train = cudf.DataFrame(data=np.zeros( (len(train_data),len(TARGET_ENCODE)) ), columns=TARGET_ENCODE)\ntrain_data = cudf.concat([train_data,more_train],axis=1)\nmore_test = cudf.DataFrame(data=np.zeros( (len(test_data),len(TARGET_ENCODE)) ), columns=TARGET_ENCODE)\ntest_data = cudf.concat([test_data,more_test],axis=1)\n\nFEATURES = TARGET_ENCODE\nprint(f\"Here are all our {len(FEATURES)} features:\")\nprint( FEATURES )","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-14T15:41:24.447099Z","iopub.execute_input":"2025-09-14T15:41:24.447352Z","iopub.status.idle":"2025-09-14T15:41:24.670109Z","shell.execute_reply.started":"2025-09-14T15:41:24.447330Z","shell.execute_reply":"2025-09-14T15:41:24.669396Z"}},"outputs":[{"name":"stdout","text":"Here are all our 377 features:\n['user_id-TE', 'confidence-TE', 'predicted_intensity-TE', 'community-TE', 'district-TE', 'indicator-TE', 'indicator_description-TE', 'time_observed-TE', 'forecast_length-TE', 'month-TE', 'hour-TE', 'day-TE', 'weekday-TE', 'user_id-confidence-TE', 'user_id-predicted_intensity-TE', 'user_id-community-TE', 'user_id-district-TE', 'user_id-indicator-TE', 'user_id-indicator_description-TE', 'user_id-time_observed-TE', 'user_id-forecast_length-TE', 'user_id-month-TE', 'user_id-hour-TE', 'user_id-day-TE', 'user_id-weekday-TE', 'confidence-predicted_intensity-TE', 'confidence-community-TE', 'confidence-district-TE', 'confidence-indicator-TE', 'confidence-indicator_description-TE', 'confidence-time_observed-TE', 'confidence-forecast_length-TE', 'confidence-month-TE', 'confidence-hour-TE', 'confidence-day-TE', 'confidence-weekday-TE', 'predicted_intensity-community-TE', 'predicted_intensity-district-TE', 'predicted_intensity-indicator-TE', 'predicted_intensity-indicator_description-TE', 'predicted_intensity-time_observed-TE', 'predicted_intensity-forecast_length-TE', 'predicted_intensity-month-TE', 'predicted_intensity-hour-TE', 'predicted_intensity-day-TE', 'predicted_intensity-weekday-TE', 'community-district-TE', 'community-indicator-TE', 'community-indicator_description-TE', 'community-time_observed-TE', 'community-forecast_length-TE', 'community-month-TE', 'community-hour-TE', 'community-day-TE', 'community-weekday-TE', 'district-indicator-TE', 'district-indicator_description-TE', 'district-time_observed-TE', 'district-forecast_length-TE', 'district-month-TE', 'district-hour-TE', 'district-day-TE', 'district-weekday-TE', 'indicator-indicator_description-TE', 'indicator-time_observed-TE', 'indicator-forecast_length-TE', 'indicator-month-TE', 'indicator-hour-TE', 'indicator-day-TE', 'indicator-weekday-TE', 'indicator_description-time_observed-TE', 'indicator_description-forecast_length-TE', 'indicator_description-month-TE', 'indicator_description-hour-TE', 'indicator_description-day-TE', 'indicator_description-weekday-TE', 'time_observed-forecast_length-TE', 'time_observed-month-TE', 'time_observed-hour-TE', 'time_observed-day-TE', 'time_observed-weekday-TE', 'forecast_length-month-TE', 'forecast_length-hour-TE', 'forecast_length-day-TE', 'forecast_length-weekday-TE', 'month-hour-TE', 'month-day-TE', 'month-weekday-TE', 'hour-day-TE', 'hour-weekday-TE', 'day-weekday-TE', 'user_id-confidence-predicted_intensity-TE', 'user_id-confidence-community-TE', 'user_id-confidence-district-TE', 'user_id-confidence-indicator-TE', 'user_id-confidence-indicator_description-TE', 'user_id-confidence-time_observed-TE', 'user_id-confidence-forecast_length-TE', 'user_id-confidence-month-TE', 'user_id-confidence-hour-TE', 'user_id-confidence-day-TE', 'user_id-confidence-weekday-TE', 'user_id-predicted_intensity-community-TE', 'user_id-predicted_intensity-district-TE', 'user_id-predicted_intensity-indicator-TE', 'user_id-predicted_intensity-indicator_description-TE', 'user_id-predicted_intensity-time_observed-TE', 'user_id-predicted_intensity-forecast_length-TE', 'user_id-predicted_intensity-month-TE', 'user_id-predicted_intensity-hour-TE', 'user_id-predicted_intensity-day-TE', 'user_id-predicted_intensity-weekday-TE', 'user_id-community-district-TE', 'user_id-community-indicator-TE', 'user_id-community-indicator_description-TE', 'user_id-community-time_observed-TE', 'user_id-community-forecast_length-TE', 'user_id-community-month-TE', 'user_id-community-hour-TE', 'user_id-community-day-TE', 'user_id-community-weekday-TE', 'user_id-district-indicator-TE', 'user_id-district-indicator_description-TE', 'user_id-district-time_observed-TE', 'user_id-district-forecast_length-TE', 'user_id-district-month-TE', 'user_id-district-hour-TE', 'user_id-district-day-TE', 'user_id-district-weekday-TE', 'user_id-indicator-indicator_description-TE', 'user_id-indicator-time_observed-TE', 'user_id-indicator-forecast_length-TE', 'user_id-indicator-month-TE', 'user_id-indicator-hour-TE', 'user_id-indicator-day-TE', 'user_id-indicator-weekday-TE', 'user_id-indicator_description-time_observed-TE', 'user_id-indicator_description-forecast_length-TE', 'user_id-indicator_description-month-TE', 'user_id-indicator_description-hour-TE', 'user_id-indicator_description-day-TE', 'user_id-indicator_description-weekday-TE', 'user_id-time_observed-forecast_length-TE', 'user_id-time_observed-month-TE', 'user_id-time_observed-hour-TE', 'user_id-time_observed-day-TE', 'user_id-time_observed-weekday-TE', 'user_id-forecast_length-month-TE', 'user_id-forecast_length-hour-TE', 'user_id-forecast_length-day-TE', 'user_id-forecast_length-weekday-TE', 'user_id-month-hour-TE', 'user_id-month-day-TE', 'user_id-month-weekday-TE', 'user_id-hour-day-TE', 'user_id-hour-weekday-TE', 'user_id-day-weekday-TE', 'confidence-predicted_intensity-community-TE', 'confidence-predicted_intensity-district-TE', 'confidence-predicted_intensity-indicator-TE', 'confidence-predicted_intensity-indicator_description-TE', 'confidence-predicted_intensity-time_observed-TE', 'confidence-predicted_intensity-forecast_length-TE', 'confidence-predicted_intensity-month-TE', 'confidence-predicted_intensity-hour-TE', 'confidence-predicted_intensity-day-TE', 'confidence-predicted_intensity-weekday-TE', 'confidence-community-district-TE', 'confidence-community-indicator-TE', 'confidence-community-indicator_description-TE', 'confidence-community-time_observed-TE', 'confidence-community-forecast_length-TE', 'confidence-community-month-TE', 'confidence-community-hour-TE', 'confidence-community-day-TE', 'confidence-community-weekday-TE', 'confidence-district-indicator-TE', 'confidence-district-indicator_description-TE', 'confidence-district-time_observed-TE', 'confidence-district-forecast_length-TE', 'confidence-district-month-TE', 'confidence-district-hour-TE', 'confidence-district-day-TE', 'confidence-district-weekday-TE', 'confidence-indicator-indicator_description-TE', 'confidence-indicator-time_observed-TE', 'confidence-indicator-forecast_length-TE', 'confidence-indicator-month-TE', 'confidence-indicator-hour-TE', 'confidence-indicator-day-TE', 'confidence-indicator-weekday-TE', 'confidence-indicator_description-time_observed-TE', 'confidence-indicator_description-forecast_length-TE', 'confidence-indicator_description-month-TE', 'confidence-indicator_description-hour-TE', 'confidence-indicator_description-day-TE', 'confidence-indicator_description-weekday-TE', 'confidence-time_observed-forecast_length-TE', 'confidence-time_observed-month-TE', 'confidence-time_observed-hour-TE', 'confidence-time_observed-day-TE', 'confidence-time_observed-weekday-TE', 'confidence-forecast_length-month-TE', 'confidence-forecast_length-hour-TE', 'confidence-forecast_length-day-TE', 'confidence-forecast_length-weekday-TE', 'confidence-month-hour-TE', 'confidence-month-day-TE', 'confidence-month-weekday-TE', 'confidence-hour-day-TE', 'confidence-hour-weekday-TE', 'confidence-day-weekday-TE', 'predicted_intensity-community-district-TE', 'predicted_intensity-community-indicator-TE', 'predicted_intensity-community-indicator_description-TE', 'predicted_intensity-community-time_observed-TE', 'predicted_intensity-community-forecast_length-TE', 'predicted_intensity-community-month-TE', 'predicted_intensity-community-hour-TE', 'predicted_intensity-community-day-TE', 'predicted_intensity-community-weekday-TE', 'predicted_intensity-district-indicator-TE', 'predicted_intensity-district-indicator_description-TE', 'predicted_intensity-district-time_observed-TE', 'predicted_intensity-district-forecast_length-TE', 'predicted_intensity-district-month-TE', 'predicted_intensity-district-hour-TE', 'predicted_intensity-district-day-TE', 'predicted_intensity-district-weekday-TE', 'predicted_intensity-indicator-indicator_description-TE', 'predicted_intensity-indicator-time_observed-TE', 'predicted_intensity-indicator-forecast_length-TE', 'predicted_intensity-indicator-month-TE', 'predicted_intensity-indicator-hour-TE', 'predicted_intensity-indicator-day-TE', 'predicted_intensity-indicator-weekday-TE', 'predicted_intensity-indicator_description-time_observed-TE', 'predicted_intensity-indicator_description-forecast_length-TE', 'predicted_intensity-indicator_description-month-TE', 'predicted_intensity-indicator_description-hour-TE', 'predicted_intensity-indicator_description-day-TE', 'predicted_intensity-indicator_description-weekday-TE', 'predicted_intensity-time_observed-forecast_length-TE', 'predicted_intensity-time_observed-month-TE', 'predicted_intensity-time_observed-hour-TE', 'predicted_intensity-time_observed-day-TE', 'predicted_intensity-time_observed-weekday-TE', 'predicted_intensity-forecast_length-month-TE', 'predicted_intensity-forecast_length-hour-TE', 'predicted_intensity-forecast_length-day-TE', 'predicted_intensity-forecast_length-weekday-TE', 'predicted_intensity-month-hour-TE', 'predicted_intensity-month-day-TE', 'predicted_intensity-month-weekday-TE', 'predicted_intensity-hour-day-TE', 'predicted_intensity-hour-weekday-TE', 'predicted_intensity-day-weekday-TE', 'community-district-indicator-TE', 'community-district-indicator_description-TE', 'community-district-time_observed-TE', 'community-district-forecast_length-TE', 'community-district-month-TE', 'community-district-hour-TE', 'community-district-day-TE', 'community-district-weekday-TE', 'community-indicator-indicator_description-TE', 'community-indicator-time_observed-TE', 'community-indicator-forecast_length-TE', 'community-indicator-month-TE', 'community-indicator-hour-TE', 'community-indicator-day-TE', 'community-indicator-weekday-TE', 'community-indicator_description-time_observed-TE', 'community-indicator_description-forecast_length-TE', 'community-indicator_description-month-TE', 'community-indicator_description-hour-TE', 'community-indicator_description-day-TE', 'community-indicator_description-weekday-TE', 'community-time_observed-forecast_length-TE', 'community-time_observed-month-TE', 'community-time_observed-hour-TE', 'community-time_observed-day-TE', 'community-time_observed-weekday-TE', 'community-forecast_length-month-TE', 'community-forecast_length-hour-TE', 'community-forecast_length-day-TE', 'community-forecast_length-weekday-TE', 'community-month-hour-TE', 'community-month-day-TE', 'community-month-weekday-TE', 'community-hour-day-TE', 'community-hour-weekday-TE', 'community-day-weekday-TE', 'district-indicator-indicator_description-TE', 'district-indicator-time_observed-TE', 'district-indicator-forecast_length-TE', 'district-indicator-month-TE', 'district-indicator-hour-TE', 'district-indicator-day-TE', 'district-indicator-weekday-TE', 'district-indicator_description-time_observed-TE', 'district-indicator_description-forecast_length-TE', 'district-indicator_description-month-TE', 'district-indicator_description-hour-TE', 'district-indicator_description-day-TE', 'district-indicator_description-weekday-TE', 'district-time_observed-forecast_length-TE', 'district-time_observed-month-TE', 'district-time_observed-hour-TE', 'district-time_observed-day-TE', 'district-time_observed-weekday-TE', 'district-forecast_length-month-TE', 'district-forecast_length-hour-TE', 'district-forecast_length-day-TE', 'district-forecast_length-weekday-TE', 'district-month-hour-TE', 'district-month-day-TE', 'district-month-weekday-TE', 'district-hour-day-TE', 'district-hour-weekday-TE', 'district-day-weekday-TE', 'indicator-indicator_description-time_observed-TE', 'indicator-indicator_description-forecast_length-TE', 'indicator-indicator_description-month-TE', 'indicator-indicator_description-hour-TE', 'indicator-indicator_description-day-TE', 'indicator-indicator_description-weekday-TE', 'indicator-time_observed-forecast_length-TE', 'indicator-time_observed-month-TE', 'indicator-time_observed-hour-TE', 'indicator-time_observed-day-TE', 'indicator-time_observed-weekday-TE', 'indicator-forecast_length-month-TE', 'indicator-forecast_length-hour-TE', 'indicator-forecast_length-day-TE', 'indicator-forecast_length-weekday-TE', 'indicator-month-hour-TE', 'indicator-month-day-TE', 'indicator-month-weekday-TE', 'indicator-hour-day-TE', 'indicator-hour-weekday-TE', 'indicator-day-weekday-TE', 'indicator_description-time_observed-forecast_length-TE', 'indicator_description-time_observed-month-TE', 'indicator_description-time_observed-hour-TE', 'indicator_description-time_observed-day-TE', 'indicator_description-time_observed-weekday-TE', 'indicator_description-forecast_length-month-TE', 'indicator_description-forecast_length-hour-TE', 'indicator_description-forecast_length-day-TE', 'indicator_description-forecast_length-weekday-TE', 'indicator_description-month-hour-TE', 'indicator_description-month-day-TE', 'indicator_description-month-weekday-TE', 'indicator_description-hour-day-TE', 'indicator_description-hour-weekday-TE', 'indicator_description-day-weekday-TE', 'time_observed-forecast_length-month-TE', 'time_observed-forecast_length-hour-TE', 'time_observed-forecast_length-day-TE', 'time_observed-forecast_length-weekday-TE', 'time_observed-month-hour-TE', 'time_observed-month-day-TE', 'time_observed-month-weekday-TE', 'time_observed-hour-day-TE', 'time_observed-hour-weekday-TE', 'time_observed-day-weekday-TE', 'forecast_length-month-hour-TE', 'forecast_length-month-day-TE', 'forecast_length-month-weekday-TE', 'forecast_length-hour-day-TE', 'forecast_length-hour-weekday-TE', 'forecast_length-day-weekday-TE', 'month-hour-day-TE', 'month-hour-weekday-TE', 'month-day-weekday-TE', 'hour-day-weekday-TE']\n","output_type":"stream"}],"execution_count":14},{"cell_type":"code","source":"FOLDS = 5\nkf = KFold(n_splits=FOLDS, random_state=44, shuffle=True)\n\n# SAVE OOF AND TEST PREDS\noof = np.zeros( len(train_data) )\npred = np.zeros( len(test_data) )\n\n# TRAIN/INFER K-FOLD\nfor i, (train_index, test_index) in enumerate(kf.split(train_data)):\n    \n    # PRINT FOLD NUMBER\n    if i%FOLDS==0: print()\n    print(\"#\"*25)\n    print(f\"### Fold {i+1} ###\")\n    print(\"#\"*25)\n    \n    # GET TRAIN, VALID, TEST\n    X_train = train_data.iloc[train_index,].copy()\n    y_train = train_data[TARGET].iloc[train_index]\n    \n    X_valid = train_data.iloc[test_index,].copy()\n    y_valid = train_data[TARGET].iloc[test_index]\n    \n    X_test = test_data.copy()\n    \n    # TARGET ENCODE AND STANDARD ENCODE\n    print(f\"TE for {len(TARGET_ENCODE)} features...\")\n    for j,c in enumerate(TARGET_ENCODE):\n        c = c.replace(\"-TE\",\"\")\n        print(f\"{j}, \",end=\"\") \n        \n        # TARGET ENCODE \n        enc_auto = TargetEncoder(smooth=5,\n                                 split_method=\"random\", \n                                 seed=44, \n                                 stat=\"mean\",\n                                 n_folds=5)\n        X_train[f\"{c}-TE\"] = enc_auto.fit_transform(X_train[[c]], y_train)\n        X_valid[f\"{c}-TE\"] = enc_auto.transform(X_valid[[c]])\n        X_test[f\"{c}-TE\"] = enc_auto.transform(X_test[[c]])\n        \n        # STANDARD ENCODE\n        m = X_train[f\"{c}-TE\"].mean()\n        s = X_train[f\"{c}-TE\"].std()\n        X_train[f\"{c}-TE\"] = (X_train[f\"{c}-TE\"]-m)/s\n        X_valid[f\"{c}-TE\"] = (X_valid[f\"{c}-TE\"]-m)/s\n        X_test[f\"{c}-TE\"] = (X_test[f\"{c}-TE\"]-m)/s\n        \n    print()    \n    X_train = X_train[FEATURES]\n    X_valid = X_valid[FEATURES]\n    X_test = X_test[FEATURES]\n        \n    # FIT LASSO MODEL\n    model = Lasso(alpha=1e2) \n    model.fit(X_train, y_train) \n    \n    # INFER OOF AND TEST\n    oof[test_index] = model.predict(X_valid).to_numpy()\n    if i==0: \n        pred = model.predict(X_test).to_numpy()\n    else: \n        pred += model.predict(X_test).to_numpy()\n    \npred /= FOLDS","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-14T15:41:24.670864Z","iopub.execute_input":"2025-09-14T15:41:24.671070Z","iopub.status.idle":"2025-09-14T15:41:25.927534Z","shell.execute_reply.started":"2025-09-14T15:41:24.671049Z","shell.execute_reply":"2025-09-14T15:41:25.926512Z"}},"outputs":[{"name":"stdout","text":"\n#########################\n### Fold 1 ###\n#########################\nTE for 377 features...\n0, ","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_36/2562930669.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     36\u001b[0m                                  \u001b[0mstat\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"mean\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     37\u001b[0m                                  n_folds=5)\n\u001b[0;32m---> 38\u001b[0;31m         \u001b[0mX_train\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34mf\"{c}-TE\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0menc_auto\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mc\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     39\u001b[0m         \u001b[0mX_valid\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34mf\"{c}-TE\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0menc_auto\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_valid\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mc\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m         \u001b[0mX_test\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34mf\"{c}-TE\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0menc_auto\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mc\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/cuml/preprocessing/TargetEncoder.py\u001b[0m in \u001b[0;36mfit_transform\u001b[0;34m(self, x, y, fold_ids)\u001b[0m\n\u001b[1;32m    224\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    225\u001b[0m         \"\"\"\n\u001b[0;32m--> 226\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfold_ids\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfold_ids\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    227\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_encode\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    228\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/cuml/preprocessing/TargetEncoder.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, fold_ids)\u001b[0m\n\u001b[1;32m    192\u001b[0m             )\n\u001b[1;32m    193\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 194\u001b[0;31m         \u001b[0mres\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fit_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfold_ids\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfold_ids\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    195\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_encode\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mres\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    196\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/cuml/preprocessing/TargetEncoder.py\u001b[0m in \u001b[0;36m_fit_transform\u001b[0;34m(self, x, y, fold_ids)\u001b[0m\n\u001b[1;32m    262\u001b[0m         \u001b[0mtrain\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_data_with_strings_to_cudf_dataframe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    263\u001b[0m         \u001b[0mx_cols\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtrain\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtolist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mi\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mid_col\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 264\u001b[0;31m         \u001b[0mtrain\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0my_col\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_y_column\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    265\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    266\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_folds\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_folds\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/cuml/preprocessing/TargetEncoder.py\u001b[0m in \u001b[0;36m_make_y_column\u001b[0;34m(self, y)\u001b[0m\n\u001b[1;32m    334\u001b[0m         \"\"\"\n\u001b[1;32m    335\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcudf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSeries\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpandas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSeries\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 336\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    337\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    338\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/cudf/utils/performance_tracking.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     49\u001b[0m                     )\n\u001b[1;32m     50\u001b[0m                 )\n\u001b[0;32m---> 51\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     52\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     53\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/cudf/core/single_column_frame.py\u001b[0m in \u001b[0;36mvalues\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    107\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0m_performance_tracking\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    108\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mcupy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 109\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_column\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    110\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    111\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m  \u001b[0;31m# type: ignore\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/cudf/core/column/string.py\u001b[0m in \u001b[0;36mvalues\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   5930\u001b[0m         \u001b[0mReturn\u001b[0m \u001b[0ma\u001b[0m \u001b[0mCuPy\u001b[0m \u001b[0mrepresentation\u001b[0m \u001b[0mof\u001b[0m \u001b[0mthe\u001b[0m \u001b[0mStringColumn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5931\u001b[0m         \"\"\"\n\u001b[0;32m-> 5932\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"String arrays are not supported by cupy\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5933\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5934\u001b[0m     def to_pandas(\n","\u001b[0;31mTypeError\u001b[0m: String arrays are not supported by cupy"],"ename":"TypeError","evalue":"String arrays are not supported by cupy","output_type":"error"}],"execution_count":15},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}