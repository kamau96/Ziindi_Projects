{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":12806871,"sourceType":"datasetVersion","datasetId":8097839}],"dockerImageVersionId":31090,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import cudf, numpy as np\nfrom cuml.linear_model import LogisticRegression\nfrom cuml.preprocessing.TargetEncoder import TargetEncoder\nfrom cuml.model_selection import StratifiedKFold","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-09-17T08:56:25.641382Z","iopub.execute_input":"2025-09-17T08:56:25.641835Z","iopub.status.idle":"2025-09-17T08:56:34.785129Z","shell.execute_reply.started":"2025-09-17T08:56:25.641810Z","shell.execute_reply":"2025-09-17T08:56:34.784377Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"train_path = \"/kaggle/input/indigenous-knowledge/train (1).csv\"\ntest_path = \"/kaggle/input/indigenous-knowledge/test.csv\"","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-17T08:56:34.786287Z","iopub.execute_input":"2025-09-17T08:56:34.787006Z","iopub.status.idle":"2025-09-17T08:56:34.790331Z","shell.execute_reply.started":"2025-09-17T08:56:34.786986Z","shell.execute_reply":"2025-09-17T08:56:34.789589Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"train_data = cudf.read_csv(train_path)\ntest_data = cudf.read_csv(test_path)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-17T08:56:34.791116Z","iopub.execute_input":"2025-09-17T08:56:34.791588Z","iopub.status.idle":"2025-09-17T08:56:35.157104Z","shell.execute_reply.started":"2025-09-17T08:56:34.791565Z","shell.execute_reply":"2025-09-17T08:56:35.156343Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"combined = cudf.concat([train_data, test_data], axis=0, ignore_index=True)\ncombined = combined.drop(columns=[\"ID\"])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-17T08:56:35.159078Z","iopub.execute_input":"2025-09-17T08:56:35.159298Z","iopub.status.idle":"2025-09-17T08:56:35.213257Z","shell.execute_reply.started":"2025-09-17T08:56:35.159279Z","shell.execute_reply":"2025-09-17T08:56:35.212761Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"confidence_mapper = {0.30:\"Low\", 0.60:\"Medium\", 1.0:\"High\"}\npredicted_intensity_mapper = {0.0:\"NORAIN\", 0.33:\"SMALLRAIN\", 0.66:\"MEDIUMRAIN\", 1.0:\"HEAVYRAIN\"}\ntarget_mapper = {\"NORAIN\": 0, \"SMALLRAIN\": 1, \"MEDIUMRAIN\": 2, \"HEAVYRAIN\": 3}","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-17T08:56:35.213869Z","iopub.execute_input":"2025-09-17T08:56:35.214081Z","iopub.status.idle":"2025-09-17T08:56:35.217806Z","shell.execute_reply.started":"2025-09-17T08:56:35.214065Z","shell.execute_reply":"2025-09-17T08:56:35.217128Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"combined[\"confidence\"] = round(combined[\"confidence\"], 1)\ncombined[\"predicted_intensity\"] = round(combined[\"predicted_intensity\"], 2)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-17T08:56:35.218420Z","iopub.execute_input":"2025-09-17T08:56:35.218656Z","iopub.status.idle":"2025-09-17T08:56:35.243871Z","shell.execute_reply.started":"2025-09-17T08:56:35.218635Z","shell.execute_reply":"2025-09-17T08:56:35.243396Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"combined[\"confidence\"] = combined[\"confidence\"].map(confidence_mapper)\ncombined[\"predicted_intensity\"] = combined[\"predicted_intensity\"].map(predicted_intensity_mapper)\ncombined[\"Target\"] = combined[\"Target\"].map(target_mapper).astype(np.int16)\ncombined[\"community\"] = (\n    combined[\"community\"]\n    .str.lower()\n    .str.normalize_spaces()\n    .str.strip()\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-17T08:56:35.244509Z","iopub.execute_input":"2025-09-17T08:56:35.244758Z","iopub.status.idle":"2025-09-17T08:56:35.459484Z","shell.execute_reply.started":"2025-09-17T08:56:35.244742Z","shell.execute_reply":"2025-09-17T08:56:35.458965Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"combined[\"prediction_time\"] = cudf.to_datetime(combined[\"prediction_time\"])\ncombined[\"month\"] = combined[\"prediction_time\"].dt.month\ncombined[\"hour\"] = combined[\"prediction_time\"].dt.hour\ncombined[\"day\"] = combined[\"prediction_time\"].dt.day\ncombined[\"weekday\"] = combined[\"prediction_time\"].dt.day_name()\n\ncombined.drop(columns=[\"prediction_time\"], inplace=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-17T08:56:35.460182Z","iopub.execute_input":"2025-09-17T08:56:35.460389Z","iopub.status.idle":"2025-09-17T08:56:35.646696Z","shell.execute_reply.started":"2025-09-17T08:56:35.460371Z","shell.execute_reply":"2025-09-17T08:56:35.645983Z"}},"outputs":[],"execution_count":8},{"cell_type":"code","source":"COLS = combined.columns\nfor col in COLS:\n    if combined[col].dtype == object:\n        if combined[col].isnull().sum() > 0:\n            combined[col+\"_had_null\"] = combined[col].isnull().astype(np.int8)\n        combined[col] = combined[col].fillna(\"missing\")\n        combined[col], _ = combined[col].factorize()\n    else:\n        combined[col] = combined[col].astype(np.int8)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-17T08:56:35.647488Z","iopub.execute_input":"2025-09-17T08:56:35.647722Z","iopub.status.idle":"2025-09-17T08:56:35.751396Z","shell.execute_reply.started":"2025-09-17T08:56:35.647700Z","shell.execute_reply":"2025-09-17T08:56:35.750699Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"combined.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-17T08:58:23.863358Z","iopub.execute_input":"2025-09-17T08:58:23.863619Z","iopub.status.idle":"2025-09-17T08:58:23.885180Z","shell.execute_reply.started":"2025-09-17T08:58:23.863599Z","shell.execute_reply":"2025-09-17T08:58:23.884641Z"}},"outputs":[{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"   user_id  confidence  predicted_intensity  community  district  indicator  \\\n0       11           0                    0          0         0          0   \n1       17           0                    0          1         0          0   \n2       19           0                    0          2         0          0   \n3       23           0                    0          3         0          0   \n4       23           0                    0          3         0          0   \n\n   indicator_description  time_observed  Target  forecast_length  month  hour  \\\n0                      0              0       2               12      5    11   \n1                      0              0       3               12      5    11   \n2                      0              0       2               12      5    11   \n3                      0              0       3               12      5    11   \n4                      0              0       3               12      5    11   \n\n   day  weekday  indicator_had_null  indicator_description_had_null  \\\n0   30        0                   1                               1   \n1   30        0                   1                               1   \n2   30        0                   1                               1   \n3   30        0                   1                               1   \n4   30        0                   1                               1   \n\n   time_observed_had_null  \n0                       1  \n1                       1  \n2                       1  \n3                       1  \n4                       1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>user_id</th>\n      <th>confidence</th>\n      <th>predicted_intensity</th>\n      <th>community</th>\n      <th>district</th>\n      <th>indicator</th>\n      <th>indicator_description</th>\n      <th>time_observed</th>\n      <th>Target</th>\n      <th>forecast_length</th>\n      <th>month</th>\n      <th>hour</th>\n      <th>day</th>\n      <th>weekday</th>\n      <th>indicator_had_null</th>\n      <th>indicator_description_had_null</th>\n      <th>time_observed_had_null</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>11</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>12</td>\n      <td>5</td>\n      <td>11</td>\n      <td>30</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>17</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>12</td>\n      <td>5</td>\n      <td>11</td>\n      <td>30</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>19</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>12</td>\n      <td>5</td>\n      <td>11</td>\n      <td>30</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>23</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>12</td>\n      <td>5</td>\n      <td>11</td>\n      <td>30</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>23</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>12</td>\n      <td>5</td>\n      <td>11</td>\n      <td>30</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":19},{"cell_type":"code","source":"# train_data = combined.iloc[:len(train_data)].copy()\n# test_data = combined.iloc[len(train_data):].drop(columns=[\"Target\"]).reset_index(drop=True).copy()\n\n# del combined","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-17T08:56:35.753487Z","iopub.execute_input":"2025-09-17T08:56:35.753678Z","iopub.status.idle":"2025-09-17T08:56:35.756693Z","shell.execute_reply.started":"2025-09-17T08:56:35.753662Z","shell.execute_reply":"2025-09-17T08:56:35.756098Z"}},"outputs":[],"execution_count":10},{"cell_type":"code","source":"# COLS = [\"confidence\", \"predicted_intensity\", \"community\", \n#         \"district\", \"indicator\", \"indicator_description\", \"time_observed\"]\n# print( COLS )\n# print(len(COLS),\"uni-grams exist\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-17T08:56:35.757315Z","iopub.execute_input":"2025-09-17T08:56:35.757503Z","iopub.status.idle":"2025-09-17T08:56:35.769201Z","shell.execute_reply.started":"2025-09-17T08:56:35.757479Z","shell.execute_reply":"2025-09-17T08:56:35.768634Z"}},"outputs":[],"execution_count":11},{"cell_type":"code","source":"# new_columns = {}\n# new_columns2 = {}\n# COLS2 = []\n# for i, c1 in enumerate(COLS[:-1]):\n#     for j, c2 in enumerate(COLS[i+1:]):\n#         name = f\"{c1}-{c2}\"\n#         new_columns[name] = train_data[c1].astype(\"str\") + \"_\" + train_data[c2].astype(\"str\")\n#         new_columns2[name] = test_data[c1].astype(\"str\") + \"_\" + test_data[c2].astype(\"str\")\n#         COLS2.append(name)\n#         print(f\"{i}-{i+j+1}, \", end='')\n# train_data = cudf.concat([train_data, cudf.DataFrame(new_columns)], axis=1)\n# test_data = cudf.concat([test_data, cudf.DataFrame(new_columns2)], axis=1)\n# print()\n# print(len(COLS2),\"bi-grams generated\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-17T08:56:35.769848Z","iopub.execute_input":"2025-09-17T08:56:35.770088Z","iopub.status.idle":"2025-09-17T08:56:35.778856Z","shell.execute_reply.started":"2025-09-17T08:56:35.770066Z","shell.execute_reply":"2025-09-17T08:56:35.778235Z"}},"outputs":[],"execution_count":12},{"cell_type":"code","source":"# new_columns = {}\n# new_columns2 = {}\n# COLS3 = []\n# for i, c1 in enumerate(COLS[:-2]):\n#     for j, c2 in enumerate(COLS[i+1:-1]):\n#         for k, c3 in enumerate(COLS[i+j+2:]):\n#             name = f\"{c1}-{c2}-{c3}\"\n#             new_columns[name] = train_data[c1].astype(\"str\") + \"_\" + train_data[c2].astype(\"str\") + \"_\" + train_data[c3].astype(\"str\")\n#             new_columns2[name] = test_data[c1].astype(\"str\") + \"_\" + test_data[c2].astype(\"str\") + \"_\" + test_data[c3].astype(\"str\")\n#             COLS3.append(name)\n#             print(f\"{i}-{i+j+1}-{i+j+k+2}, \", end='')\n# train_data = cudf.concat([train_data, cudf.DataFrame(new_columns)], axis=1)\n# test_data = cudf.concat([test_data, cudf.DataFrame(new_columns2)], axis=1)\n# print()\n# print(len(COLS3),\"tri-grams generated\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-17T08:56:35.779565Z","iopub.execute_input":"2025-09-17T08:56:35.779746Z","iopub.status.idle":"2025-09-17T08:56:35.789019Z","shell.execute_reply.started":"2025-09-17T08:56:35.779732Z","shell.execute_reply":"2025-09-17T08:56:35.788339Z"}},"outputs":[],"execution_count":13},{"cell_type":"code","source":"# TARGET = \"Target\"\n# TARGET_ENCODE = [f\"{c}-TE\" for c in COLS+COLS2+COLS3]\n# more_train = cudf.DataFrame(data=np.zeros( (len(train_data),len(TARGET_ENCODE)) ), columns=TARGET_ENCODE)\n# train_data = cudf.concat([train_data,more_train],axis=1)\n# more_test = cudf.DataFrame(data=np.zeros( (len(test_data),len(TARGET_ENCODE)) ), columns=TARGET_ENCODE)\n# test_data = cudf.concat([test_data,more_test],axis=1)\n\n# FEATURES = TARGET_ENCODE\n# print(f\"Here are all our {len(FEATURES)} features:\")\n# print( FEATURES )","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-17T08:56:35.789734Z","iopub.execute_input":"2025-09-17T08:56:35.789890Z","iopub.status.idle":"2025-09-17T08:56:35.798911Z","shell.execute_reply.started":"2025-09-17T08:56:35.789878Z","shell.execute_reply":"2025-09-17T08:56:35.798346Z"}},"outputs":[],"execution_count":14},{"cell_type":"code","source":"# FOLDS = 5\n# skf = StratifiedKFold(n_splits=FOLDS, random_state=44, shuffle=True)\n\n# # SAVE OOF AND TEST PREDS\n# oof = np.zeros( len(train_data) )\n# pred = np.zeros( len(test_data) )\n\n# # TRAIN/INFER K-FOLD\n# for i, (train_index, test_index) in enumerate(skf.split(train_data, train_data[TARGET])):\n    \n#     # PRINT FOLD NUMBER\n#     if i%FOLDS==0: print()\n#     print(\"#\"*25)\n#     print(f\"### Fold {i+1} ###\")\n#     print(\"#\"*25)\n    \n#     # GET TRAIN, VALID, TEST\n#     X_train = train_data.iloc[train_index,].copy()\n#     y_train = train_data[TARGET].iloc[train_index]\n    \n#     X_valid = train_data.iloc[test_index,].copy()\n#     y_valid = train_data[TARGET].iloc[test_index]\n    \n#     X_test = test_data.copy()\n    \n#     # TARGET ENCODE AND STANDARD ENCODE\n#     print(f\"TE for {len(TARGET_ENCODE)} features...\")\n#     for j,c in enumerate(TARGET_ENCODE):\n#         c = c.replace(\"-TE\",\"\")\n#         print(f\"{j}, \",end=\"\") \n        \n#         # TARGET ENCODE \n#         enc_auto = TargetEncoder(smooth=21,\n#                                  split_method=\"random\", \n#                                  seed=44, \n#                                  stat=\"mean\",\n#                                  n_folds=5)\n#         X_train[f\"{c}-TE\"] = enc_auto.fit_transform(X_train[[c]], y_train)\n#         X_valid[f\"{c}-TE\"] = enc_auto.transform(X_valid[[c]])\n#         X_test[f\"{c}-TE\"] = enc_auto.transform(X_test[[c]])\n        \n#         # STANDARD ENCODE\n#         m = X_train[f\"{c}-TE\"].mean()\n#         s = X_train[f\"{c}-TE\"].std()\n#         X_train[f\"{c}-TE\"] = (X_train[f\"{c}-TE\"]-m)/s\n#         X_valid[f\"{c}-TE\"] = (X_valid[f\"{c}-TE\"]-m)/s\n#         X_test[f\"{c}-TE\"] = (X_test[f\"{c}-TE\"]-m)/s\n        \n#     print()    \n#     X_train = X_train[FEATURES]\n#     X_valid = X_valid[FEATURES]\n#     X_test = X_test[FEATURES]\n        \n#     # FIT LOGISTICREGRESSION MODEL\n#     model = LogisticRegression(penalty='l1', C=1.0, max_iter=10000)\n#     model.fit(X_train, y_train) \n    \n#     # INFER OOF AND TEST\n#     oof[test_index.get()] = model.predict(X_valid).to_numpy()\n#     if i==0: \n#         pred = model.predict_proba(X_test).to_numpy()\n#     else: \n#         pred += model.predict_proba(X_test).to_numpy()\n    \n# pred /= FOLDS\n# pred = pred.argmax(axis=1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-17T08:56:35.799561Z","iopub.execute_input":"2025-09-17T08:56:35.799757Z","iopub.status.idle":"2025-09-17T08:56:35.810896Z","shell.execute_reply.started":"2025-09-17T08:56:35.799736Z","shell.execute_reply":"2025-09-17T08:56:35.810204Z"}},"outputs":[],"execution_count":15},{"cell_type":"code","source":"# import pandas as pd\n# import matplotlib.pyplot as plt\n\n# # Example data\n# data = {'Names': FEATURES,\n#         'Numbers': np.sum(model.coef_).to_numpy()}\n\n# # Create a DataFrame\n# df = pd.DataFrame(data)\n# df = df.sort_values(\"Numbers\",ascending=True)\n# df = df.loc[df.Numbers != 0]\n\n# # Create a horizontal bar plot\n# df.plot(x='Names', y='Numbers', kind='barh', legend=False, figsize=(5, 8))\n\n# # Show the plot\n# plt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-17T08:56:35.811712Z","iopub.execute_input":"2025-09-17T08:56:35.811898Z","iopub.status.idle":"2025-09-17T08:56:35.821997Z","shell.execute_reply.started":"2025-09-17T08:56:35.811884Z","shell.execute_reply":"2025-09-17T08:56:35.821291Z"}},"outputs":[],"execution_count":16},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}