{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":12806871,"sourceType":"datasetVersion","datasetId":8097839}],"dockerImageVersionId":31090,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %load_ext cudf.pandas","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-07T16:35:09.552067Z","iopub.execute_input":"2025-10-07T16:35:09.552390Z","iopub.status.idle":"2025-10-07T16:35:09.557143Z","shell.execute_reply.started":"2025-10-07T16:35:09.552359Z","shell.execute_reply":"2025-10-07T16:35:09.556286Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"import numpy as np, pandas as pd, itertools\nfrom tqdm import tqdm\nfrom sklearn.model_selection import train_test_split, StratifiedKFold\nfrom sklearn.feature_selection import SequentialFeatureSelector\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.metrics import f1_score\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import AdaBoostClassifier, VotingClassifier, RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.base import BaseEstimator, ClassifierMixin","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-07T16:35:09.558115Z","iopub.execute_input":"2025-10-07T16:35:09.558652Z","iopub.status.idle":"2025-10-07T16:35:10.741947Z","shell.execute_reply.started":"2025-10-07T16:35:09.558622Z","shell.execute_reply":"2025-10-07T16:35:10.741024Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"pd.set_option('display.max_columns', 500)\nRANDOM_STATE = 44","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-07T16:35:10.742994Z","iopub.execute_input":"2025-10-07T16:35:10.743474Z","iopub.status.idle":"2025-10-07T16:35:10.748640Z","shell.execute_reply.started":"2025-10-07T16:35:10.743446Z","shell.execute_reply":"2025-10-07T16:35:10.747523Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"train_path = \"/kaggle/input/indigenous-knowledge/train (1).csv\"\ntest_path = \"/kaggle/input/indigenous-knowledge/test.csv\"","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-07T16:35:10.749822Z","iopub.execute_input":"2025-10-07T16:35:10.750718Z","iopub.status.idle":"2025-10-07T16:35:10.769484Z","shell.execute_reply.started":"2025-10-07T16:35:10.750684Z","shell.execute_reply":"2025-10-07T16:35:10.768363Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"train = pd.read_csv(train_path)\ntrain[\"prediction_time\"] = pd.to_datetime( train[\"prediction_time\"] )\ntrain[\"month\"] = train[\"prediction_time\"].dt.month.astype(\"float32\")\ntrain[\"day\"] = train[\"prediction_time\"].dt.day.astype(\"float32\")\ntrain[\"hour\"] = train[\"prediction_time\"].dt.hour.astype(\"float32\")\ntrain[\"pred_date\"] = train[\"prediction_time\"].dt.date.astype(\"str\")\ntrain[\"dow\"] = train[\"prediction_time\"].dt.dayofweek.astype(\"float32\")\ntrain[\"temp\"] = train[\"predicted_intensity\"].map({0: 0, 0.33: 1, 0.66: 2, 1: 3}).astype(\"int32\")\ny = train[\"Target\"].map({\"NORAIN\": 0, \"SMALLRAIN\": 1, \"MEDIUMRAIN\": 2, \"HEAVYRAIN\": 3}).astype(\"int32\")\ntrain[\"prediction_correct\"] = ( train[\"temp\"] == y ).astype(\"int32\")\ntrain = train.drop(columns=[\"ID\", \"prediction_time\", \"Target\", \"temp\"])\nprint( train.shape )\ntrain.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-07T16:35:10.771155Z","iopub.execute_input":"2025-10-07T16:35:10.771533Z","iopub.status.idle":"2025-10-07T16:35:10.898073Z","shell.execute_reply.started":"2025-10-07T16:35:10.771401Z","shell.execute_reply":"2025-10-07T16:35:10.896711Z"}},"outputs":[{"name":"stdout","text":"(10928, 15)\n","output_type":"stream"},{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"   user_id  confidence  predicted_intensity community    district indicator  \\\n0       11         0.3                  0.0    Tumfa   atiwa_west       NaN   \n1       17         0.3                  0.0  Kwabeng   atiwa_west       NaN   \n2       19         0.3                  0.0  Akropong  atiwa_west       NaN   \n3       23         0.3                  0.0   Asamama  atiwa_west       NaN   \n4       23         0.3                  0.0   Asamama  atiwa_west       NaN   \n\n  indicator_description time_observed  forecast_length  month   day  hour  \\\n0                   NaN           NaN               12    5.0  30.0  11.0   \n1                   NaN           NaN               12    5.0  30.0  11.0   \n2                   NaN           NaN               12    5.0  30.0  11.0   \n3                   NaN           NaN               12    5.0  30.0  11.0   \n4                   NaN           NaN               12    5.0  30.0  11.0   \n\n    pred_date  dow  prediction_correct  \n0  2025-05-30  4.0                   0  \n1  2025-05-30  4.0                   0  \n2  2025-05-30  4.0                   0  \n3  2025-05-30  4.0                   0  \n4  2025-05-30  4.0                   0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>user_id</th>\n      <th>confidence</th>\n      <th>predicted_intensity</th>\n      <th>community</th>\n      <th>district</th>\n      <th>indicator</th>\n      <th>indicator_description</th>\n      <th>time_observed</th>\n      <th>forecast_length</th>\n      <th>month</th>\n      <th>day</th>\n      <th>hour</th>\n      <th>pred_date</th>\n      <th>dow</th>\n      <th>prediction_correct</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>11</td>\n      <td>0.3</td>\n      <td>0.0</td>\n      <td>Tumfa</td>\n      <td>atiwa_west</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>12</td>\n      <td>5.0</td>\n      <td>30.0</td>\n      <td>11.0</td>\n      <td>2025-05-30</td>\n      <td>4.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>17</td>\n      <td>0.3</td>\n      <td>0.0</td>\n      <td>Kwabeng</td>\n      <td>atiwa_west</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>12</td>\n      <td>5.0</td>\n      <td>30.0</td>\n      <td>11.0</td>\n      <td>2025-05-30</td>\n      <td>4.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>19</td>\n      <td>0.3</td>\n      <td>0.0</td>\n      <td>Akropong</td>\n      <td>atiwa_west</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>12</td>\n      <td>5.0</td>\n      <td>30.0</td>\n      <td>11.0</td>\n      <td>2025-05-30</td>\n      <td>4.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>23</td>\n      <td>0.3</td>\n      <td>0.0</td>\n      <td>Asamama</td>\n      <td>atiwa_west</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>12</td>\n      <td>5.0</td>\n      <td>30.0</td>\n      <td>11.0</td>\n      <td>2025-05-30</td>\n      <td>4.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>23</td>\n      <td>0.3</td>\n      <td>0.0</td>\n      <td>Asamama</td>\n      <td>atiwa_west</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>12</td>\n      <td>5.0</td>\n      <td>30.0</td>\n      <td>11.0</td>\n      <td>2025-05-30</td>\n      <td>4.0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":5},{"cell_type":"code","source":"test = pd.read_csv(test_path)\ntest[\"prediction_time\"] = pd.to_datetime( test[\"prediction_time\"] )\ntest[\"month\"] = test[\"prediction_time\"].dt.month.astype(\"float32\")\ntest[\"day\"] = test[\"prediction_time\"].dt.day.astype(\"float32\")\ntest[\"hour\"] = test[\"prediction_time\"].dt.hour.astype(\"float32\")\ntest[\"pred_date\"] = test[\"prediction_time\"].dt.date.astype(\"str\")\ntest[\"dow\"] = test[\"prediction_time\"].dt.dayofweek.astype(\"float32\")\ntest_id = test[\"ID\"]\ntest = test.drop(columns=[\"ID\", \"prediction_time\"])\nprint( test.shape )\ntest.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-07T16:35:10.901221Z","iopub.execute_input":"2025-10-07T16:35:10.901539Z","iopub.status.idle":"2025-10-07T16:35:10.950868Z","shell.execute_reply.started":"2025-10-07T16:35:10.901514Z","shell.execute_reply":"2025-10-07T16:35:10.949904Z"}},"outputs":[{"name":"stdout","text":"(2732, 14)\n","output_type":"stream"},{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"   user_id  confidence  predicted_intensity         community    district  \\\n0       77         0.3                  0.0  ASSIN BROFOYEDUR  assin_fosu   \n1       77         0.3                  0.0  ASSIN BROFOYEDUR  assin_fosu   \n2       77         0.3                  0.0  ASSIN BROFOYEDUR  assin_fosu   \n3       77         0.3                  0.0  ASSIN BROFOYEDUR  assin_fosu   \n4       77         0.3                  0.0  ASSIN BROFOYEDUR  assin_fosu   \n\n  indicator indicator_description time_observed  forecast_length  month   day  \\\n0       NaN                   NaN           NaN               24    7.0  20.0   \n1       NaN                   NaN           NaN               24    7.0  20.0   \n2       NaN                   NaN           NaN               24    7.0  20.0   \n3       NaN                   NaN           NaN               24    7.0  20.0   \n4       NaN                   NaN           NaN               24    7.0  20.0   \n\n   hour   pred_date  dow  \n0  19.0  2025-07-20  6.0  \n1  19.0  2025-07-20  6.0  \n2  19.0  2025-07-20  6.0  \n3  19.0  2025-07-20  6.0  \n4  19.0  2025-07-20  6.0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>user_id</th>\n      <th>confidence</th>\n      <th>predicted_intensity</th>\n      <th>community</th>\n      <th>district</th>\n      <th>indicator</th>\n      <th>indicator_description</th>\n      <th>time_observed</th>\n      <th>forecast_length</th>\n      <th>month</th>\n      <th>day</th>\n      <th>hour</th>\n      <th>pred_date</th>\n      <th>dow</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>77</td>\n      <td>0.3</td>\n      <td>0.0</td>\n      <td>ASSIN BROFOYEDUR</td>\n      <td>assin_fosu</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>24</td>\n      <td>7.0</td>\n      <td>20.0</td>\n      <td>19.0</td>\n      <td>2025-07-20</td>\n      <td>6.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>77</td>\n      <td>0.3</td>\n      <td>0.0</td>\n      <td>ASSIN BROFOYEDUR</td>\n      <td>assin_fosu</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>24</td>\n      <td>7.0</td>\n      <td>20.0</td>\n      <td>19.0</td>\n      <td>2025-07-20</td>\n      <td>6.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>77</td>\n      <td>0.3</td>\n      <td>0.0</td>\n      <td>ASSIN BROFOYEDUR</td>\n      <td>assin_fosu</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>24</td>\n      <td>7.0</td>\n      <td>20.0</td>\n      <td>19.0</td>\n      <td>2025-07-20</td>\n      <td>6.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>77</td>\n      <td>0.3</td>\n      <td>0.0</td>\n      <td>ASSIN BROFOYEDUR</td>\n      <td>assin_fosu</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>24</td>\n      <td>7.0</td>\n      <td>20.0</td>\n      <td>19.0</td>\n      <td>2025-07-20</td>\n      <td>6.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>77</td>\n      <td>0.3</td>\n      <td>0.0</td>\n      <td>ASSIN BROFOYEDUR</td>\n      <td>assin_fosu</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>24</td>\n      <td>7.0</td>\n      <td>20.0</td>\n      <td>19.0</td>\n      <td>2025-07-20</td>\n      <td>6.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":6},{"cell_type":"code","source":"one_hot_cols = [\"community\", \"district\", \"indicator\", \"pred_date\"]\nother_cols = [\"user_id\", \"confidence\", \"predicted_intensity\",\n              \"forecast_length\", \"month\", \"day\", \"hour\", \"dow\"]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-07T16:35:10.951997Z","iopub.execute_input":"2025-10-07T16:35:10.952343Z","iopub.status.idle":"2025-10-07T16:35:10.957147Z","shell.execute_reply.started":"2025-10-07T16:35:10.952320Z","shell.execute_reply":"2025-10-07T16:35:10.956240Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"combined = pd.concat([train, test], axis=0, ignore_index=True)\n\nfor c in combined.columns:\n    if combined[c].dtype == \"object\":\n        if c in [\"community\", \"indicator\", \"indicator_description\", \"time_observed\"]:\n            combined[c] = combined[c].str.lower().str.strip().str.replace(r\"\\s+\", \" \", regex=True)\n        combined[c], _ = combined[c].factorize()\n        combined[c] = combined[c].astype(\"int32\")\n    elif combined[c].dtype == \"int64\": \n        combined[c] = combined[c].astype(\"int32\")\n    elif combined[c].dtype == \"float64\":\n        combined[c] = combined[c].astype(\"float32\")\ntrain = combined[:len(train)].copy()\ntest = combined[len(train):].reset_index(drop=True).copy()\ndel combined","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-07T16:35:10.958145Z","iopub.execute_input":"2025-10-07T16:35:10.958390Z","iopub.status.idle":"2025-10-07T16:35:11.043659Z","shell.execute_reply.started":"2025-10-07T16:35:10.958367Z","shell.execute_reply":"2025-10-07T16:35:11.040027Z"}},"outputs":[],"execution_count":8},{"cell_type":"code","source":"ohe = OneHotEncoder(sparse_output=False, handle_unknown=\"ignore\")\ntrain_ohe = ohe.fit_transform(train[one_hot_cols])\ncolumns_ohe = ohe.get_feature_names_out()\ntrain_ohe = pd.DataFrame(train_ohe, columns=columns_ohe)\ntrain = pd.concat([train_ohe, train[other_cols]], axis=1)\n# train[\"Target\"] = y\ntest_ohe = ohe.transform(test[one_hot_cols])\ntest_ohe = pd.DataFrame(test_ohe, columns=columns_ohe)\ntest = pd.concat([test_ohe, test[other_cols]], axis=1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-07T16:35:11.044858Z","iopub.execute_input":"2025-10-07T16:35:11.048225Z","iopub.status.idle":"2025-10-07T16:35:11.127362Z","shell.execute_reply.started":"2025-10-07T16:35:11.048184Z","shell.execute_reply":"2025-10-07T16:35:11.126439Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"# def knn_encoding(train, test, cols, target=\"Target\"):\n#     def euclidean_distance(X_1, X_2):\n#         return sum([ (x_1 - x_2)**2 for x_1, x_2 in zip(X_1, X_2)])**0.5\n#     correct_predictions = train.loc[train[\"prediction_correct\"]==1].copy()\n#     wrong_predictions = train.loc[train[\"prediction_correct\"]==0].copy()\n\n#     correct_predictions = correct_predictions.groupby(target)[cols].mean()\n#     wrong_predictions = wrong_predictions.groupby(target)[cols].mean()\n\n#     correct_encoding = [[], [], [], []]\n#     wrong_encoding = [[], [], [], []]\n\n#     for _, t_rows in tqdm(train[cols].iterrows(), total=len(train), desc=\"Processing train rows\"):\n#         for i, c_rows in correct_predictions.iterrows():\n#             correct_encoding[i].append(euclidean_distance(t_rows, c_rows))\n#         for i, w_rows in wrong_predictions.iterrows():\n#             wrong_encoding[i].append(euclidean_distance(t_rows, w_rows))\n\n#     c_df = pd.DataFrame(correct_encoding).T\n#     c_df.columns = [\"knn_encoding_c_0\", \"knn_encoding_c_1\", \"knn_encoding_c_2\", \"knn_encoding_c_3\"]\n#     w_df = pd.DataFrame(wrong_encoding).T\n#     w_df.columns = [\"knn_encoding_w_0\", \"knn_encoding_w_1\", \"knn_encoding_w_2\", \"knn_encoding_w_3\"]\n#     train = c_df.join(w_df)\n\n#     correct_encoding = [[], [], [], []]\n#     wrong_encoding = [[], [], [], []]\n\n#     for _, t_rows in tqdm(test[cols].iterrows(), total=len(test), desc=\"Processing test rows\"):\n#         for i, c_rows in correct_predictions.iterrows():\n#             correct_encoding[i].append(euclidean_distance(t_rows, c_rows))\n#         for i, w_rows in wrong_predictions.iterrows():\n#             wrong_encoding[i].append(euclidean_distance(t_rows, w_rows))\n\n#     c_df = pd.DataFrame(correct_encoding).T\n#     c_df.columns = [\"knn_encoding_c_0\", \"knn_encoding_c_1\", \"knn_encoding_c_2\", \"knn_encoding_c_3\"]\n#     w_df = pd.DataFrame(wrong_encoding).T\n#     w_df.columns = [\"knn_encoding_w_0\", \"knn_encoding_w_1\", \"knn_encoding_w_2\", \"knn_encoding_w_3\"]\n#     test = c_df.join(w_df)\n\n#     return (train, test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-07T16:35:11.128310Z","iopub.execute_input":"2025-10-07T16:35:11.128557Z","iopub.status.idle":"2025-10-07T16:35:11.133281Z","shell.execute_reply.started":"2025-10-07T16:35:11.128537Z","shell.execute_reply":"2025-10-07T16:35:11.132289Z"}},"outputs":[],"execution_count":10},{"cell_type":"code","source":"# cols_encode = list(columns_ohe)+other_cols[:-1]\n# train_encoded, test_encoded = knn_encoding(train, test, cols_encode)\n# train = pd.concat([train[cols_encode], train_encoded], axis=1)\n# test = pd.concat([test[cols_encode], test_encoded], axis=1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-07T16:35:11.134305Z","iopub.execute_input":"2025-10-07T16:35:11.134585Z","iopub.status.idle":"2025-10-07T16:35:11.154427Z","shell.execute_reply.started":"2025-10-07T16:35:11.134564Z","shell.execute_reply":"2025-10-07T16:35:11.153468Z"}},"outputs":[],"execution_count":11},{"cell_type":"code","source":"# skf = StratifiedKFold(n_splits=5, shuffle=True, random_state=RANDOM_STATE)\n# def target_encode(train, test, col, target=\"Target\", kfold=skf, smooth=30):\n    \n#     train = train.reset_index(drop=True)\n#     test = test.reset_index(drop=True)\n    \n#     for train_index, test_index in skf.split(train, train[target]):\n        \n#         df_tmp = train.loc[train_index].copy()\n#         mn = df_tmp[target].value_counts(normalize=True)\n#         df_tmp_probs = df_tmp.groupby(col)[target].value_counts(normalize=True).unstack(fill_value=0)\n#         df_tmp_counts = df_tmp.groupby(col)[target].count()\n#         df_tmp = df_tmp_probs.join(df_tmp_counts.rename(\"count\")).reset_index()\n        \n#         new_cols = []\n#         for c in df_tmp.columns:\n#             if c not in [\"count\", col]:\n#                 name = 'TE_'+str(c)+\"_\"+col\n#                 new_cols.append(name)\n#                 df_tmp[name] = ((df_tmp[c]*df_tmp[\"count\"])+(mn.iloc[c]*smooth)) / (df_tmp[\"count\"]+smooth)\n                \n#         df_tmp_m = train[[col]].merge(df_tmp, how='left', left_on=col, right_on=col)\n#         df_tmp_m.loc[test_index, new_cols] = df_tmp_m.loc[test_index, new_cols]\n        \n#         for c in new_cols:\n#             i = int(c.split(\"_\")[1])\n#             train[c] = df_tmp_m[c].fillna(mn.iloc[i]).values \n#             train[c] = train[c].astype(\"float32\")\n    \n#     df_tmp_probs = train.groupby(col)[target].value_counts(normalize=True).unstack(fill_value=0)\n#     df_tmp_counts = train.groupby(col)[target].count()\n#     df_tmp = df_tmp_probs.join(df_tmp_counts.rename(\"count\")).reset_index()\n#     mn = train[target].value_counts(normalize=True)\n    \n#     for c in df_tmp.columns:\n#         if c not in [\"count\", col]:\n#             name = 'TE_'+str(c)+\"_\"+col\n#             df_tmp[name] = ((df_tmp[c]*df_tmp[\"count\"])+(mn.iloc[c]*smooth)) / (df_tmp[\"count\"]+smooth)\n\n#     df_tmp_m = test[[col]].merge(df_tmp, how='left', left_on=col, right_on=col)\n#     for c in new_cols:\n#         i = int(c.split(\"_\")[1])\n#         test[c] = df_tmp_m[c].fillna(mn.iloc[i]).values\n#         test[c] = test[c].astype(\"float32\")\n        \n#     train = train.drop(columns=[c])\n#     test = test.drop(columns=[c])\n    \n#     return (train, test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-07T16:35:11.155646Z","iopub.execute_input":"2025-10-07T16:35:11.156170Z","iopub.status.idle":"2025-10-07T16:35:11.173331Z","shell.execute_reply.started":"2025-10-07T16:35:11.156138Z","shell.execute_reply":"2025-10-07T16:35:11.172372Z"}},"outputs":[],"execution_count":12},{"cell_type":"code","source":"# for c in one_hot_cols:\n#     train, test = target_encode(train, test, c)\n# train = train.drop(columns=[\"Target\"])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-07T16:35:11.174458Z","iopub.execute_input":"2025-10-07T16:35:11.174725Z","iopub.status.idle":"2025-10-07T16:35:11.196020Z","shell.execute_reply.started":"2025-10-07T16:35:11.174702Z","shell.execute_reply":"2025-10-07T16:35:11.194910Z"}},"outputs":[],"execution_count":13},{"cell_type":"code","source":"class PretrainedModelWrapper(BaseEstimator, ClassifierMixin):\n    def __init__(self, model):\n        self.model = model\n    def fit(self, X, y):\n        # Do nothing, model already trained\n        return self\n    def predict_proba(self, X):\n        return self.model.predict_proba(X)\n    def predict(self, X):\n        return self.model.predict(X)\n    def get_params(self, deep=True):\n        return {\"model\": self.model}\n    \n    def set_params(self, **params):\n        return self","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-07T16:35:11.197145Z","iopub.execute_input":"2025-10-07T16:35:11.197743Z","iopub.status.idle":"2025-10-07T16:35:11.216119Z","shell.execute_reply.started":"2025-10-07T16:35:11.197709Z","shell.execute_reply":"2025-10-07T16:35:11.215055Z"}},"outputs":[],"execution_count":14},{"cell_type":"code","source":"import xgboost as xgb, time\nprint(f\"Using XGBoost version\",xgb.__version__)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-07T16:35:11.217089Z","iopub.execute_input":"2025-10-07T16:35:11.217406Z","iopub.status.idle":"2025-10-07T16:35:11.235992Z","shell.execute_reply.started":"2025-10-07T16:35:11.217377Z","shell.execute_reply":"2025-10-07T16:35:11.235040Z"}},"outputs":[{"name":"stdout","text":"Using XGBoost version 2.0.3\n","output_type":"stream"}],"execution_count":15},{"cell_type":"code","source":"%%time\n\nFOLDS = 20\nskf2 = StratifiedKFold(n_splits=FOLDS, shuffle=True, random_state=RANDOM_STATE)\n\noof = np.zeros((len(train), 4))\npred = np.zeros((len(test), 4))\n\nfor i, (train_index, test_index) in enumerate(skf2.split(train, y)):\n\n    print(\"#\"*25)\n    print(f\"### Fold {i+1}\")\n    print(\"#\"*25)\n    \n    x_train = train.loc[train_index].copy()\n    y_train = y.loc[train_index].copy()\n    x_valid = train.loc[test_index].copy()\n    y_valid = y.loc[test_index].copy()\n    x_test = test.copy()\n\n    # x_train[\"Target\"] = y_train\n    # for c in [\"community\", \"district\", \"indicator\", \"indicator_description\"]:\n    #     x_train, x_valid, x_test = target_encode(x_train, x_valid, x_test, c)\n    # x_train = x_train.drop(columns=[\"Target\"])\n    \n    forest = RandomForestClassifier(\n        n_estimators=300,\n        n_jobs=-1,\n        random_state=RANDOM_STATE\n    )\n\n    forest.fit(x_train, y_train)\n\n    xgb = XGBClassifier(\n        random_state=RANDOM_STATE,\n        max_depth=10, \n        colsample_bytree=0.9, \n        subsample=0.9, \n        n_estimators=2000, \n        learning_rate=0.01, \n        num_class=4,\n        early_stopping_rounds=25,\n        objective=\"multi:softprob\",\n        eval_metric=\"mlogloss\"\n    )\n    \n    xgb.fit(\n        x_train, y_train,\n        eval_set=[(x_valid, y_valid)],\n        verbose=100\n    )\n\n    proba_forest = forest.predict_proba(x_valid)\n    proba_xgb = xgb.predict_proba(x_valid)\n    # INFER OOF\n    oof[test_index] = (proba_forest + proba_xgb) / 2\n\n    proba_forest = forest.predict_proba(x_test)\n    proba_xgb = xgb.predict_proba(x_test)\n    # INFER TEST\n    pred += (proba_forest + proba_xgb) / 2\n\n# COMPUTE AVERAGE TEST PREDS\npred /= FOLDS","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-07T16:35:11.236923Z","iopub.execute_input":"2025-10-07T16:35:11.237293Z","iopub.status.idle":"2025-10-07T16:40:52.565812Z","shell.execute_reply.started":"2025-10-07T16:35:11.237264Z","shell.execute_reply":"2025-10-07T16:40:52.565035Z"}},"outputs":[{"name":"stdout","text":"#########################\n### Fold 1\n#########################\n[0]\tvalidation_0-mlogloss:1.36728\n[100]\tvalidation_0-mlogloss:0.44681\n[200]\tvalidation_0-mlogloss:0.17623\n[300]\tvalidation_0-mlogloss:0.07774\n[400]\tvalidation_0-mlogloss:0.03954\n[500]\tvalidation_0-mlogloss:0.02393\n[600]\tvalidation_0-mlogloss:0.01715\n[700]\tvalidation_0-mlogloss:0.01411\n[800]\tvalidation_0-mlogloss:0.01266\n[900]\tvalidation_0-mlogloss:0.01193\n[1000]\tvalidation_0-mlogloss:0.01139\n[1100]\tvalidation_0-mlogloss:0.01105\n[1200]\tvalidation_0-mlogloss:0.01077\n[1300]\tvalidation_0-mlogloss:0.01053\n[1400]\tvalidation_0-mlogloss:0.01039\n[1500]\tvalidation_0-mlogloss:0.01026\n[1600]\tvalidation_0-mlogloss:0.01008\n[1681]\tvalidation_0-mlogloss:0.00999\n#########################\n### Fold 2\n#########################\n[0]\tvalidation_0-mlogloss:1.36740\n[100]\tvalidation_0-mlogloss:0.45610\n[200]\tvalidation_0-mlogloss:0.18564\n[300]\tvalidation_0-mlogloss:0.08512\n[400]\tvalidation_0-mlogloss:0.04460\n[500]\tvalidation_0-mlogloss:0.02620\n[600]\tvalidation_0-mlogloss:0.01745\n[700]\tvalidation_0-mlogloss:0.01274\n[800]\tvalidation_0-mlogloss:0.01022\n[900]\tvalidation_0-mlogloss:0.00874\n[1000]\tvalidation_0-mlogloss:0.00773\n[1100]\tvalidation_0-mlogloss:0.00695\n[1200]\tvalidation_0-mlogloss:0.00641\n[1300]\tvalidation_0-mlogloss:0.00599\n[1400]\tvalidation_0-mlogloss:0.00564\n[1500]\tvalidation_0-mlogloss:0.00540\n[1600]\tvalidation_0-mlogloss:0.00522\n[1700]\tvalidation_0-mlogloss:0.00505\n[1800]\tvalidation_0-mlogloss:0.00491\n[1900]\tvalidation_0-mlogloss:0.00479\n[1999]\tvalidation_0-mlogloss:0.00467\n#########################\n### Fold 3\n#########################\n[0]\tvalidation_0-mlogloss:1.36730\n[100]\tvalidation_0-mlogloss:0.44915\n[200]\tvalidation_0-mlogloss:0.17977\n[300]\tvalidation_0-mlogloss:0.08043\n[400]\tvalidation_0-mlogloss:0.04180\n[500]\tvalidation_0-mlogloss:0.02540\n[600]\tvalidation_0-mlogloss:0.01769\n[700]\tvalidation_0-mlogloss:0.01395\n[800]\tvalidation_0-mlogloss:0.01186\n[900]\tvalidation_0-mlogloss:0.01053\n[1000]\tvalidation_0-mlogloss:0.00962\n[1100]\tvalidation_0-mlogloss:0.00898\n[1200]\tvalidation_0-mlogloss:0.00847\n[1300]\tvalidation_0-mlogloss:0.00810\n[1400]\tvalidation_0-mlogloss:0.00786\n[1500]\tvalidation_0-mlogloss:0.00767\n[1600]\tvalidation_0-mlogloss:0.00755\n[1700]\tvalidation_0-mlogloss:0.00744\n[1800]\tvalidation_0-mlogloss:0.00734\n[1885]\tvalidation_0-mlogloss:0.00727\n#########################\n### Fold 4\n#########################\n[0]\tvalidation_0-mlogloss:1.36747\n[100]\tvalidation_0-mlogloss:0.45223\n[200]\tvalidation_0-mlogloss:0.18354\n[300]\tvalidation_0-mlogloss:0.08487\n[400]\tvalidation_0-mlogloss:0.04507\n[500]\tvalidation_0-mlogloss:0.02746\n[600]\tvalidation_0-mlogloss:0.01895\n[700]\tvalidation_0-mlogloss:0.01437\n[800]\tvalidation_0-mlogloss:0.01182\n[900]\tvalidation_0-mlogloss:0.01042\n[1000]\tvalidation_0-mlogloss:0.00951\n[1100]\tvalidation_0-mlogloss:0.00889\n[1200]\tvalidation_0-mlogloss:0.00840\n[1300]\tvalidation_0-mlogloss:0.00807\n[1400]\tvalidation_0-mlogloss:0.00777\n[1500]\tvalidation_0-mlogloss:0.00750\n[1600]\tvalidation_0-mlogloss:0.00729\n[1700]\tvalidation_0-mlogloss:0.00712\n[1800]\tvalidation_0-mlogloss:0.00700\n[1900]\tvalidation_0-mlogloss:0.00686\n[1999]\tvalidation_0-mlogloss:0.00676\n#########################\n### Fold 5\n#########################\n[0]\tvalidation_0-mlogloss:1.36732\n[100]\tvalidation_0-mlogloss:0.44338\n[200]\tvalidation_0-mlogloss:0.17208\n[300]\tvalidation_0-mlogloss:0.07399\n[400]\tvalidation_0-mlogloss:0.03545\n[500]\tvalidation_0-mlogloss:0.01918\n[600]\tvalidation_0-mlogloss:0.01178\n[700]\tvalidation_0-mlogloss:0.00811\n[800]\tvalidation_0-mlogloss:0.00609\n[900]\tvalidation_0-mlogloss:0.00488\n[1000]\tvalidation_0-mlogloss:0.00409\n[1100]\tvalidation_0-mlogloss:0.00353\n[1200]\tvalidation_0-mlogloss:0.00313\n[1300]\tvalidation_0-mlogloss:0.00285\n[1400]\tvalidation_0-mlogloss:0.00261\n[1500]\tvalidation_0-mlogloss:0.00242\n[1600]\tvalidation_0-mlogloss:0.00227\n[1700]\tvalidation_0-mlogloss:0.00215\n[1800]\tvalidation_0-mlogloss:0.00204\n[1900]\tvalidation_0-mlogloss:0.00194\n[1999]\tvalidation_0-mlogloss:0.00186\n#########################\n### Fold 6\n#########################\n[0]\tvalidation_0-mlogloss:1.36747\n[100]\tvalidation_0-mlogloss:0.45732\n[200]\tvalidation_0-mlogloss:0.18601\n[300]\tvalidation_0-mlogloss:0.08427\n[400]\tvalidation_0-mlogloss:0.04312\n[500]\tvalidation_0-mlogloss:0.02491\n[600]\tvalidation_0-mlogloss:0.01647\n[700]\tvalidation_0-mlogloss:0.01232\n[800]\tvalidation_0-mlogloss:0.01014\n[900]\tvalidation_0-mlogloss:0.00888\n[1000]\tvalidation_0-mlogloss:0.00798\n[1100]\tvalidation_0-mlogloss:0.00733\n[1200]\tvalidation_0-mlogloss:0.00686\n[1300]\tvalidation_0-mlogloss:0.00654\n[1400]\tvalidation_0-mlogloss:0.00630\n[1500]\tvalidation_0-mlogloss:0.00609\n[1600]\tvalidation_0-mlogloss:0.00595\n[1700]\tvalidation_0-mlogloss:0.00579\n[1800]\tvalidation_0-mlogloss:0.00567\n[1900]\tvalidation_0-mlogloss:0.00562\n[1999]\tvalidation_0-mlogloss:0.00556\n#########################\n### Fold 7\n#########################\n[0]\tvalidation_0-mlogloss:1.36749\n[100]\tvalidation_0-mlogloss:0.45585\n[200]\tvalidation_0-mlogloss:0.18923\n[300]\tvalidation_0-mlogloss:0.09371\n[400]\tvalidation_0-mlogloss:0.05688\n[500]\tvalidation_0-mlogloss:0.04199\n[600]\tvalidation_0-mlogloss:0.03626\n[700]\tvalidation_0-mlogloss:0.03407\n[800]\tvalidation_0-mlogloss:0.03339\n[900]\tvalidation_0-mlogloss:0.03322\n[958]\tvalidation_0-mlogloss:0.03321\n#########################\n### Fold 8\n#########################\n[0]\tvalidation_0-mlogloss:1.36741\n[100]\tvalidation_0-mlogloss:0.45011\n[200]\tvalidation_0-mlogloss:0.18109\n[300]\tvalidation_0-mlogloss:0.08418\n[400]\tvalidation_0-mlogloss:0.04732\n[500]\tvalidation_0-mlogloss:0.03225\n[600]\tvalidation_0-mlogloss:0.02540\n[700]\tvalidation_0-mlogloss:0.02215\n[800]\tvalidation_0-mlogloss:0.02059\n[900]\tvalidation_0-mlogloss:0.01992\n[1000]\tvalidation_0-mlogloss:0.01944\n[1100]\tvalidation_0-mlogloss:0.01923\n[1200]\tvalidation_0-mlogloss:0.01908\n[1258]\tvalidation_0-mlogloss:0.01904\n#########################\n### Fold 9\n#########################\n[0]\tvalidation_0-mlogloss:1.36712\n[100]\tvalidation_0-mlogloss:0.44219\n[200]\tvalidation_0-mlogloss:0.17397\n[300]\tvalidation_0-mlogloss:0.07671\n[400]\tvalidation_0-mlogloss:0.03808\n[500]\tvalidation_0-mlogloss:0.02225\n[600]\tvalidation_0-mlogloss:0.01498\n[700]\tvalidation_0-mlogloss:0.01141\n[800]\tvalidation_0-mlogloss:0.00941\n[900]\tvalidation_0-mlogloss:0.00822\n[1000]\tvalidation_0-mlogloss:0.00743\n[1100]\tvalidation_0-mlogloss:0.00686\n[1200]\tvalidation_0-mlogloss:0.00647\n[1300]\tvalidation_0-mlogloss:0.00614\n[1400]\tvalidation_0-mlogloss:0.00588\n[1500]\tvalidation_0-mlogloss:0.00574\n[1600]\tvalidation_0-mlogloss:0.00560\n[1700]\tvalidation_0-mlogloss:0.00546\n[1800]\tvalidation_0-mlogloss:0.00540\n[1834]\tvalidation_0-mlogloss:0.00540\n#########################\n### Fold 10\n#########################\n[0]\tvalidation_0-mlogloss:1.36735\n[100]\tvalidation_0-mlogloss:0.44695\n[200]\tvalidation_0-mlogloss:0.17774\n[300]\tvalidation_0-mlogloss:0.08062\n[400]\tvalidation_0-mlogloss:0.04228\n[500]\tvalidation_0-mlogloss:0.02612\n[600]\tvalidation_0-mlogloss:0.01882\n[700]\tvalidation_0-mlogloss:0.01522\n[800]\tvalidation_0-mlogloss:0.01331\n[900]\tvalidation_0-mlogloss:0.01231\n[1000]\tvalidation_0-mlogloss:0.01160\n[1100]\tvalidation_0-mlogloss:0.01120\n[1200]\tvalidation_0-mlogloss:0.01082\n[1300]\tvalidation_0-mlogloss:0.01062\n[1400]\tvalidation_0-mlogloss:0.01045\n[1491]\tvalidation_0-mlogloss:0.01040\n#########################\n### Fold 11\n#########################\n[0]\tvalidation_0-mlogloss:1.36753\n[100]\tvalidation_0-mlogloss:0.45879\n[200]\tvalidation_0-mlogloss:0.19107\n[300]\tvalidation_0-mlogloss:0.09479\n[400]\tvalidation_0-mlogloss:0.05833\n[500]\tvalidation_0-mlogloss:0.04395\n[600]\tvalidation_0-mlogloss:0.03680\n[700]\tvalidation_0-mlogloss:0.03329\n[800]\tvalidation_0-mlogloss:0.03101\n[900]\tvalidation_0-mlogloss:0.02975\n[1000]\tvalidation_0-mlogloss:0.02890\n[1100]\tvalidation_0-mlogloss:0.02841\n[1200]\tvalidation_0-mlogloss:0.02806\n[1300]\tvalidation_0-mlogloss:0.02793\n[1373]\tvalidation_0-mlogloss:0.02790\n#########################\n### Fold 12\n#########################\n[0]\tvalidation_0-mlogloss:1.36738\n[100]\tvalidation_0-mlogloss:0.44945\n[200]\tvalidation_0-mlogloss:0.17655\n[300]\tvalidation_0-mlogloss:0.07831\n[400]\tvalidation_0-mlogloss:0.03968\n[500]\tvalidation_0-mlogloss:0.02323\n[600]\tvalidation_0-mlogloss:0.01605\n[700]\tvalidation_0-mlogloss:0.01265\n[800]\tvalidation_0-mlogloss:0.01052\n[900]\tvalidation_0-mlogloss:0.00917\n[1000]\tvalidation_0-mlogloss:0.00824\n[1100]\tvalidation_0-mlogloss:0.00754\n[1200]\tvalidation_0-mlogloss:0.00707\n[1300]\tvalidation_0-mlogloss:0.00673\n[1400]\tvalidation_0-mlogloss:0.00652\n[1500]\tvalidation_0-mlogloss:0.00632\n[1600]\tvalidation_0-mlogloss:0.00619\n[1700]\tvalidation_0-mlogloss:0.00606\n[1800]\tvalidation_0-mlogloss:0.00596\n[1900]\tvalidation_0-mlogloss:0.00587\n[1948]\tvalidation_0-mlogloss:0.00584\n#########################\n### Fold 13\n#########################\n[0]\tvalidation_0-mlogloss:1.36720\n[100]\tvalidation_0-mlogloss:0.44336\n[200]\tvalidation_0-mlogloss:0.17178\n[300]\tvalidation_0-mlogloss:0.07293\n[400]\tvalidation_0-mlogloss:0.03469\n[500]\tvalidation_0-mlogloss:0.01914\n[600]\tvalidation_0-mlogloss:0.01255\n[700]\tvalidation_0-mlogloss:0.00946\n[800]\tvalidation_0-mlogloss:0.00789\n[900]\tvalidation_0-mlogloss:0.00706\n[1000]\tvalidation_0-mlogloss:0.00646\n[1100]\tvalidation_0-mlogloss:0.00612\n[1200]\tvalidation_0-mlogloss:0.00580\n[1300]\tvalidation_0-mlogloss:0.00561\n[1400]\tvalidation_0-mlogloss:0.00547\n[1500]\tvalidation_0-mlogloss:0.00531\n[1600]\tvalidation_0-mlogloss:0.00517\n[1700]\tvalidation_0-mlogloss:0.00503\n[1800]\tvalidation_0-mlogloss:0.00492\n[1900]\tvalidation_0-mlogloss:0.00488\n[1999]\tvalidation_0-mlogloss:0.00480\n#########################\n### Fold 14\n#########################\n[0]\tvalidation_0-mlogloss:1.36745\n[100]\tvalidation_0-mlogloss:0.45208\n[200]\tvalidation_0-mlogloss:0.18251\n[300]\tvalidation_0-mlogloss:0.08514\n[400]\tvalidation_0-mlogloss:0.04765\n[500]\tvalidation_0-mlogloss:0.03231\n[600]\tvalidation_0-mlogloss:0.02485\n[700]\tvalidation_0-mlogloss:0.02076\n[800]\tvalidation_0-mlogloss:0.01803\n[900]\tvalidation_0-mlogloss:0.01627\n[1000]\tvalidation_0-mlogloss:0.01508\n[1100]\tvalidation_0-mlogloss:0.01410\n[1200]\tvalidation_0-mlogloss:0.01323\n[1300]\tvalidation_0-mlogloss:0.01278\n[1400]\tvalidation_0-mlogloss:0.01247\n[1500]\tvalidation_0-mlogloss:0.01224\n[1600]\tvalidation_0-mlogloss:0.01211\n[1700]\tvalidation_0-mlogloss:0.01192\n[1800]\tvalidation_0-mlogloss:0.01182\n[1847]\tvalidation_0-mlogloss:0.01179\n#########################\n### Fold 15\n#########################\n[0]\tvalidation_0-mlogloss:1.36729\n[100]\tvalidation_0-mlogloss:0.45023\n[200]\tvalidation_0-mlogloss:0.18322\n[300]\tvalidation_0-mlogloss:0.08642\n[400]\tvalidation_0-mlogloss:0.04976\n[500]\tvalidation_0-mlogloss:0.03483\n[600]\tvalidation_0-mlogloss:0.02821\n[700]\tvalidation_0-mlogloss:0.02503\n[800]\tvalidation_0-mlogloss:0.02316\n[900]\tvalidation_0-mlogloss:0.02202\n[1000]\tvalidation_0-mlogloss:0.02125\n[1100]\tvalidation_0-mlogloss:0.02070\n[1200]\tvalidation_0-mlogloss:0.02019\n[1300]\tvalidation_0-mlogloss:0.01985\n[1400]\tvalidation_0-mlogloss:0.01961\n[1500]\tvalidation_0-mlogloss:0.01948\n[1541]\tvalidation_0-mlogloss:0.01946\n#########################\n### Fold 16\n#########################\n[0]\tvalidation_0-mlogloss:1.36770\n[100]\tvalidation_0-mlogloss:0.46300\n[200]\tvalidation_0-mlogloss:0.19733\n[300]\tvalidation_0-mlogloss:0.10217\n[400]\tvalidation_0-mlogloss:0.06543\n[500]\tvalidation_0-mlogloss:0.05137\n[600]\tvalidation_0-mlogloss:0.04464\n[700]\tvalidation_0-mlogloss:0.04100\n[800]\tvalidation_0-mlogloss:0.03895\n[900]\tvalidation_0-mlogloss:0.03791\n[1000]\tvalidation_0-mlogloss:0.03739\n[1100]\tvalidation_0-mlogloss:0.03705\n[1200]\tvalidation_0-mlogloss:0.03692\n[1238]\tvalidation_0-mlogloss:0.03693\n#########################\n### Fold 17\n#########################\n[0]\tvalidation_0-mlogloss:1.36739\n[100]\tvalidation_0-mlogloss:0.44761\n[200]\tvalidation_0-mlogloss:0.17834\n[300]\tvalidation_0-mlogloss:0.08097\n[400]\tvalidation_0-mlogloss:0.04318\n[500]\tvalidation_0-mlogloss:0.02786\n[600]\tvalidation_0-mlogloss:0.02130\n[700]\tvalidation_0-mlogloss:0.01832\n[800]\tvalidation_0-mlogloss:0.01657\n[900]\tvalidation_0-mlogloss:0.01560\n[1000]\tvalidation_0-mlogloss:0.01500\n[1100]\tvalidation_0-mlogloss:0.01465\n[1200]\tvalidation_0-mlogloss:0.01431\n[1300]\tvalidation_0-mlogloss:0.01406\n[1400]\tvalidation_0-mlogloss:0.01384\n[1500]\tvalidation_0-mlogloss:0.01369\n[1515]\tvalidation_0-mlogloss:0.01370\n#########################\n### Fold 18\n#########################\n[0]\tvalidation_0-mlogloss:1.36750\n[100]\tvalidation_0-mlogloss:0.45081\n[200]\tvalidation_0-mlogloss:0.18204\n[300]\tvalidation_0-mlogloss:0.08345\n[400]\tvalidation_0-mlogloss:0.04391\n[500]\tvalidation_0-mlogloss:0.02682\n[600]\tvalidation_0-mlogloss:0.01864\n[700]\tvalidation_0-mlogloss:0.01447\n[800]\tvalidation_0-mlogloss:0.01218\n[900]\tvalidation_0-mlogloss:0.01081\n[1000]\tvalidation_0-mlogloss:0.01005\n[1100]\tvalidation_0-mlogloss:0.00955\n[1200]\tvalidation_0-mlogloss:0.00929\n[1300]\tvalidation_0-mlogloss:0.00914\n[1400]\tvalidation_0-mlogloss:0.00905\n[1500]\tvalidation_0-mlogloss:0.00897\n[1600]\tvalidation_0-mlogloss:0.00891\n[1616]\tvalidation_0-mlogloss:0.00890\n#########################\n### Fold 19\n#########################\n[0]\tvalidation_0-mlogloss:1.36726\n[100]\tvalidation_0-mlogloss:0.44812\n[200]\tvalidation_0-mlogloss:0.17966\n[300]\tvalidation_0-mlogloss:0.08354\n[400]\tvalidation_0-mlogloss:0.04634\n[500]\tvalidation_0-mlogloss:0.03073\n[600]\tvalidation_0-mlogloss:0.02309\n[700]\tvalidation_0-mlogloss:0.01929\n[800]\tvalidation_0-mlogloss:0.01727\n[900]\tvalidation_0-mlogloss:0.01621\n[1000]\tvalidation_0-mlogloss:0.01558\n[1100]\tvalidation_0-mlogloss:0.01509\n[1200]\tvalidation_0-mlogloss:0.01482\n[1300]\tvalidation_0-mlogloss:0.01469\n[1400]\tvalidation_0-mlogloss:0.01456\n[1496]\tvalidation_0-mlogloss:0.01451\n#########################\n### Fold 20\n#########################\n[0]\tvalidation_0-mlogloss:1.36723\n[100]\tvalidation_0-mlogloss:0.44343\n[200]\tvalidation_0-mlogloss:0.17343\n[300]\tvalidation_0-mlogloss:0.07755\n[400]\tvalidation_0-mlogloss:0.04184\n[500]\tvalidation_0-mlogloss:0.02818\n[600]\tvalidation_0-mlogloss:0.02262\n[700]\tvalidation_0-mlogloss:0.02003\n[800]\tvalidation_0-mlogloss:0.01911\n[882]\tvalidation_0-mlogloss:0.01889\nCPU times: user 21min 3s, sys: 19.2 s, total: 21min 22s\nWall time: 5min 41s\n","output_type":"stream"}],"execution_count":16},{"cell_type":"code","source":"oof = np.argmax(oof, axis=1)\nf1_score(y, oof, average=None)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-07T16:40:52.566621Z","iopub.execute_input":"2025-10-07T16:40:52.566866Z","iopub.status.idle":"2025-10-07T16:40:52.579197Z","shell.execute_reply.started":"2025-10-07T16:40:52.566847Z","shell.execute_reply":"2025-10-07T16:40:52.578288Z"}},"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"array([0.99823413, 0.95913978, 0.98874917, 0.99361022])"},"metadata":{}}],"execution_count":17},{"cell_type":"code","source":"f1_score(y, oof, average=\"macro\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-07T16:40:52.580221Z","iopub.execute_input":"2025-10-07T16:40:52.580755Z","iopub.status.idle":"2025-10-07T16:40:52.594866Z","shell.execute_reply.started":"2025-10-07T16:40:52.580717Z","shell.execute_reply":"2025-10-07T16:40:52.594057Z"}},"outputs":[{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"0.9849333286222082"},"metadata":{}}],"execution_count":18},{"cell_type":"code","source":"# 0.986678261280754\n# 0.9872424281615526","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-07T16:40:52.596134Z","iopub.execute_input":"2025-10-07T16:40:52.596474Z","iopub.status.idle":"2025-10-07T16:40:52.607436Z","shell.execute_reply.started":"2025-10-07T16:40:52.596443Z","shell.execute_reply":"2025-10-07T16:40:52.606376Z"}},"outputs":[],"execution_count":19},{"cell_type":"code","source":"pred = np.argmax(pred, axis=1)\ndata = {\"ID\": test_id, \"Target\": pred}\nsubmission = pd.DataFrame(data)\nsubmission[\"Target\"] = submission[\"Target\"].map({0: \"NORAIN\", 1: \"SMALLRAIN\", 2: \"MEDIUMRAIN\", 3: \"HEAVYRAIN\"})\nsubmission.to_csv(\"submission.csv\", index=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-07T16:40:52.608588Z","iopub.execute_input":"2025-10-07T16:40:52.608824Z","iopub.status.idle":"2025-10-07T16:40:52.631844Z","shell.execute_reply.started":"2025-10-07T16:40:52.608806Z","shell.execute_reply":"2025-10-07T16:40:52.630924Z"}},"outputs":[],"execution_count":20},{"cell_type":"code","source":"# def target_encode(train, valid, test, col, target=\"Target\", kfold=5, smooth=20, agg=\"mean\"):\n\n#     train['kfold'] = ((train.index) % kfold)\n#     col_name = '_'.join(col)\n#     train[f'TE_{agg.upper()}_' + col_name] = 0.\n#     for i in range(kfold):\n        \n#         df_tmp = train[train['kfold']!=i]\n#         if agg==\"mean\": mn = df_tmp[target].mean()\n#         elif agg==\"median\": mn = df_tmp[target].median()\n#         elif agg==\"min\": mn = df_tmp[target].min()\n#         elif agg==\"max\": mn = df_tmp[target].max()\n#         elif agg==\"nunique\": mn = 0\n#         df_tmp = df_tmp[col + [target]].groupby(col).agg([agg, 'count']).reset_index()\n#         df_tmp.columns = col + [agg, 'count']\n#         if agg==\"nunique\":\n#             df_tmp['TE_tmp'] = df_tmp[agg] / df_tmp['count']\n#         else: \n#             df_tmp['TE_tmp'] = ((df_tmp[agg]*df_tmp['count'])+(mn*smooth)) / (df_tmp['count']+smooth)\n#         df_tmp_m = train[col + ['kfold', f'TE_{agg.upper()}_' + col_name]].merge(df_tmp, how='left', left_on=col, right_on=col)\n#         df_tmp_m.loc[df_tmp_m['kfold']==i, f'TE_{agg.upper()}_' + col_name] = df_tmp_m.loc[df_tmp_m['kfold']==i, 'TE_tmp']\n#         train[f'TE_{agg.upper()}_' + col_name] = df_tmp_m[f'TE_{agg.upper()}_' + col_name].fillna(mn).values  \n    \n#     df_tmp = train[col + [target]].groupby(col).agg([agg, 'count']).reset_index()\n#     if agg==\"mean\": mn = train[target].mean()\n#     elif agg==\"median\": mn = train[target].median()\n#     elif agg==\"min\": mn = train[target].min()\n#     elif agg==\"max\": mn = train[target].max()\n#     elif agg==\"nunique\": mn = 0\n#     df_tmp.columns = col + [agg, 'count']\n#     if agg==\"nunique\":\n#         df_tmp['TE_tmp'] = df_tmp[agg] / df_tmp['count']\n#     else:\n#         df_tmp['TE_tmp'] = ((df_tmp[agg]*df_tmp['count'])+(mn*smooth)) / (df_tmp['count']+smooth)\n#     df_tmp_m = valid[col].merge(df_tmp, how='left', left_on=col, right_on=col)\n#     valid[f'TE_{agg.upper()}_' + col_name] = df_tmp_m['TE_tmp'].fillna(mn).values\n#     valid[f'TE_{agg.upper()}_' + col_name] = valid[f'TE_{agg.upper()}_' + col_name].astype(\"float32\")\n\n#     df_tmp_m = test[col].merge(df_tmp, how='left', left_on=col, right_on=col)\n#     test[f'TE_{agg.upper()}_' + col_name] = df_tmp_m['TE_tmp'].fillna(mn).values\n#     test[f'TE_{agg.upper()}_' + col_name] = test[f'TE_{agg.upper()}_' + col_name].astype(\"float32\")\n\n#     train = train.drop('kfold', axis=1)\n#     train[f'TE_{agg.upper()}_' + col_name] = train[f'TE_{agg.upper()}_' + col_name].astype(\"float32\")\n\n#     return (train, valid, test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-07T16:40:52.634814Z","iopub.execute_input":"2025-10-07T16:40:52.635134Z","iopub.status.idle":"2025-10-07T16:40:52.644454Z","shell.execute_reply.started":"2025-10-07T16:40:52.635110Z","shell.execute_reply":"2025-10-07T16:40:52.643482Z"}},"outputs":[],"execution_count":21},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}