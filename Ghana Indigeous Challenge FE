{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":12806871,"sourceType":"datasetVersion","datasetId":8097839}],"dockerImageVersionId":31090,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"%load_ext cudf.pandas","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-29T16:42:41.216029Z","iopub.execute_input":"2025-09-29T16:42:41.216219Z","iopub.status.idle":"2025-09-29T16:42:49.321108Z","shell.execute_reply.started":"2025-09-29T16:42:41.216197Z","shell.execute_reply":"2025-09-29T16:42:49.320501Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"import numpy as np, pandas as pd, itertools\nfrom sklearn.model_selection import train_test_split, StratifiedKFold\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.metrics import f1_score\nfrom xgboost import XGBClassifier","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-29T16:42:49.321780Z","iopub.execute_input":"2025-09-29T16:42:49.322148Z","iopub.status.idle":"2025-09-29T16:42:50.145652Z","shell.execute_reply.started":"2025-09-29T16:42:49.322130Z","shell.execute_reply":"2025-09-29T16:42:50.145105Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"pd.set_option('display.max_columns', 500)\nRANDOM_STATE = 44","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-29T16:42:50.146329Z","iopub.execute_input":"2025-09-29T16:42:50.146660Z","iopub.status.idle":"2025-09-29T16:42:50.150565Z","shell.execute_reply.started":"2025-09-29T16:42:50.146644Z","shell.execute_reply":"2025-09-29T16:42:50.149915Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"train_path = \"/kaggle/input/indigenous-knowledge/train (1).csv\"\ntest_path = \"/kaggle/input/indigenous-knowledge/test.csv\"","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-29T16:42:50.151350Z","iopub.execute_input":"2025-09-29T16:42:50.151548Z","iopub.status.idle":"2025-09-29T16:42:50.168263Z","shell.execute_reply.started":"2025-09-29T16:42:50.151533Z","shell.execute_reply":"2025-09-29T16:42:50.167551Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"train = pd.read_csv(train_path)\ntrain[\"prediction_time\"] = pd.to_datetime( train[\"prediction_time\"] )\ntrain[\"month\"] = train[\"prediction_time\"].dt.month.astype(\"float32\")\ntrain[\"day\"] = train[\"prediction_time\"].dt.day.astype(\"float32\")\ntrain[\"hour\"] = train[\"prediction_time\"].dt.hour.astype(\"float32\")\ntrain[\"dow\"] = train[\"prediction_time\"].dt.dayofweek.astype(\"float32\")\ntrain[\"prediction_duration\"] = ( train[\"forecast_length\"] + train[\"hour\"] ).astype(\"int32\")\ntrain[\"confidence_intensity\"] = (train[\"predicted_intensity\"] + train[\"confidence\"]).astype(\"float32\")\ny = train[\"Target\"].map({\"NORAIN\": 0, \"SMALLRAIN\": 1, \"MEDIUMRAIN\": 2, \"HEAVYRAIN\": 3}).astype(\"int32\")\ntrain = train.drop(columns=[\"ID\", \"Target\", \"prediction_time\", \"month\", \"user_id\", \"community\", \"indicator_description\"])\nprint( train.shape )\ntrain.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-29T16:42:50.169138Z","iopub.execute_input":"2025-09-29T16:42:50.169365Z","iopub.status.idle":"2025-09-29T16:42:51.016826Z","shell.execute_reply.started":"2025-09-29T16:42:50.169349Z","shell.execute_reply":"2025-09-29T16:42:51.016263Z"}},"outputs":[{"name":"stdout","text":"(10928, 11)\n","output_type":"stream"},{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"   confidence  predicted_intensity    district indicator time_observed  \\\n0         0.3                  0.0  atiwa_west      <NA>          <NA>   \n1         0.3                  0.0  atiwa_west      <NA>          <NA>   \n2         0.3                  0.0  atiwa_west      <NA>          <NA>   \n3         0.3                  0.0  atiwa_west      <NA>          <NA>   \n4         0.3                  0.0  atiwa_west      <NA>          <NA>   \n\n   forecast_length   day  hour  dow  prediction_duration  confidence_intensity  \n0               12  30.0  11.0  4.0                   23                   0.3  \n1               12  30.0  11.0  4.0                   23                   0.3  \n2               12  30.0  11.0  4.0                   23                   0.3  \n3               12  30.0  11.0  4.0                   23                   0.3  \n4               12  30.0  11.0  4.0                   23                   0.3  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>confidence</th>\n      <th>predicted_intensity</th>\n      <th>district</th>\n      <th>indicator</th>\n      <th>time_observed</th>\n      <th>forecast_length</th>\n      <th>day</th>\n      <th>hour</th>\n      <th>dow</th>\n      <th>prediction_duration</th>\n      <th>confidence_intensity</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.3</td>\n      <td>0.0</td>\n      <td>atiwa_west</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n      <td>12</td>\n      <td>30.0</td>\n      <td>11.0</td>\n      <td>4.0</td>\n      <td>23</td>\n      <td>0.3</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.3</td>\n      <td>0.0</td>\n      <td>atiwa_west</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n      <td>12</td>\n      <td>30.0</td>\n      <td>11.0</td>\n      <td>4.0</td>\n      <td>23</td>\n      <td>0.3</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.3</td>\n      <td>0.0</td>\n      <td>atiwa_west</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n      <td>12</td>\n      <td>30.0</td>\n      <td>11.0</td>\n      <td>4.0</td>\n      <td>23</td>\n      <td>0.3</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.3</td>\n      <td>0.0</td>\n      <td>atiwa_west</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n      <td>12</td>\n      <td>30.0</td>\n      <td>11.0</td>\n      <td>4.0</td>\n      <td>23</td>\n      <td>0.3</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.3</td>\n      <td>0.0</td>\n      <td>atiwa_west</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n      <td>12</td>\n      <td>30.0</td>\n      <td>11.0</td>\n      <td>4.0</td>\n      <td>23</td>\n      <td>0.3</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":5},{"cell_type":"code","source":"test = pd.read_csv(test_path)\ntest[\"prediction_time\"] = pd.to_datetime( test[\"prediction_time\"] )\ntest[\"month\"] = test[\"prediction_time\"].dt.month.astype(\"float32\")\ntest[\"day\"] = test[\"prediction_time\"].dt.day.astype(\"float32\")\ntest[\"hour\"] = test[\"prediction_time\"].dt.hour.astype(\"float32\")\ntest[\"dow\"] = test[\"prediction_time\"].dt.dayofweek.astype(\"float32\")\ntest[\"prediction_duration\"] = ( test[\"forecast_length\"] + test[\"hour\"] ).astype(\"int32\")\ntest[\"confidence_intensity\"] = (test[\"predicted_intensity\"] + test[\"confidence\"]).astype(\"float32\")\ntest_id = test[\"ID\"]\ntest = test.drop(columns=[\"ID\", \"prediction_time\", \"month\", \"user_id\", \"community\", \"indicator_description\"])\nprint( test.shape )\ntest.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-29T16:42:51.018821Z","iopub.execute_input":"2025-09-29T16:42:51.019036Z","iopub.status.idle":"2025-09-29T16:42:51.081677Z","shell.execute_reply.started":"2025-09-29T16:42:51.019021Z","shell.execute_reply":"2025-09-29T16:42:51.081089Z"}},"outputs":[{"name":"stdout","text":"(2732, 11)\n","output_type":"stream"},{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"   confidence  predicted_intensity    district indicator time_observed  \\\n0         0.3                  0.0  assin_fosu      <NA>          <NA>   \n1         0.3                  0.0  assin_fosu      <NA>          <NA>   \n2         0.3                  0.0  assin_fosu      <NA>          <NA>   \n3         0.3                  0.0  assin_fosu      <NA>          <NA>   \n4         0.3                  0.0  assin_fosu      <NA>          <NA>   \n\n   forecast_length   day  hour  dow  prediction_duration  confidence_intensity  \n0               24  20.0  19.0  6.0                   43                   0.3  \n1               24  20.0  19.0  6.0                   43                   0.3  \n2               24  20.0  19.0  6.0                   43                   0.3  \n3               24  20.0  19.0  6.0                   43                   0.3  \n4               24  20.0  19.0  6.0                   43                   0.3  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>confidence</th>\n      <th>predicted_intensity</th>\n      <th>district</th>\n      <th>indicator</th>\n      <th>time_observed</th>\n      <th>forecast_length</th>\n      <th>day</th>\n      <th>hour</th>\n      <th>dow</th>\n      <th>prediction_duration</th>\n      <th>confidence_intensity</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.3</td>\n      <td>0.0</td>\n      <td>assin_fosu</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n      <td>24</td>\n      <td>20.0</td>\n      <td>19.0</td>\n      <td>6.0</td>\n      <td>43</td>\n      <td>0.3</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.3</td>\n      <td>0.0</td>\n      <td>assin_fosu</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n      <td>24</td>\n      <td>20.0</td>\n      <td>19.0</td>\n      <td>6.0</td>\n      <td>43</td>\n      <td>0.3</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.3</td>\n      <td>0.0</td>\n      <td>assin_fosu</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n      <td>24</td>\n      <td>20.0</td>\n      <td>19.0</td>\n      <td>6.0</td>\n      <td>43</td>\n      <td>0.3</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.3</td>\n      <td>0.0</td>\n      <td>assin_fosu</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n      <td>24</td>\n      <td>20.0</td>\n      <td>19.0</td>\n      <td>6.0</td>\n      <td>43</td>\n      <td>0.3</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.3</td>\n      <td>0.0</td>\n      <td>assin_fosu</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n      <td>24</td>\n      <td>20.0</td>\n      <td>19.0</td>\n      <td>6.0</td>\n      <td>43</td>\n      <td>0.3</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":6},{"cell_type":"code","source":"TEST_COLS_DIFF_TRAIN = [\"user_id\", \"community\", \"indicator_description\", \"month\"]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-29T16:42:51.082361Z","iopub.execute_input":"2025-09-29T16:42:51.082585Z","iopub.status.idle":"2025-09-29T16:42:51.086597Z","shell.execute_reply.started":"2025-09-29T16:42:51.082564Z","shell.execute_reply":"2025-09-29T16:42:51.085827Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"# CATS = [\"confidence\", \"predicted_intensity\"]\n# lists2 = []\n# for f1, f2 in itertools.combinations(CATS, 2):\n#     lists2.append([f1, f2])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-29T16:42:51.087373Z","iopub.execute_input":"2025-09-29T16:42:51.087626Z","iopub.status.idle":"2025-09-29T16:42:51.100210Z","shell.execute_reply.started":"2025-09-29T16:42:51.087609Z","shell.execute_reply":"2025-09-29T16:42:51.099569Z"}},"outputs":[],"execution_count":8},{"cell_type":"code","source":"combined = pd.concat([train,test], axis=0, ignore_index=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-29T16:42:51.100951Z","iopub.execute_input":"2025-09-29T16:42:51.101142Z","iopub.status.idle":"2025-09-29T16:42:51.121946Z","shell.execute_reply.started":"2025-09-29T16:42:51.101128Z","shell.execute_reply":"2025-09-29T16:42:51.120999Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"FEATURES = list ( train.columns )\nHIGH_CARDINALITY = []\n\nprint(f\"THE {len(FEATURES)} BASIC FEATURES ARE:\")\nfor c in FEATURES:\n    \n    ftype = \"numerical\"\n    n = combined[c].nunique()\n    if combined[c].dtype==\"object\":\n        if c in [\"community\", \"indicator\", \"indicator_description\"]:\n            combined[c] = ( combined[c].str.lower().str.replace(r\"\\s+\", \" \", regex=True).str.strip() )\n        if combined[c].isnull().sum() > 0:\n            combined[c+\"_was_null\"] = combined[c].isnull().astype(\"int32\")\n            combined[c] = combined[c].fillna(\"UNKNOWN\")\n            FEATURES.append(c+\"_was_null\")\n        combined[c],_ = combined[c].factorize()\n        combined[c] -= combined[c].min()\n        \n        if n>=6: HIGH_CARDINALITY.append(c)\n            \n        ftype = \"categorical\"\n    if combined[c].dtype==\"int64\":\n        combined[c] = combined[c].astype(\"int32\")\n    elif combined[c].dtype==\"float64\":\n        combined[c] = combined[c].astype(\"float32\")\n    \n    print(f\"{c} ({ftype}) with {n} unique values\")\n        \ntrain = combined.iloc[:len(train)].copy()\ntest = combined.iloc[len(train):].reset_index(drop=True).copy()\n\nprint(\"\\nTHE FOLLOWING HAVE 9 OR MORE UNIQUE VALUES:\", HIGH_CARDINALITY )","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-29T16:42:51.122665Z","iopub.execute_input":"2025-09-29T16:42:51.122853Z","iopub.status.idle":"2025-09-29T16:42:51.314443Z","shell.execute_reply.started":"2025-09-29T16:42:51.122839Z","shell.execute_reply":"2025-09-29T16:42:51.313802Z"}},"outputs":[{"name":"stdout","text":"THE 11 BASIC FEATURES ARE:\nconfidence (numerical) with 3 unique values\npredicted_intensity (numerical) with 4 unique values\ndistrict (categorical) with 3 unique values\nindicator (categorical) with 10 unique values\ntime_observed (categorical) with 8 unique values\nforecast_length (numerical) with 2 unique values\nday (numerical) with 31 unique values\nhour (numerical) with 24 unique values\ndow (numerical) with 7 unique values\nprediction_duration (numerical) with 24 unique values\nconfidence_intensity (numerical) with 12 unique values\nindicator_was_null (numerical) with 2 unique values\ntime_observed_was_null (numerical) with 2 unique values\n\nTHE FOLLOWING HAVE 9 OR MORE UNIQUE VALUES: ['indicator', 'time_observed']\n","output_type":"stream"}],"execution_count":10},{"cell_type":"code","source":"X_train, X_valid, y_train, y_valid = train_test_split(train, y, test_size=0.2, stratify=y, random_state=RANDOM_STATE)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-29T16:42:51.315162Z","iopub.execute_input":"2025-09-29T16:42:51.315361Z","iopub.status.idle":"2025-09-29T16:42:51.406063Z","shell.execute_reply.started":"2025-09-29T16:42:51.315345Z","shell.execute_reply":"2025-09-29T16:42:51.405557Z"}},"outputs":[],"execution_count":11},{"cell_type":"code","source":"X_train = X_train.reset_index(drop=True)\nX_valid = X_valid.reset_index(drop=True)\ny_train = y_train.reset_index(drop=True)\ny_valid = y_valid.reset_index(drop=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-29T16:42:51.406791Z","iopub.execute_input":"2025-09-29T16:42:51.407006Z","iopub.status.idle":"2025-09-29T16:42:51.411720Z","shell.execute_reply.started":"2025-09-29T16:42:51.406990Z","shell.execute_reply":"2025-09-29T16:42:51.410998Z"}},"outputs":[],"execution_count":12},{"cell_type":"code","source":"ONE_HOT_COLS = [\"predicted_intensity\", \"district\"]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-29T16:42:51.412377Z","iopub.execute_input":"2025-09-29T16:42:51.412569Z","iopub.status.idle":"2025-09-29T16:42:51.442328Z","shell.execute_reply.started":"2025-09-29T16:42:51.412554Z","shell.execute_reply":"2025-09-29T16:42:51.441521Z"}},"outputs":[],"execution_count":13},{"cell_type":"code","source":"# ohe = OneHotEncoder(handle_unknown=\"ignore\")\n# ohe_encoded = ohe.fit_transform(X_train[ONE_HOT_COLS]).toarray().astype(\"int32\")\n# ohe_df = pd.DataFrame(ohe_encoded, columns=ohe.get_feature_names_out())\n# # X_train = X_train.drop(columns=ONE_HOT_COLS)\n# X_train = pd.concat([X_train, ohe_df], axis=1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-29T16:42:51.443036Z","iopub.execute_input":"2025-09-29T16:42:51.443209Z","iopub.status.idle":"2025-09-29T16:42:51.455360Z","shell.execute_reply.started":"2025-09-29T16:42:51.443192Z","shell.execute_reply":"2025-09-29T16:42:51.454471Z"}},"outputs":[],"execution_count":14},{"cell_type":"code","source":"# ohe_encoded = ohe.transform(X_valid[ONE_HOT_COLS]).toarray().astype(\"int32\")\n# ohe_df = pd.DataFrame(ohe_encoded, columns=ohe.get_feature_names_out())\n# # X_valid = X_valid.drop(columns=ONE_HOT_COLS)\n# X_valid = pd.concat([X_valid, ohe_df], axis=1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-29T16:42:51.456173Z","iopub.execute_input":"2025-09-29T16:42:51.456366Z","iopub.status.idle":"2025-09-29T16:42:51.468100Z","shell.execute_reply.started":"2025-09-29T16:42:51.456351Z","shell.execute_reply":"2025-09-29T16:42:51.467471Z"}},"outputs":[],"execution_count":15},{"cell_type":"code","source":"# ohe_encoded = ohe.fit_transform(test[ONE_HOT_COLS]).toarray().astype(\"int32\")\n# ohe_df = pd.DataFrame(ohe_encoded, columns=ohe.get_feature_names_out())\n# # test = test.drop(columns=ONE_HOT_COLS)\n# test = pd.concat([test, ohe_df], axis=1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-29T16:42:51.468779Z","iopub.execute_input":"2025-09-29T16:42:51.469046Z","iopub.status.idle":"2025-09-29T16:42:51.484162Z","shell.execute_reply.started":"2025-09-29T16:42:51.469030Z","shell.execute_reply":"2025-09-29T16:42:51.483488Z"}},"outputs":[],"execution_count":16},{"cell_type":"code","source":"def target_encode(train, valid, test, col, target=\"Target\", kfold=5, smooth=20, agg=\"mean\"):\n\n    train['kfold'] = ((train.index) % kfold)\n    col_name = '_'.join(col)\n    train[f'TE_{agg.upper()}_' + col_name] = 0.\n    for i in range(kfold):\n        \n        df_tmp = train[train['kfold']!=i]\n        if agg==\"mean\": mn = df_tmp[target].mean()\n        elif agg==\"median\": mn = df_tmp[target].median()\n        elif agg==\"min\": mn = df_tmp[target].min()\n        elif agg==\"max\": mn = df_tmp[target].max()\n        elif agg==\"nunique\": mn = 0\n        df_tmp = df_tmp[col + [target]].groupby(col).agg([agg, 'count']).reset_index()\n        df_tmp.columns = col + [agg, 'count']\n        if agg==\"nunique\":\n            df_tmp['TE_tmp'] = df_tmp[agg] / df_tmp['count']\n        else: \n            df_tmp['TE_tmp'] = ((df_tmp[agg]*df_tmp['count'])+(mn*smooth)) / (df_tmp['count']+smooth)\n        df_tmp_m = train[col + ['kfold', f'TE_{agg.upper()}_' + col_name]].merge(df_tmp, how='left', left_on=col, right_on=col)\n        df_tmp_m.loc[df_tmp_m['kfold']==i, f'TE_{agg.upper()}_' + col_name] = df_tmp_m.loc[df_tmp_m['kfold']==i, 'TE_tmp']\n        train[f'TE_{agg.upper()}_' + col_name] = df_tmp_m[f'TE_{agg.upper()}_' + col_name].fillna(mn).values  \n    \n    df_tmp = train[col + [target]].groupby(col).agg([agg, 'count']).reset_index()\n    if agg==\"mean\": mn = train[target].mean()\n    elif agg==\"median\": mn = train[target].median()\n    elif agg==\"min\": mn = train[target].min()\n    elif agg==\"max\": mn = train[target].max()\n    elif agg==\"nunique\": mn = 0\n    df_tmp.columns = col + [agg, 'count']\n    if agg==\"nunique\":\n        df_tmp['TE_tmp'] = df_tmp[agg] / df_tmp['count']\n    else:\n        df_tmp['TE_tmp'] = ((df_tmp[agg]*df_tmp['count'])+(mn*smooth)) / (df_tmp['count']+smooth)\n    df_tmp_m = valid[col].merge(df_tmp, how='left', left_on=col, right_on=col)\n    valid[f'TE_{agg.upper()}_' + col_name] = df_tmp_m['TE_tmp'].fillna(mn).values\n    valid[f'TE_{agg.upper()}_' + col_name] = valid[f'TE_{agg.upper()}_' + col_name].astype(\"float32\")\n\n    df_tmp_m = test[col].merge(df_tmp, how='left', left_on=col, right_on=col)\n    test[f'TE_{agg.upper()}_' + col_name] = df_tmp_m['TE_tmp'].fillna(mn).values\n    test[f'TE_{agg.upper()}_' + col_name] = test[f'TE_{agg.upper()}_' + col_name].astype(\"float32\")\n\n    train = train.drop('kfold', axis=1)\n    train[f'TE_{agg.upper()}_' + col_name] = train[f'TE_{agg.upper()}_' + col_name].astype(\"float32\")\n\n    return (train, valid, test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-29T16:42:51.484773Z","iopub.execute_input":"2025-09-29T16:42:51.484988Z","iopub.status.idle":"2025-09-29T16:42:51.500625Z","shell.execute_reply.started":"2025-09-29T16:42:51.484973Z","shell.execute_reply":"2025-09-29T16:42:51.499738Z"}},"outputs":[],"execution_count":17},{"cell_type":"code","source":"# X_train = pd.concat([X_train, y_train], axis=1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-29T16:42:51.501355Z","iopub.execute_input":"2025-09-29T16:42:51.501596Z","iopub.status.idle":"2025-09-29T16:42:51.517952Z","shell.execute_reply.started":"2025-09-29T16:42:51.501580Z","shell.execute_reply":"2025-09-29T16:42:51.517311Z"}},"outputs":[],"execution_count":18},{"cell_type":"code","source":"# for c in HIGH_CARDINALITY:\n#     X_train, X_valid, test = target_encode(X_train, X_valid, test, [c])\n# X_train = X_train.drop(columns=[\"Target\"])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-29T16:42:51.518622Z","iopub.execute_input":"2025-09-29T16:42:51.518851Z","iopub.status.idle":"2025-09-29T16:42:51.531475Z","shell.execute_reply.started":"2025-09-29T16:42:51.518835Z","shell.execute_reply":"2025-09-29T16:42:51.530925Z"}},"outputs":[],"execution_count":19},{"cell_type":"code","source":"import xgboost as xgb, time\nprint(f\"Using XGBoost version\",xgb.__version__)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-29T16:42:51.532256Z","iopub.execute_input":"2025-09-29T16:42:51.532517Z","iopub.status.idle":"2025-09-29T16:42:51.546011Z","shell.execute_reply.started":"2025-09-29T16:42:51.532501Z","shell.execute_reply":"2025-09-29T16:42:51.545311Z"}},"outputs":[{"name":"stdout","text":"Using XGBoost version 2.0.3\n","output_type":"stream"}],"execution_count":20},{"cell_type":"code","source":"%%time\n\nFOLDS = 20\nskf = StratifiedKFold(n_splits=FOLDS, shuffle=True, random_state=RANDOM_STATE)\n\noof = np.zeros((len(X_train), 4))\npred = np.zeros((len(X_valid), 4))\npred2 = np.zeros((len(test), 4))\n\nfor i, (train_index, test_index) in enumerate(skf.split(X_train, y_train)):\n\n    print(\"#\"*25)\n    print(f\"### Fold {i+1}\")\n    print(\"#\"*25)\n    \n    x_train = X_train.loc[train_index].copy()\n    y_train_ = y_train.loc[train_index].copy()\n    x_valid = X_train.loc[test_index].copy()\n    y_valid_ = y_train.loc[test_index].copy()\n    x_test = X_valid.copy()\n    x_test2 = test.copy()\n\n    model = XGBClassifier(\n        device=\"cuda\",\n        random_state=RANDOM_STATE,\n        max_depth=10, \n        colsample_bytree=0.9, \n        subsample=0.9, \n        n_estimators=2_000, \n        learning_rate=0.01, \n        num_class=4,\n        early_stopping_rounds=25,  \n        objective=\"multi:softprob\",\n        eval_metric=\"mlogloss\"\n    )\n    model.fit(\n        x_train, y_train_,\n        eval_set=[(x_valid, y_valid_)],   \n        verbose=100\n    )\n\n    # INFER OOF\n    oof[test_index] = model.predict_proba(x_valid)\n    # INFER TEST\n    pred += model.predict_proba(x_test)\n    pred2 += model.predict_proba(x_test2) \n\n# COMPUTE AVERAGE TEST PREDS\npred /= FOLDS\npred2 /= FOLDS","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-29T16:42:51.548919Z","iopub.execute_input":"2025-09-29T16:42:51.549324Z","iopub.status.idle":"2025-09-29T16:46:35.297586Z","shell.execute_reply.started":"2025-09-29T16:42:51.549308Z","shell.execute_reply":"2025-09-29T16:46:35.296947Z"}},"outputs":[{"name":"stdout","text":"#########################\n### Fold 1\n#########################\n[0]\tvalidation_0-mlogloss:1.36849\n[100]\tvalidation_0-mlogloss:0.50763\n[200]\tvalidation_0-mlogloss:0.25028\n[300]\tvalidation_0-mlogloss:0.15561\n[400]\tvalidation_0-mlogloss:0.11871\n[500]\tvalidation_0-mlogloss:0.10334\n[600]\tvalidation_0-mlogloss:0.09583\n[700]\tvalidation_0-mlogloss:0.09197\n[800]\tvalidation_0-mlogloss:0.08999\n[900]\tvalidation_0-mlogloss:0.08864\n[1000]\tvalidation_0-mlogloss:0.08790\n[1100]\tvalidation_0-mlogloss:0.08756\n[1145]\tvalidation_0-mlogloss:0.08754\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/xgboost/core.py:160: UserWarning: [16:43:02] WARNING: /workspace/src/common/error_msg.cc:58: Falling back to prediction using DMatrix due to mismatched devices. This might lead to higher memory usage and slower performance. XGBoost is running on: cuda:0, while the input data is on: cpu.\nPotential solutions:\n- Use a data structure that matches the device ordinal in the booster.\n- Set the device for booster before call to inplace_predict.\n\nThis warning will only be shown once.\n\n  warnings.warn(smsg, UserWarning)\n","output_type":"stream"},{"name":"stdout","text":"#########################\n### Fold 2\n#########################\n[0]\tvalidation_0-mlogloss:1.36813\n[100]\tvalidation_0-mlogloss:0.48608\n[200]\tvalidation_0-mlogloss:0.21858\n[300]\tvalidation_0-mlogloss:0.12049\n[400]\tvalidation_0-mlogloss:0.08354\n[500]\tvalidation_0-mlogloss:0.06904\n[600]\tvalidation_0-mlogloss:0.06284\n[700]\tvalidation_0-mlogloss:0.06033\n[800]\tvalidation_0-mlogloss:0.05976\n[888]\tvalidation_0-mlogloss:0.05966\n#########################\n### Fold 3\n#########################\n[0]\tvalidation_0-mlogloss:1.36862\n[100]\tvalidation_0-mlogloss:0.50288\n[200]\tvalidation_0-mlogloss:0.23836\n[300]\tvalidation_0-mlogloss:0.13728\n[400]\tvalidation_0-mlogloss:0.09762\n[500]\tvalidation_0-mlogloss:0.08112\n[600]\tvalidation_0-mlogloss:0.07371\n[700]\tvalidation_0-mlogloss:0.06996\n[800]\tvalidation_0-mlogloss:0.06846\n[900]\tvalidation_0-mlogloss:0.06745\n[981]\tvalidation_0-mlogloss:0.06721\n#########################\n### Fold 4\n#########################\n[0]\tvalidation_0-mlogloss:1.36857\n[100]\tvalidation_0-mlogloss:0.50481\n[200]\tvalidation_0-mlogloss:0.24200\n[300]\tvalidation_0-mlogloss:0.14284\n[400]\tvalidation_0-mlogloss:0.10188\n[500]\tvalidation_0-mlogloss:0.08282\n[600]\tvalidation_0-mlogloss:0.07262\n[700]\tvalidation_0-mlogloss:0.06656\n[800]\tvalidation_0-mlogloss:0.06305\n[900]\tvalidation_0-mlogloss:0.06058\n[1000]\tvalidation_0-mlogloss:0.05922\n[1100]\tvalidation_0-mlogloss:0.05807\n[1200]\tvalidation_0-mlogloss:0.05727\n[1300]\tvalidation_0-mlogloss:0.05676\n[1400]\tvalidation_0-mlogloss:0.05622\n[1500]\tvalidation_0-mlogloss:0.05570\n[1600]\tvalidation_0-mlogloss:0.05539\n[1700]\tvalidation_0-mlogloss:0.05513\n[1718]\tvalidation_0-mlogloss:0.05513\n#########################\n### Fold 5\n#########################\n[0]\tvalidation_0-mlogloss:1.36826\n[100]\tvalidation_0-mlogloss:0.49316\n[200]\tvalidation_0-mlogloss:0.23258\n[300]\tvalidation_0-mlogloss:0.13665\n[400]\tvalidation_0-mlogloss:0.09831\n[500]\tvalidation_0-mlogloss:0.08103\n[600]\tvalidation_0-mlogloss:0.07155\n[700]\tvalidation_0-mlogloss:0.06615\n[800]\tvalidation_0-mlogloss:0.06245\n[900]\tvalidation_0-mlogloss:0.05954\n[1000]\tvalidation_0-mlogloss:0.05706\n[1100]\tvalidation_0-mlogloss:0.05506\n[1200]\tvalidation_0-mlogloss:0.05347\n[1300]\tvalidation_0-mlogloss:0.05236\n[1400]\tvalidation_0-mlogloss:0.05119\n[1500]\tvalidation_0-mlogloss:0.05066\n[1600]\tvalidation_0-mlogloss:0.05015\n[1700]\tvalidation_0-mlogloss:0.04989\n[1800]\tvalidation_0-mlogloss:0.04937\n[1900]\tvalidation_0-mlogloss:0.04911\n[1984]\tvalidation_0-mlogloss:0.04898\n#########################\n### Fold 6\n#########################\n[0]\tvalidation_0-mlogloss:1.36872\n[100]\tvalidation_0-mlogloss:0.50971\n[200]\tvalidation_0-mlogloss:0.24602\n[300]\tvalidation_0-mlogloss:0.14644\n[400]\tvalidation_0-mlogloss:0.10642\n[500]\tvalidation_0-mlogloss:0.08974\n[600]\tvalidation_0-mlogloss:0.08082\n[700]\tvalidation_0-mlogloss:0.07578\n[800]\tvalidation_0-mlogloss:0.07193\n[900]\tvalidation_0-mlogloss:0.06928\n[1000]\tvalidation_0-mlogloss:0.06735\n[1100]\tvalidation_0-mlogloss:0.06592\n[1200]\tvalidation_0-mlogloss:0.06479\n[1300]\tvalidation_0-mlogloss:0.06384\n[1400]\tvalidation_0-mlogloss:0.06336\n[1500]\tvalidation_0-mlogloss:0.06316\n[1505]\tvalidation_0-mlogloss:0.06316\n#########################\n### Fold 7\n#########################\n[0]\tvalidation_0-mlogloss:1.36817\n[100]\tvalidation_0-mlogloss:0.48967\n[200]\tvalidation_0-mlogloss:0.22512\n[300]\tvalidation_0-mlogloss:0.12824\n[400]\tvalidation_0-mlogloss:0.09148\n[500]\tvalidation_0-mlogloss:0.07682\n[600]\tvalidation_0-mlogloss:0.07052\n[700]\tvalidation_0-mlogloss:0.06747\n[800]\tvalidation_0-mlogloss:0.06612\n[851]\tvalidation_0-mlogloss:0.06598\n#########################\n### Fold 8\n#########################\n[0]\tvalidation_0-mlogloss:1.36831\n[100]\tvalidation_0-mlogloss:0.49586\n[200]\tvalidation_0-mlogloss:0.24004\n[300]\tvalidation_0-mlogloss:0.14835\n[400]\tvalidation_0-mlogloss:0.11286\n[500]\tvalidation_0-mlogloss:0.09783\n[600]\tvalidation_0-mlogloss:0.08999\n[700]\tvalidation_0-mlogloss:0.08520\n[800]\tvalidation_0-mlogloss:0.08181\n[900]\tvalidation_0-mlogloss:0.07891\n[1000]\tvalidation_0-mlogloss:0.07648\n[1100]\tvalidation_0-mlogloss:0.07456\n[1200]\tvalidation_0-mlogloss:0.07304\n[1300]\tvalidation_0-mlogloss:0.07207\n[1400]\tvalidation_0-mlogloss:0.07133\n[1442]\tvalidation_0-mlogloss:0.07131\n#########################\n### Fold 9\n#########################\n[0]\tvalidation_0-mlogloss:1.36802\n[100]\tvalidation_0-mlogloss:0.48391\n[200]\tvalidation_0-mlogloss:0.21610\n[300]\tvalidation_0-mlogloss:0.11615\n[400]\tvalidation_0-mlogloss:0.07589\n[500]\tvalidation_0-mlogloss:0.05822\n[600]\tvalidation_0-mlogloss:0.04939\n[700]\tvalidation_0-mlogloss:0.04450\n[800]\tvalidation_0-mlogloss:0.04153\n[900]\tvalidation_0-mlogloss:0.03964\n[1000]\tvalidation_0-mlogloss:0.03827\n[1100]\tvalidation_0-mlogloss:0.03738\n[1200]\tvalidation_0-mlogloss:0.03674\n[1300]\tvalidation_0-mlogloss:0.03634\n[1400]\tvalidation_0-mlogloss:0.03612\n[1500]\tvalidation_0-mlogloss:0.03585\n[1600]\tvalidation_0-mlogloss:0.03557\n[1632]\tvalidation_0-mlogloss:0.03557\n#########################\n### Fold 10\n#########################\n[0]\tvalidation_0-mlogloss:1.36820\n[100]\tvalidation_0-mlogloss:0.48392\n[200]\tvalidation_0-mlogloss:0.21716\n[300]\tvalidation_0-mlogloss:0.11841\n[400]\tvalidation_0-mlogloss:0.07958\n[500]\tvalidation_0-mlogloss:0.06381\n[600]\tvalidation_0-mlogloss:0.05665\n[700]\tvalidation_0-mlogloss:0.05312\n[800]\tvalidation_0-mlogloss:0.05127\n[900]\tvalidation_0-mlogloss:0.05039\n[1000]\tvalidation_0-mlogloss:0.04971\n[1100]\tvalidation_0-mlogloss:0.04916\n[1111]\tvalidation_0-mlogloss:0.04918\n#########################\n### Fold 11\n#########################\n[0]\tvalidation_0-mlogloss:1.36815\n[100]\tvalidation_0-mlogloss:0.49456\n[200]\tvalidation_0-mlogloss:0.23184\n[300]\tvalidation_0-mlogloss:0.13369\n[400]\tvalidation_0-mlogloss:0.09470\n[500]\tvalidation_0-mlogloss:0.07878\n[600]\tvalidation_0-mlogloss:0.07123\n[700]\tvalidation_0-mlogloss:0.06776\n[800]\tvalidation_0-mlogloss:0.06590\n[900]\tvalidation_0-mlogloss:0.06479\n[1000]\tvalidation_0-mlogloss:0.06406\n[1100]\tvalidation_0-mlogloss:0.06360\n[1108]\tvalidation_0-mlogloss:0.06362\n#########################\n### Fold 12\n#########################\n[0]\tvalidation_0-mlogloss:1.36852\n[100]\tvalidation_0-mlogloss:0.50689\n[200]\tvalidation_0-mlogloss:0.24351\n[300]\tvalidation_0-mlogloss:0.14265\n[400]\tvalidation_0-mlogloss:0.10170\n[500]\tvalidation_0-mlogloss:0.08368\n[600]\tvalidation_0-mlogloss:0.07474\n[700]\tvalidation_0-mlogloss:0.06980\n[800]\tvalidation_0-mlogloss:0.06654\n[900]\tvalidation_0-mlogloss:0.06433\n[1000]\tvalidation_0-mlogloss:0.06259\n[1100]\tvalidation_0-mlogloss:0.06120\n[1200]\tvalidation_0-mlogloss:0.05998\n[1300]\tvalidation_0-mlogloss:0.05937\n[1400]\tvalidation_0-mlogloss:0.05868\n[1500]\tvalidation_0-mlogloss:0.05815\n[1600]\tvalidation_0-mlogloss:0.05772\n[1700]\tvalidation_0-mlogloss:0.05736\n[1800]\tvalidation_0-mlogloss:0.05720\n[1804]\tvalidation_0-mlogloss:0.05719\n#########################\n### Fold 13\n#########################\n[0]\tvalidation_0-mlogloss:1.36842\n[100]\tvalidation_0-mlogloss:0.50598\n[200]\tvalidation_0-mlogloss:0.25381\n[300]\tvalidation_0-mlogloss:0.16462\n[400]\tvalidation_0-mlogloss:0.12993\n[500]\tvalidation_0-mlogloss:0.11532\n[600]\tvalidation_0-mlogloss:0.10839\n[700]\tvalidation_0-mlogloss:0.10509\n[800]\tvalidation_0-mlogloss:0.10333\n[900]\tvalidation_0-mlogloss:0.10217\n[1000]\tvalidation_0-mlogloss:0.10143\n[1033]\tvalidation_0-mlogloss:0.10144\n#########################\n### Fold 14\n#########################\n[0]\tvalidation_0-mlogloss:1.36828\n[100]\tvalidation_0-mlogloss:0.49296\n[200]\tvalidation_0-mlogloss:0.23013\n[300]\tvalidation_0-mlogloss:0.13280\n[400]\tvalidation_0-mlogloss:0.09387\n[500]\tvalidation_0-mlogloss:0.07737\n[600]\tvalidation_0-mlogloss:0.06905\n[700]\tvalidation_0-mlogloss:0.06467\n[800]\tvalidation_0-mlogloss:0.06202\n[900]\tvalidation_0-mlogloss:0.06030\n[1000]\tvalidation_0-mlogloss:0.05927\n[1100]\tvalidation_0-mlogloss:0.05846\n[1200]\tvalidation_0-mlogloss:0.05771\n[1300]\tvalidation_0-mlogloss:0.05724\n[1400]\tvalidation_0-mlogloss:0.05683\n[1500]\tvalidation_0-mlogloss:0.05679\n[1511]\tvalidation_0-mlogloss:0.05681\n#########################\n### Fold 15\n#########################\n[0]\tvalidation_0-mlogloss:1.36842\n[100]\tvalidation_0-mlogloss:0.50797\n[200]\tvalidation_0-mlogloss:0.25168\n[300]\tvalidation_0-mlogloss:0.15773\n[400]\tvalidation_0-mlogloss:0.12039\n[500]\tvalidation_0-mlogloss:0.10525\n[600]\tvalidation_0-mlogloss:0.09853\n[700]\tvalidation_0-mlogloss:0.09499\n[800]\tvalidation_0-mlogloss:0.09330\n[900]\tvalidation_0-mlogloss:0.09225\n[1000]\tvalidation_0-mlogloss:0.09150\n[1100]\tvalidation_0-mlogloss:0.09121\n[1184]\tvalidation_0-mlogloss:0.09113\n#########################\n### Fold 16\n#########################\n[0]\tvalidation_0-mlogloss:1.36815\n[100]\tvalidation_0-mlogloss:0.48443\n[200]\tvalidation_0-mlogloss:0.21709\n[300]\tvalidation_0-mlogloss:0.11674\n[400]\tvalidation_0-mlogloss:0.07682\n[500]\tvalidation_0-mlogloss:0.05979\n[600]\tvalidation_0-mlogloss:0.05128\n[700]\tvalidation_0-mlogloss:0.04674\n[800]\tvalidation_0-mlogloss:0.04411\n[900]\tvalidation_0-mlogloss:0.04229\n[1000]\tvalidation_0-mlogloss:0.04106\n[1100]\tvalidation_0-mlogloss:0.04006\n[1200]\tvalidation_0-mlogloss:0.03939\n[1300]\tvalidation_0-mlogloss:0.03904\n[1400]\tvalidation_0-mlogloss:0.03872\n[1500]\tvalidation_0-mlogloss:0.03850\n[1600]\tvalidation_0-mlogloss:0.03826\n[1643]\tvalidation_0-mlogloss:0.03820\n#########################\n### Fold 17\n#########################\n[0]\tvalidation_0-mlogloss:1.36855\n[100]\tvalidation_0-mlogloss:0.50915\n[200]\tvalidation_0-mlogloss:0.25400\n[300]\tvalidation_0-mlogloss:0.16055\n[400]\tvalidation_0-mlogloss:0.12507\n[500]\tvalidation_0-mlogloss:0.11125\n[600]\tvalidation_0-mlogloss:0.10572\n[700]\tvalidation_0-mlogloss:0.10393\n[765]\tvalidation_0-mlogloss:0.10368\n#########################\n### Fold 18\n#########################\n[0]\tvalidation_0-mlogloss:1.36837\n[100]\tvalidation_0-mlogloss:0.49333\n[200]\tvalidation_0-mlogloss:0.22661\n[300]\tvalidation_0-mlogloss:0.12802\n[400]\tvalidation_0-mlogloss:0.08926\n[500]\tvalidation_0-mlogloss:0.07338\n[600]\tvalidation_0-mlogloss:0.06659\n[700]\tvalidation_0-mlogloss:0.06289\n[800]\tvalidation_0-mlogloss:0.06118\n[900]\tvalidation_0-mlogloss:0.06021\n[1000]\tvalidation_0-mlogloss:0.05958\n[1016]\tvalidation_0-mlogloss:0.05957\n#########################\n### Fold 19\n#########################\n[0]\tvalidation_0-mlogloss:1.36825\n[100]\tvalidation_0-mlogloss:0.50119\n[200]\tvalidation_0-mlogloss:0.24444\n[300]\tvalidation_0-mlogloss:0.15202\n[400]\tvalidation_0-mlogloss:0.11641\n[500]\tvalidation_0-mlogloss:0.10198\n[600]\tvalidation_0-mlogloss:0.09504\n[700]\tvalidation_0-mlogloss:0.09139\n[800]\tvalidation_0-mlogloss:0.08921\n[900]\tvalidation_0-mlogloss:0.08788\n[1000]\tvalidation_0-mlogloss:0.08698\n[1100]\tvalidation_0-mlogloss:0.08638\n[1200]\tvalidation_0-mlogloss:0.08593\n[1300]\tvalidation_0-mlogloss:0.08551\n[1335]\tvalidation_0-mlogloss:0.08550\n#########################\n### Fold 20\n#########################\n[0]\tvalidation_0-mlogloss:1.36837\n[100]\tvalidation_0-mlogloss:0.49896\n[200]\tvalidation_0-mlogloss:0.23988\n[300]\tvalidation_0-mlogloss:0.14330\n[400]\tvalidation_0-mlogloss:0.10410\n[500]\tvalidation_0-mlogloss:0.08665\n[600]\tvalidation_0-mlogloss:0.07846\n[700]\tvalidation_0-mlogloss:0.07368\n[800]\tvalidation_0-mlogloss:0.07103\n[900]\tvalidation_0-mlogloss:0.06923\n[1000]\tvalidation_0-mlogloss:0.06791\n[1100]\tvalidation_0-mlogloss:0.06693\n[1200]\tvalidation_0-mlogloss:0.06626\n[1300]\tvalidation_0-mlogloss:0.06584\n[1400]\tvalidation_0-mlogloss:0.06542\n[1500]\tvalidation_0-mlogloss:0.06515\n[1532]\tvalidation_0-mlogloss:0.06512\nCPU times: user 3min 52s, sys: 1.29 s, total: 3min 53s\nWall time: 3min 43s\n","output_type":"stream"}],"execution_count":21},{"cell_type":"code","source":"preds = np.argmax(pred, axis=1)\npreds2 = np.argmax(pred2, axis=1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-29T16:46:35.298350Z","iopub.execute_input":"2025-09-29T16:46:35.298564Z","iopub.status.idle":"2025-09-29T16:46:35.302564Z","shell.execute_reply.started":"2025-09-29T16:46:35.298546Z","shell.execute_reply":"2025-09-29T16:46:35.301917Z"}},"outputs":[],"execution_count":22},{"cell_type":"code","source":"# oof_pred = np.argmax(oof, axis=1)\nprint(f1_score(y_valid, preds, average=\"macro\"))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-29T16:46:35.303616Z","iopub.execute_input":"2025-09-29T16:46:35.303824Z","iopub.status.idle":"2025-09-29T16:46:35.350233Z","shell.execute_reply.started":"2025-09-29T16:46:35.303809Z","shell.execute_reply":"2025-09-29T16:46:35.349564Z"}},"outputs":[{"name":"stdout","text":"0.8823396327048377\n","output_type":"stream"}],"execution_count":23},{"cell_type":"code","source":"# 0.8859700616278491\n# 0.9769843257389335","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-29T16:46:35.350956Z","iopub.execute_input":"2025-09-29T16:46:35.351109Z","iopub.status.idle":"2025-09-29T16:46:35.354271Z","shell.execute_reply.started":"2025-09-29T16:46:35.351097Z","shell.execute_reply":"2025-09-29T16:46:35.353674Z"}},"outputs":[],"execution_count":24},{"cell_type":"code","source":"data = {\"ID\": test_id, \"Target\": preds2}\nsubmission = pd.DataFrame(data)\nsubmission[\"Target\"] = submission[\"Target\"].map({0: \"NORAIN\", 1: \"SMALLRAIN\", 2: \"MEDIUMRAIN\", 3: \"HEAVYRAIN\"})\nsubmission.to_csv(\"submission.csv\", index=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-29T16:46:35.354925Z","iopub.execute_input":"2025-09-29T16:46:35.355158Z","iopub.status.idle":"2025-09-29T16:46:35.394193Z","shell.execute_reply.started":"2025-09-29T16:46:35.355139Z","shell.execute_reply":"2025-09-29T16:46:35.393540Z"}},"outputs":[],"execution_count":25},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}